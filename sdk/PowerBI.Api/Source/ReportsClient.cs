// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    /// <summary> The Reports service client. </summary>
    public partial class ReportsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ReportsRestClient RestClient { get; }

        /// <summary> Initializes a new instance of ReportsClient for mocking. </summary>
        protected ReportsClient()
        {
        }

        /// <summary> Initializes a new instance of ReportsClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ReportsClient(TokenCredential credential, Uri endpoint = null, PowerBIClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("https://api.powerbi.com");

            options ??= new PowerBIClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://analysis.windows.net/powerbi/api/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new ReportsRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of ReportsClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal ReportsClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new ReportsRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Returns a list of reports from **My workspace**. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This API also returns shared reports and reports from shared apps. Reports that reside in shared workspaces can be accessed using the [Get Reports In Group API](/rest/api/power-bi/reports/get-reports-in-group).
        ///
        /// Since paginated reports (RDL) don't have a dataset, the dataset ID value in the API response for paginated reports isn't displayed.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Reports>> GetReportsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetReports");
            scope.Start();
            try
            {
                return await RestClient.GetReportsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of reports from **My workspace**. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This API also returns shared reports and reports from shared apps. Reports that reside in shared workspaces can be accessed using the [Get Reports In Group API](/rest/api/power-bi/reports/get-reports-in-group).
        ///
        /// Since paginated reports (RDL) don't have a dataset, the dataset ID value in the API response for paginated reports isn't displayed.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Reports> GetReports(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetReports");
            scope.Start();
            try
            {
                return RestClient.GetReports(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Report>> GetReportAsync(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetReport");
            scope.Start();
            try
            {
                return await RestClient.GetReportAsync(reportId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Report> GetReport(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetReport");
            scope.Start();
            try
            {
                return RestClient.GetReport(reportId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> DeleteReportAsync(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.DeleteReport");
            scope.Start();
            try
            {
                return await RestClient.DeleteReportAsync(reportId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response DeleteReport(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.DeleteReport");
            scope.Start();
            try
            {
                return RestClient.DeleteReport(reportId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Clones the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Clone report parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// - If the dataset for a cloned report resides in two different workspaces or in **My workspace**, then a shared dataset will be created in the report's workspace.
        /// - When cloned, reports with a [live connection](/power-bi/desktop-report-lifecycle-datasets) will lose that connection and instead have a direct binding to the target dataset.
        ///
        /// ## Permissions
        ///
        /// The user must have all of the following, unless a requirement doesn't apply:
        ///
        /// - **Write** permission on the specified report.
        /// - **Build** permission on the target dataset, required if the `targetModelId` parameter is used.
        ///
        /// ## Required Scope
        ///
        /// Content.Create
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Report>> CloneReportAsync(Guid reportId, CloneReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.CloneReport");
            scope.Start();
            try
            {
                return await RestClient.CloneReportAsync(reportId, requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Clones the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Clone report parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// - If the dataset for a cloned report resides in two different workspaces or in **My workspace**, then a shared dataset will be created in the report's workspace.
        /// - When cloned, reports with a [live connection](/power-bi/desktop-report-lifecycle-datasets) will lose that connection and instead have a direct binding to the target dataset.
        ///
        /// ## Permissions
        ///
        /// The user must have all of the following, unless a requirement doesn't apply:
        ///
        /// - **Write** permission on the specified report.
        /// - **Build** permission on the target dataset, required if the `targetModelId` parameter is used.
        ///
        /// ## Required Scope
        ///
        /// Content.Create
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Report> CloneReport(Guid reportId, CloneReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.CloneReport");
            scope.Start();
            try
            {
                return RestClient.CloneReport(reportId, requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Exports the specified report from **My workspace** to a Power BI .pbix or .rdl file. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// - For .pbix reports -
        ///  As a [workaround](/power-bi/developer/embedded/troubleshoot-rest-api#fix-timeout-exceptions-when-using-import-and-export-apis) for timeout issues, set the `preferClientRouting` URL query parameter to `true`.
        /// - Large files are downloaded to a temporary blob. Their URL is returned in the response, and stored in the locally downloaded Power BI .pbix file.
        /// - For more information on requirements and limitations, see [Download a report from the Power BI service to Power BI Desktop](/power-bi/create-reports/service-export-to-pbix).
        ///
        /// &gt; [!NOTE]
        /// &gt; Try-it feature is not supported for this API.
        ///  See [Export Power BI Report](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/Export-PowerBIReport.ps1) Powershell script for an example of how to use this API.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or both Report.Read.All and Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// For .pbix report, after calling [Rebind Report](/rest/api/power-bi/reports/rebind-report), export of a report with a [Power BI service live connection](/power-bi/desktop-report-lifecycle-datasets) isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Stream>> ExportReportAsync(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.ExportReport");
            scope.Start();
            try
            {
                return await RestClient.ExportReportAsync(reportId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Exports the specified report from **My workspace** to a Power BI .pbix or .rdl file. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// - For .pbix reports -
        ///  As a [workaround](/power-bi/developer/embedded/troubleshoot-rest-api#fix-timeout-exceptions-when-using-import-and-export-apis) for timeout issues, set the `preferClientRouting` URL query parameter to `true`.
        /// - Large files are downloaded to a temporary blob. Their URL is returned in the response, and stored in the locally downloaded Power BI .pbix file.
        /// - For more information on requirements and limitations, see [Download a report from the Power BI service to Power BI Desktop](/power-bi/create-reports/service-export-to-pbix).
        ///
        /// &gt; [!NOTE]
        /// &gt; Try-it feature is not supported for this API.
        ///  See [Export Power BI Report](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/Export-PowerBIReport.ps1) Powershell script for an example of how to use this API.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or both Report.Read.All and Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// For .pbix report, after calling [Rebind Report](/rest/api/power-bi/reports/rebind-report), export of a report with a [Power BI service live connection](/power-bi/desktop-report-lifecycle-datasets) isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Stream> ExportReport(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.ExportReport");
            scope.Start();
            try
            {
                return RestClient.ExportReport(reportId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the content of the specified report from **My workspace** with the content of a specified source report. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> UpdateReportContent parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Specify the source report in the request body.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Report>> UpdateReportContentAsync(Guid reportId, UpdateReportContentRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.UpdateReportContent");
            scope.Start();
            try
            {
                return await RestClient.UpdateReportContentAsync(reportId, requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the content of the specified report from **My workspace** with the content of a specified source report. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> UpdateReportContent parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Specify the source report in the request body.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Report> UpdateReportContent(Guid reportId, UpdateReportContentRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.UpdateReportContent");
            scope.Start();
            try
            {
                return RestClient.UpdateReportContent(reportId, requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Rebinds the specified report from **My workspace** to the specified dataset. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Rebind report parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// - If the specified dataset resides in a different workspace than the report, then a shared dataset will be created in **My workspace**.
        /// - On rebind, reports with a [live connection](/power-bi/desktop-report-lifecycle-datasets) will lose that connection and instead have a direct binding to the target dataset.
        ///
        /// ## Permissions
        ///
        /// The user must have all of the following:
        ///
        /// - **Write** permission on the specified report.
        /// - **Build** permission on the target dataset.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> RebindReportAsync(Guid reportId, RebindReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.RebindReport");
            scope.Start();
            try
            {
                return await RestClient.RebindReportAsync(reportId, requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Rebinds the specified report from **My workspace** to the specified dataset. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Rebind report parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// - If the specified dataset resides in a different workspace than the report, then a shared dataset will be created in **My workspace**.
        /// - On rebind, reports with a [live connection](/power-bi/desktop-report-lifecycle-datasets) will lose that connection and instead have a direct binding to the target dataset.
        ///
        /// ## Permissions
        ///
        /// The user must have all of the following:
        ///
        /// - **Write** permission on the specified report.
        /// - **Build** permission on the target dataset.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response RebindReport(Guid reportId, RebindReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.RebindReport");
            scope.Start();
            try
            {
                return RestClient.RebindReport(reportId, requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of pages within the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Pages>> GetPagesAsync(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetPages");
            scope.Start();
            try
            {
                return await RestClient.GetPagesAsync(reportId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of pages within the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Pages> GetPages(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetPages");
            scope.Start();
            try
            {
                return RestClient.GetPages(reportId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified page within the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="pageName"> The page name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Models.Page>> GetPageAsync(Guid reportId, string pageName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetPage");
            scope.Start();
            try
            {
                return await RestClient.GetPageAsync(reportId, pageName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified page within the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="pageName"> The page name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Models.Page> GetPage(Guid reportId, string pageName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetPage");
            scope.Start();
            try
            {
                return RestClient.GetPage(reportId, pageName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of data sources for the specified paginated report (RDL) from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Datasources>> GetDatasourcesAsync(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetDatasources");
            scope.Start();
            try
            {
                return await RestClient.GetDatasourcesAsync(reportId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of data sources for the specified paginated report (RDL) from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Datasources> GetDatasources(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetDatasources");
            scope.Start();
            try
            {
                return RestClient.GetDatasources(reportId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the data sources of the specified paginated report (RDL) from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="updateRdlDatasourcesRequest"> The <see cref="UpdateRdlDatasourcesRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; Both the original data source and the new data source must have the exact same schema.
        ///
        /// ## Permissions
        ///
        /// The user must be the data source owner.
        ///
        /// ## Required Scope
        ///
        /// Reports.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Only supports paginated reports.
        /// - Changing the data source type isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateDatasourcesAsync(Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.UpdateDatasources");
            scope.Start();
            try
            {
                return await RestClient.UpdateDatasourcesAsync(reportId, updateRdlDatasourcesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the data sources of the specified paginated report (RDL) from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="updateRdlDatasourcesRequest"> The <see cref="UpdateRdlDatasourcesRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; Both the original data source and the new data source must have the exact same schema.
        ///
        /// ## Permissions
        ///
        /// The user must be the data source owner.
        ///
        /// ## Required Scope
        ///
        /// Reports.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Only supports paginated reports.
        /// - Changing the data source type isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateDatasources(Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.UpdateDatasources");
            scope.Start();
            try
            {
                return RestClient.UpdateDatasources(reportId, updateRdlDatasourcesRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Exports the specified report from **My workspace** to the requested [file format](/rest/api/power-bi/reports/export-to-file#fileformat). </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Export to file request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// The API is asynchronous. When the API is called, it triggers an export job. After triggering an export job, use [GetExportToFileStatus API](/rest/api/power-bi/reports/get-export-to-file-status) to track the job status.
        /// Read more about the entire flow: [Export Power BI reports](/power-bi/developer/embedded/export-to) and [Export Paginated reports](/power-bi/developer/embedded/export-paginated-report)
        ///
        /// ## Required Scope
        ///
        /// All of the following:
        ///
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Check the limitations in [Export Power BI report to file](/power-bi/developer/embedded/export-to#considerations-and-limitations) and [Export paginated report to file](/power-bi/developer/embedded/export-paginated-report#considerations-and-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Export>> ExportToFileAsync(Guid reportId, ExportReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.ExportToFile");
            scope.Start();
            try
            {
                return await RestClient.ExportToFileAsync(reportId, requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Exports the specified report from **My workspace** to the requested [file format](/rest/api/power-bi/reports/export-to-file#fileformat). </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Export to file request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// The API is asynchronous. When the API is called, it triggers an export job. After triggering an export job, use [GetExportToFileStatus API](/rest/api/power-bi/reports/get-export-to-file-status) to track the job status.
        /// Read more about the entire flow: [Export Power BI reports](/power-bi/developer/embedded/export-to) and [Export Paginated reports](/power-bi/developer/embedded/export-paginated-report)
        ///
        /// ## Required Scope
        ///
        /// All of the following:
        ///
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Check the limitations in [Export Power BI report to file](/power-bi/developer/embedded/export-to#considerations-and-limitations) and [Export paginated report to file](/power-bi/developer/embedded/export-paginated-report#considerations-and-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Export> ExportToFile(Guid reportId, ExportReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.ExportToFile");
            scope.Start();
            try
            {
                return RestClient.ExportToFile(reportId, requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the current status of the [Export to File](/rest/api/power-bi/reports/export-to-file) job for the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="exportId"> The export ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When the export job status is 'Succeeded' use the [GetFileOfExportToFile API](/rest/api/power-bi/reports/get-file-of-export-to-file) to retrieve the file.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Export>> GetExportToFileStatusAsync(Guid reportId, string exportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetExportToFileStatus");
            scope.Start();
            try
            {
                return await RestClient.GetExportToFileStatusAsync(reportId, exportId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the current status of the [Export to File](/rest/api/power-bi/reports/export-to-file) job for the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="exportId"> The export ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When the export job status is 'Succeeded' use the [GetFileOfExportToFile API](/rest/api/power-bi/reports/get-file-of-export-to-file) to retrieve the file.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Export> GetExportToFileStatus(Guid reportId, string exportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetExportToFileStatus");
            scope.Start();
            try
            {
                return RestClient.GetExportToFileStatus(reportId, exportId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Binds the specified data source of the paginated report from **My workspace** to the specified gateway, optionally with a given data source ID. If you don't supply a specific data source ID, the data source will be bound to the first matching data source in the gateway. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="rdlBindToGatewayRequest"> The bind to gateway request payload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        ///  This API call can be called by a service principal profile.
        ///
        /// ## Required Delegated Scopes
        ///
        /// Report.ReadWrite.All or Report.Read.All
        ///
        /// ## Limitations
        ///
        /// Only supports on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> BindToGatewayAsync(Guid reportId, RdlBindToGatewayRequest rdlBindToGatewayRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.BindToGateway");
            scope.Start();
            try
            {
                return await RestClient.BindToGatewayAsync(reportId, rdlBindToGatewayRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Binds the specified data source of the paginated report from **My workspace** to the specified gateway, optionally with a given data source ID. If you don't supply a specific data source ID, the data source will be bound to the first matching data source in the gateway. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="rdlBindToGatewayRequest"> The bind to gateway request payload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        ///  This API call can be called by a service principal profile.
        ///
        /// ## Required Delegated Scopes
        ///
        /// Report.ReadWrite.All or Report.Read.All
        ///
        /// ## Limitations
        ///
        /// Only supports on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response BindToGateway(Guid reportId, RdlBindToGatewayRequest rdlBindToGatewayRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.BindToGateway");
            scope.Start();
            try
            {
                return RestClient.BindToGateway(reportId, rdlBindToGatewayRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of reports from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Since paginated reports (RDL) don't have a dataset, the dataset ID value in the API response for paginated reports isn't displayed.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Reports>> GetReportsInGroupAsync(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetReportsInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetReportsInGroupAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of reports from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Since paginated reports (RDL) don't have a dataset, the dataset ID value in the API response for paginated reports isn't displayed.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Reports> GetReportsInGroup(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetReportsInGroup");
            scope.Start();
            try
            {
                return RestClient.GetReportsInGroup(groupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Report>> GetReportInGroupAsync(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetReportInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetReportInGroupAsync(groupId, reportId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Report> GetReportInGroup(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetReportInGroup");
            scope.Start();
            try
            {
                return RestClient.GetReportInGroup(groupId, reportId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> DeleteReportInGroupAsync(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.DeleteReportInGroup");
            scope.Start();
            try
            {
                return await RestClient.DeleteReportInGroupAsync(groupId, reportId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response DeleteReportInGroup(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.DeleteReportInGroup");
            scope.Start();
            try
            {
                return RestClient.DeleteReportInGroup(groupId, reportId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Clones the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Clone report parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// - If the dataset for a cloned report resides in two different workspaces or in **My workspace**, then a shared dataset will be created in the report's workspace.
        /// - When cloned, reports with a [live connection](/power-bi/desktop-report-lifecycle-datasets) will lose that connection and instead have a direct binding to the target dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must have all of the following, unless a requirement doesn't apply:
        ///
        ///   - **Write** permission on the specified report.
        ///   - **Build** permission on the target dataset, required if the `targetModelId` parameter is used.
        ///
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Content.Create
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Report>> CloneReportInGroupAsync(Guid groupId, Guid reportId, CloneReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.CloneReportInGroup");
            scope.Start();
            try
            {
                return await RestClient.CloneReportInGroupAsync(groupId, reportId, requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Clones the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Clone report parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// - If the dataset for a cloned report resides in two different workspaces or in **My workspace**, then a shared dataset will be created in the report's workspace.
        /// - When cloned, reports with a [live connection](/power-bi/desktop-report-lifecycle-datasets) will lose that connection and instead have a direct binding to the target dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must have all of the following, unless a requirement doesn't apply:
        ///
        ///   - **Write** permission on the specified report.
        ///   - **Build** permission on the target dataset, required if the `targetModelId` parameter is used.
        ///
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Content.Create
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Report> CloneReportInGroup(Guid groupId, Guid reportId, CloneReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.CloneReportInGroup");
            scope.Start();
            try
            {
                return RestClient.CloneReportInGroup(groupId, reportId, requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Exports the specified report from the specified workspace to a Power BI .pbix or .rdl file. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="downloadType"> The type of download. Valid values are LiveConnect and IncludeModel. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// - For .pbix reports -
        ///  You can set the `preferClientRouting` URL query parameter to `true` as a [workaround](/power-bi/developer/embedded/troubleshoot-rest-api#fix-timeout-exceptions-when-using-import-and-export-apis) for timeout issues.
        /// - Large files are downloaded to a temporary blob. Their URL is returned in the response and stored in the locally downloaded Power BI .pbix file.
        /// - For more information on requirements and limitations, see [Download a report from the Power BI service to Power BI Desktop](/power-bi/create-reports/service-export-to-pbix).
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// &gt; [!NOTE]
        /// &gt; Try-it feature is not supported for this API.
        ///  See [Export Power BI Report](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/Export-PowerBIReport.ps1) Powershell script for an example of how to use this API.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or both Report.Read.All and Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// * For .pbix reports, exporting a report is subject to the same limitation as [downloading a report .pbix file](/power-bi/create-reports/service-export-to-pbix#limitations-when-downloading-a-report-pbix-file).
        ///
        /// * After calling [Rebind Report](/rest/api/power-bi/reports/rebind-report), exporting a report with a [Power BI service live connection](/power-bi/connect-data/desktop-report-lifecycle-datasets) isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Stream>> ExportReportInGroupAsync(Guid groupId, Guid reportId, DownloadType? downloadType = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.ExportReportInGroup");
            scope.Start();
            try
            {
                return await RestClient.ExportReportInGroupAsync(groupId, reportId, downloadType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Exports the specified report from the specified workspace to a Power BI .pbix or .rdl file. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="downloadType"> The type of download. Valid values are LiveConnect and IncludeModel. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// - For .pbix reports -
        ///  You can set the `preferClientRouting` URL query parameter to `true` as a [workaround](/power-bi/developer/embedded/troubleshoot-rest-api#fix-timeout-exceptions-when-using-import-and-export-apis) for timeout issues.
        /// - Large files are downloaded to a temporary blob. Their URL is returned in the response and stored in the locally downloaded Power BI .pbix file.
        /// - For more information on requirements and limitations, see [Download a report from the Power BI service to Power BI Desktop](/power-bi/create-reports/service-export-to-pbix).
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// &gt; [!NOTE]
        /// &gt; Try-it feature is not supported for this API.
        ///  See [Export Power BI Report](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/Export-PowerBIReport.ps1) Powershell script for an example of how to use this API.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or both Report.Read.All and Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// * For .pbix reports, exporting a report is subject to the same limitation as [downloading a report .pbix file](/power-bi/create-reports/service-export-to-pbix#limitations-when-downloading-a-report-pbix-file).
        ///
        /// * After calling [Rebind Report](/rest/api/power-bi/reports/rebind-report), exporting a report with a [Power BI service live connection](/power-bi/connect-data/desktop-report-lifecycle-datasets) isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Stream> ExportReportInGroup(Guid groupId, Guid reportId, DownloadType? downloadType = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.ExportReportInGroup");
            scope.Start();
            try
            {
                return RestClient.ExportReportInGroup(groupId, reportId, downloadType, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the content of the specified report from the specified workspace with the content of a specified source report. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> UpdateReportContent parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Specify the source report in the request body.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Report>> UpdateReportContentInGroupAsync(Guid groupId, Guid reportId, UpdateReportContentRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.UpdateReportContentInGroup");
            scope.Start();
            try
            {
                return await RestClient.UpdateReportContentInGroupAsync(groupId, reportId, requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the content of the specified report from the specified workspace with the content of a specified source report. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> UpdateReportContent parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Specify the source report in the request body.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Report> UpdateReportContentInGroup(Guid groupId, Guid reportId, UpdateReportContentRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.UpdateReportContentInGroup");
            scope.Start();
            try
            {
                return RestClient.UpdateReportContentInGroup(groupId, reportId, requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Rebinds the specified report from the specified workspace to the specified dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Rebind report parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// - If the specified dataset resides in a different workspace than the report or in **My workspace**, then a shared dataset will be created in the report's workspace.
        /// - On rebind, reports with a [live connection](/power-bi/desktop-report-lifecycle-datasets) will lose that connection and instead have a direct binding to the target dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must have all of the following:
        ///
        ///   - **Write** permission on the specified report.
        ///   - **Build** permission on the target dataset.
        ///
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Paginated reports are not supported.&lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> RebindReportInGroupAsync(Guid groupId, Guid reportId, RebindReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.RebindReportInGroup");
            scope.Start();
            try
            {
                return await RestClient.RebindReportInGroupAsync(groupId, reportId, requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Rebinds the specified report from the specified workspace to the specified dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Rebind report parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// - If the specified dataset resides in a different workspace than the report or in **My workspace**, then a shared dataset will be created in the report's workspace.
        /// - On rebind, reports with a [live connection](/power-bi/desktop-report-lifecycle-datasets) will lose that connection and instead have a direct binding to the target dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must have all of the following:
        ///
        ///   - **Write** permission on the specified report.
        ///   - **Build** permission on the target dataset.
        ///
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Paginated reports are not supported.&lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response RebindReportInGroup(Guid groupId, Guid reportId, RebindReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.RebindReportInGroup");
            scope.Start();
            try
            {
                return RestClient.RebindReportInGroup(groupId, reportId, requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of pages within the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Pages>> GetPagesInGroupAsync(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetPagesInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetPagesInGroupAsync(groupId, reportId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of pages within the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Pages> GetPagesInGroup(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetPagesInGroup");
            scope.Start();
            try
            {
                return RestClient.GetPagesInGroup(groupId, reportId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified page within the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="pageName"> The page name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Models.Page>> GetPageInGroupAsync(Guid groupId, Guid reportId, string pageName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetPageInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetPageInGroupAsync(groupId, reportId, pageName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified page within the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="pageName"> The page name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Models.Page> GetPageInGroup(Guid groupId, Guid reportId, string pageName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetPageInGroup");
            scope.Start();
            try
            {
                return RestClient.GetPageInGroup(groupId, reportId, pageName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of data sources for the specified paginated report (RDL) from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The <see cref="Guid"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Datasources>> GetDatasourcesInGroupAsync(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetDatasourcesInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetDatasourcesInGroupAsync(groupId, reportId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of data sources for the specified paginated report (RDL) from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The <see cref="Guid"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Datasources> GetDatasourcesInGroup(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetDatasourcesInGroup");
            scope.Start();
            try
            {
                return RestClient.GetDatasourcesInGroup(groupId, reportId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the data sources of the specified paginated report (RDL) from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="updateRdlDatasourcesRequest"> The <see cref="UpdateRdlDatasourcesRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; Both the original data source and the new data source must have the exact same schema.
        ///
        /// ## Permissions
        ///
        /// - The user must be the data source owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Reports.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Only supports paginated reports.
        /// - Changing the data source type isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateDatasourcesInGroupAsync(Guid groupId, Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.UpdateDatasourcesInGroup");
            scope.Start();
            try
            {
                return await RestClient.UpdateDatasourcesInGroupAsync(groupId, reportId, updateRdlDatasourcesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the data sources of the specified paginated report (RDL) from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="updateRdlDatasourcesRequest"> The <see cref="UpdateRdlDatasourcesRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; Both the original data source and the new data source must have the exact same schema.
        ///
        /// ## Permissions
        ///
        /// - The user must be the data source owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Reports.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Only supports paginated reports.
        /// - Changing the data source type isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateDatasourcesInGroup(Guid groupId, Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.UpdateDatasourcesInGroup");
            scope.Start();
            try
            {
                return RestClient.UpdateDatasourcesInGroup(groupId, reportId, updateRdlDatasourcesRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Exports the specified report from the specified workspace to the requested [file format](/rest/api/power-bi/reports/export-to-file-in-group#fileformat). </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Export to file request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// The API is asynchronous. When the API is called, it triggers an export job. After triggering an export job, use [GetExportToFileStatus API](/rest/api/power-bi/reports/get-export-to-file-status-in-group) to track the job status.
        /// Read more about the entire flow: [Export Power BI reports](/power-bi/developer/embedded/export-to) and [Export Paginated reports](/power-bi/developer/embedded/export-paginated-report)
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// All of the following:
        ///
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Check the limitations in [Export Power BI report to file](/power-bi/developer/embedded/export-to#considerations-and-limitations) and [Export paginated report to file](/power-bi/developer/embedded/export-paginated-report#considerations-and-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Export>> ExportToFileInGroupAsync(Guid groupId, Guid reportId, ExportReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.ExportToFileInGroup");
            scope.Start();
            try
            {
                return await RestClient.ExportToFileInGroupAsync(groupId, reportId, requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Exports the specified report from the specified workspace to the requested [file format](/rest/api/power-bi/reports/export-to-file-in-group#fileformat). </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Export to file request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// The API is asynchronous. When the API is called, it triggers an export job. After triggering an export job, use [GetExportToFileStatus API](/rest/api/power-bi/reports/get-export-to-file-status-in-group) to track the job status.
        /// Read more about the entire flow: [Export Power BI reports](/power-bi/developer/embedded/export-to) and [Export Paginated reports](/power-bi/developer/embedded/export-paginated-report)
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// All of the following:
        ///
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Check the limitations in [Export Power BI report to file](/power-bi/developer/embedded/export-to#considerations-and-limitations) and [Export paginated report to file](/power-bi/developer/embedded/export-paginated-report#considerations-and-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Export> ExportToFileInGroup(Guid groupId, Guid reportId, ExportReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.ExportToFileInGroup");
            scope.Start();
            try
            {
                return RestClient.ExportToFileInGroup(groupId, reportId, requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the current status of the [Export to File In Group](/rest/api/power-bi/reports/export-to-file-in-group) job for the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="exportId"> The export ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When the export job status is 'Succeeded' use the [GetFileOfExportToFile API](/rest/api/power-bi/reports/get-file-of-export-to-file-in-group) to retrieve the file.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Export>> GetExportToFileStatusInGroupAsync(Guid groupId, Guid reportId, string exportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetExportToFileStatusInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetExportToFileStatusInGroupAsync(groupId, reportId, exportId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the current status of the [Export to File In Group](/rest/api/power-bi/reports/export-to-file-in-group) job for the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="exportId"> The export ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When the export job status is 'Succeeded' use the [GetFileOfExportToFile API](/rest/api/power-bi/reports/get-file-of-export-to-file-in-group) to retrieve the file.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Export> GetExportToFileStatusInGroup(Guid groupId, Guid reportId, string exportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetExportToFileStatusInGroup");
            scope.Start();
            try
            {
                return RestClient.GetExportToFileStatusInGroup(groupId, reportId, exportId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generates an embed token to allow report creation in the specified workspace based on the specified dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="requestParameters"> Generate token parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!TIP]
        /// &gt; To create embed tokens, it's recommended to use the latest API, [Generate Token](/rest/api/power-bi/embed-token/generate-token). Generate token supports additional functions, such as creating a token for multiple items.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is only relevant to the [embed for your customers](/power-bi/developer/embed-sample-for-customers) scenario. To learn more about using this API, see [Considerations when generating an embed token](/power-bi/developer/embedded/generate-embed-token).
        ///
        /// ## Permissions
        ///
        /// - When using a service principal for authentication, refer to [Embed Power BI content with service principal](/power-bi/developer/embed-service-principal) and [Considerations and limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// All of the following:
        ///
        /// - Content.Create
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// For Azure Analysis Services or Analysis Services on-premises live connection reports, generating an embed token with row-level security may not work for several minutes after a [Rebind Report](/rest/api/power-bi/reports/rebind-report) api call.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<EmbedToken>> GenerateTokenForCreateInGroupAsync(Guid groupId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GenerateTokenForCreateInGroup");
            scope.Start();
            try
            {
                return await RestClient.GenerateTokenForCreateInGroupAsync(groupId, requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generates an embed token to allow report creation in the specified workspace based on the specified dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="requestParameters"> Generate token parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!TIP]
        /// &gt; To create embed tokens, it's recommended to use the latest API, [Generate Token](/rest/api/power-bi/embed-token/generate-token). Generate token supports additional functions, such as creating a token for multiple items.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is only relevant to the [embed for your customers](/power-bi/developer/embed-sample-for-customers) scenario. To learn more about using this API, see [Considerations when generating an embed token](/power-bi/developer/embedded/generate-embed-token).
        ///
        /// ## Permissions
        ///
        /// - When using a service principal for authentication, refer to [Embed Power BI content with service principal](/power-bi/developer/embed-service-principal) and [Considerations and limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// All of the following:
        ///
        /// - Content.Create
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// For Azure Analysis Services or Analysis Services on-premises live connection reports, generating an embed token with row-level security may not work for several minutes after a [Rebind Report](/rest/api/power-bi/reports/rebind-report) api call.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<EmbedToken> GenerateTokenForCreateInGroup(Guid groupId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GenerateTokenForCreateInGroup");
            scope.Start();
            try
            {
                return RestClient.GenerateTokenForCreateInGroup(groupId, requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generates an embed token to view or edit the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Generate token parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!TIP]
        /// &gt; To create embed tokens, it's recommended to use the latest API, [Generate Token](/rest/api/power-bi/embed-token/generate-token). Generate token supports additional functions, such as creating a token for multiple items.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is only relevant to the [embed for your customers](/power-bi/developer/embed-sample-for-customers) scenario. To learn more about using this API, see [Considerations when generating an embed token](/power-bi/developer/embedded/generate-embed-token).
        ///
        /// ## Permissions
        ///
        /// - When using a service principal for authentication, refer to [Embed Power BI content with service principal](/power-bi/developer/embed-service-principal) and [Considerations and limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// All of the following, unless a requirement doesn't apply:
        ///
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        /// - Content.Create, required if the `allowSaveAs` flag is specified in [GenerateTokenRequest](/rest/api/power-bi/embed-token/reports-generate-token-for-create-in-group#generatetokenrequest)
        ///
        /// ## Limitations
        ///
        /// For Azure Analysis Services or Analysis Services on-premises live connection reports, generating an embed token with row-level security may not work for several minutes after a [Rebind Report](/rest/api/power-bi/reports/rebind-report).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<EmbedToken>> GenerateTokenInGroupAsync(Guid groupId, Guid reportId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GenerateTokenInGroup");
            scope.Start();
            try
            {
                return await RestClient.GenerateTokenInGroupAsync(groupId, reportId, requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generates an embed token to view or edit the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Generate token parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!TIP]
        /// &gt; To create embed tokens, it's recommended to use the latest API, [Generate Token](/rest/api/power-bi/embed-token/generate-token). Generate token supports additional functions, such as creating a token for multiple items.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is only relevant to the [embed for your customers](/power-bi/developer/embed-sample-for-customers) scenario. To learn more about using this API, see [Considerations when generating an embed token](/power-bi/developer/embedded/generate-embed-token).
        ///
        /// ## Permissions
        ///
        /// - When using a service principal for authentication, refer to [Embed Power BI content with service principal](/power-bi/developer/embed-service-principal) and [Considerations and limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// All of the following, unless a requirement doesn't apply:
        ///
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        /// - Content.Create, required if the `allowSaveAs` flag is specified in [GenerateTokenRequest](/rest/api/power-bi/embed-token/reports-generate-token-for-create-in-group#generatetokenrequest)
        ///
        /// ## Limitations
        ///
        /// For Azure Analysis Services or Analysis Services on-premises live connection reports, generating an embed token with row-level security may not work for several minutes after a [Rebind Report](/rest/api/power-bi/reports/rebind-report).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<EmbedToken> GenerateTokenInGroup(Guid groupId, Guid reportId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GenerateTokenInGroup");
            scope.Start();
            try
            {
                return RestClient.GenerateTokenInGroup(groupId, reportId, requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Binds the specified data source of the paginated report from the specified workspace to the specified gateway, optionally with a given data source ID. If you don't supply a specific data source ID, the data source will be bound to the first matching data source in the gateway. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="rdlBindToGatewayRequest"> The bind to gateway request payload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        ///  This API call can be called by a service principal profile.
        ///
        /// ## Required Delegated Scopes
        ///
        /// Workspace.Read.All or Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports the on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> BindToGatewayInGroupAsync(Guid groupId, Guid reportId, RdlBindToGatewayRequest rdlBindToGatewayRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.BindToGatewayInGroup");
            scope.Start();
            try
            {
                return await RestClient.BindToGatewayInGroupAsync(groupId, reportId, rdlBindToGatewayRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Binds the specified data source of the paginated report from the specified workspace to the specified gateway, optionally with a given data source ID. If you don't supply a specific data source ID, the data source will be bound to the first matching data source in the gateway. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="rdlBindToGatewayRequest"> The bind to gateway request payload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        ///  This API call can be called by a service principal profile.
        ///
        /// ## Required Delegated Scopes
        ///
        /// Workspace.Read.All or Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports the on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response BindToGatewayInGroup(Guid groupId, Guid reportId, RdlBindToGatewayRequest rdlBindToGatewayRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.BindToGatewayInGroup");
            scope.Start();
            try
            {
                return RestClient.BindToGatewayInGroup(groupId, reportId, rdlBindToGatewayRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of reports from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<AdminReports>> GetReportsInGroupAsAdminAsync(Guid groupId, string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetReportsInGroupAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetReportsInGroupAsAdminAsync(groupId, filter, top, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of reports from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<AdminReports> GetReportsInGroupAsAdmin(Guid groupId, string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetReportsInGroupAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetReportsInGroupAsAdmin(groupId, filter, top, skip, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of reports for the organization. </summary>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 50 requests per hour or 5 requests per minute, per tenant.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<AdminReports>> GetReportsAsAdminAsync(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetReportsAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetReportsAsAdminAsync(filter, top, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of reports for the organization. </summary>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 50 requests per hour or 5 requests per minute, per tenant.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<AdminReports> GetReportsAsAdmin(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetReportsAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetReportsAsAdmin(filter, top, skip, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified report. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<ReportUsers>> GetReportUsersAsAdminAsync(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetReportUsersAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetReportUsersAsAdminAsync(reportId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified report. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<ReportUsers> GetReportUsersAsAdmin(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetReportUsersAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetReportUsersAsAdmin(reportId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of report subscriptions along with subscriber details. This is a preview API call. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Subscriptions>> GetReportSubscriptionsAsAdminAsync(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetReportSubscriptionsAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetReportSubscriptionsAsAdminAsync(reportId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of report subscriptions along with subscriber details. This is a preview API call. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Subscriptions> GetReportSubscriptionsAsAdmin(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.GetReportSubscriptionsAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetReportSubscriptionsAsAdmin(reportId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Transfers ownership of the data sources for the specified paginated report (RDL) to the current authorized user. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports paginated reports.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> TakeOverInGroupAsync(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.TakeOverInGroup");
            scope.Start();
            try
            {
                return await RestClient.TakeOverInGroupAsync(groupId, reportId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Transfers ownership of the data sources for the specified paginated report (RDL) to the current authorized user. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports paginated reports.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response TakeOverInGroup(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ReportsClient.TakeOverInGroup");
            scope.Start();
            try
            {
                return RestClient.TakeOverInGroup(groupId, reportId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
