// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    internal partial class ReportsRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of ReportsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public ReportsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://api.powerbi.com");
        }

        internal HttpMessage CreateGetReportsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/reports", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of reports from **My workspace**. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This API also returns shared reports and reports from shared apps. Reports that reside in shared workspaces can be accessed using the [Get Reports In Group API](/rest/api/power-bi/reports/get-reports-in-group).
        ///
        /// Since paginated reports (RDL) don't have a dataset, the dataset ID value in the API response for paginated reports isn't displayed.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Reports>> GetReportsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Reports value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Reports.DeserializeReports(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of reports from **My workspace**. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This API also returns shared reports and reports from shared apps. Reports that reside in shared workspaces can be accessed using the [Get Reports In Group API](/rest/api/power-bi/reports/get-reports-in-group).
        ///
        /// Since paginated reports (RDL) don't have a dataset, the dataset ID value in the API response for paginated reports isn't displayed.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Reports> GetReports(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Reports value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Reports.DeserializeReports(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetReportRequest(Guid reportId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/reports/", false);
            uri.AppendPath(reportId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Report>> GetReportAsync(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportRequest(reportId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Report value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Report.DeserializeReport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Report> GetReport(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportRequest(reportId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Report value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Report.DeserializeReport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteReportRequest(Guid reportId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/reports/", false);
            uri.AppendPath(reportId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Deletes the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> DeleteReportAsync(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteReportRequest(reportId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deletes the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response DeleteReport(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteReportRequest(reportId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCloneReportRequest(Guid reportId, CloneReportRequest requestParameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/Clone", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestParameters);
            request.Content = content;
            return message;
        }

        /// <summary> Clones the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Clone report parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// - If the dataset for a cloned report resides in two different workspaces or in **My workspace**, then a shared dataset will be created in the report's workspace.
        /// - When cloned, reports with a [live connection](/power-bi/desktop-report-lifecycle-datasets) will lose that connection and instead have a direct binding to the target dataset.
        ///
        /// ## Permissions
        ///
        /// The user must have all of the following, unless a requirement doesn't apply:
        ///
        /// - **Write** permission on the specified report.
        /// - **Build** permission on the target dataset, required if the `targetModelId` parameter is used.
        ///
        /// ## Required Scope
        ///
        /// Content.Create
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Report>> CloneReportAsync(Guid reportId, CloneReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateCloneReportRequest(reportId, requestParameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Report value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Report.DeserializeReport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Clones the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Clone report parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// - If the dataset for a cloned report resides in two different workspaces or in **My workspace**, then a shared dataset will be created in the report's workspace.
        /// - When cloned, reports with a [live connection](/power-bi/desktop-report-lifecycle-datasets) will lose that connection and instead have a direct binding to the target dataset.
        ///
        /// ## Permissions
        ///
        /// The user must have all of the following, unless a requirement doesn't apply:
        ///
        /// - **Write** permission on the specified report.
        /// - **Build** permission on the target dataset, required if the `targetModelId` parameter is used.
        ///
        /// ## Required Scope
        ///
        /// Content.Create
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Report> CloneReport(Guid reportId, CloneReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateCloneReportRequest(reportId, requestParameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Report value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Report.DeserializeReport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateExportReportRequest(Guid reportId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/Export", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/zip, application/octet-stream");
            return message;
        }

        /// <summary> Exports the specified report from **My workspace** to a Power BI .pbix or .rdl file. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// - For .pbix reports -
        ///  As a [workaround](/power-bi/developer/embedded/troubleshoot-rest-api#fix-timeout-exceptions-when-using-import-and-export-apis) for timeout issues, set the `preferClientRouting` URL query parameter to `true`.
        /// - Large files are downloaded to a temporary blob. Their URL is returned in the response, and stored in the locally downloaded Power BI .pbix file.
        /// - For more information on requirements and limitations, see [Download a report from the Power BI service to Power BI Desktop](/power-bi/create-reports/service-export-to-pbix).
        ///
        /// &gt; [!NOTE]
        /// &gt; Try-it feature is not supported for this API.
        ///  See [Export Power BI Report](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/Export-PowerBIReport.ps1) Powershell script for an example of how to use this API.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or both Report.Read.All and Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// For .pbix report, after calling [Rebind Report](/rest/api/power-bi/reports/rebind-report), export of a report with a [Power BI service live connection](/power-bi/desktop-report-lifecycle-datasets) isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Stream>> ExportReportAsync(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateExportReportRequest(reportId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Exports the specified report from **My workspace** to a Power BI .pbix or .rdl file. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// - For .pbix reports -
        ///  As a [workaround](/power-bi/developer/embedded/troubleshoot-rest-api#fix-timeout-exceptions-when-using-import-and-export-apis) for timeout issues, set the `preferClientRouting` URL query parameter to `true`.
        /// - Large files are downloaded to a temporary blob. Their URL is returned in the response, and stored in the locally downloaded Power BI .pbix file.
        /// - For more information on requirements and limitations, see [Download a report from the Power BI service to Power BI Desktop](/power-bi/create-reports/service-export-to-pbix).
        ///
        /// &gt; [!NOTE]
        /// &gt; Try-it feature is not supported for this API.
        ///  See [Export Power BI Report](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/Export-PowerBIReport.ps1) Powershell script for an example of how to use this API.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or both Report.Read.All and Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// For .pbix report, after calling [Rebind Report](/rest/api/power-bi/reports/rebind-report), export of a report with a [Power BI service live connection](/power-bi/desktop-report-lifecycle-datasets) isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Stream> ExportReport(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateExportReportRequest(reportId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateReportContentRequest(Guid reportId, UpdateReportContentRequest requestParameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/UpdateReportContent", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestParameters);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the content of the specified report from **My workspace** with the content of a specified source report. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> UpdateReportContent parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// Specify the source report in the request body.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Report>> UpdateReportContentAsync(Guid reportId, UpdateReportContentRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateUpdateReportContentRequest(reportId, requestParameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Report value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Report.DeserializeReport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the content of the specified report from **My workspace** with the content of a specified source report. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> UpdateReportContent parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// Specify the source report in the request body.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Report> UpdateReportContent(Guid reportId, UpdateReportContentRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateUpdateReportContentRequest(reportId, requestParameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Report value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Report.DeserializeReport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRebindReportRequest(Guid reportId, RebindReportRequest requestParameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/Rebind", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestParameters);
            request.Content = content;
            return message;
        }

        /// <summary> Rebinds the specified report from **My workspace** to the specified dataset. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Rebind report parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// - If the specified dataset resides in a different workspace than the report, then a shared dataset will be created in **My workspace**.
        /// - On rebind, reports with a [live connection](/power-bi/desktop-report-lifecycle-datasets) will lose that connection and instead have a direct binding to the target dataset.
        ///
        /// ## Permissions
        ///
        /// The user must have all of the following:
        ///
        /// - **Write** permission on the specified report.
        /// - **Build** permission on the target dataset.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> RebindReportAsync(Guid reportId, RebindReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateRebindReportRequest(reportId, requestParameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Rebinds the specified report from **My workspace** to the specified dataset. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Rebind report parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// - If the specified dataset resides in a different workspace than the report, then a shared dataset will be created in **My workspace**.
        /// - On rebind, reports with a [live connection](/power-bi/desktop-report-lifecycle-datasets) will lose that connection and instead have a direct binding to the target dataset.
        ///
        /// ## Permissions
        ///
        /// The user must have all of the following:
        ///
        /// - **Write** permission on the specified report.
        /// - **Build** permission on the target dataset.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response RebindReport(Guid reportId, RebindReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateRebindReportRequest(reportId, requestParameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPagesRequest(Guid reportId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/pages", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of pages within the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Pages>> GetPagesAsync(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPagesRequest(reportId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Pages value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Pages.DeserializePages(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of pages within the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Pages> GetPages(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPagesRequest(reportId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Pages value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Pages.DeserializePages(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPageRequest(Guid reportId, string pageName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/pages/", false);
            uri.AppendPath(pageName, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the specified page within the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="pageName"> The page name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pageName"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Models.Page>> GetPageAsync(Guid reportId, string pageName, CancellationToken cancellationToken = default)
        {
            if (pageName == null)
            {
                throw new ArgumentNullException(nameof(pageName));
            }

            using var message = CreateGetPageRequest(reportId, pageName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Models.Page value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Models.Page.DeserializePage(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the specified page within the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="pageName"> The page name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pageName"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Models.Page> GetPage(Guid reportId, string pageName, CancellationToken cancellationToken = default)
        {
            if (pageName == null)
            {
                throw new ArgumentNullException(nameof(pageName));
            }

            using var message = CreateGetPageRequest(reportId, pageName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Models.Page value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Models.Page.DeserializePage(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasourcesRequest(Guid reportId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/datasources", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of data sources for the specified paginated report (RDL) from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Datasources>> GetDatasourcesAsync(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasourcesRequest(reportId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasources value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Datasources.DeserializeDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of data sources for the specified paginated report (RDL) from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Datasources> GetDatasources(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasourcesRequest(reportId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasources value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Datasources.DeserializeDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateDatasourcesRequest(Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/Default.UpdateDatasources", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(updateRdlDatasourcesRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the data sources of the specified paginated report (RDL) from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="updateRdlDatasourcesRequest"> The <see cref="UpdateRdlDatasourcesRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="updateRdlDatasourcesRequest"/> is null. </exception>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; Both the original data source and the new data source must have the exact same schema.
        ///
        /// ## Permissions
        ///
        /// The user must be the data source owner.
        ///
        /// ## Required Scope
        ///
        /// Reports.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Only supports paginated reports.
        /// - Changing the data source type isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UpdateDatasourcesAsync(Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest, CancellationToken cancellationToken = default)
        {
            if (updateRdlDatasourcesRequest == null)
            {
                throw new ArgumentNullException(nameof(updateRdlDatasourcesRequest));
            }

            using var message = CreateUpdateDatasourcesRequest(reportId, updateRdlDatasourcesRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the data sources of the specified paginated report (RDL) from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="updateRdlDatasourcesRequest"> The <see cref="UpdateRdlDatasourcesRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="updateRdlDatasourcesRequest"/> is null. </exception>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; Both the original data source and the new data source must have the exact same schema.
        ///
        /// ## Permissions
        ///
        /// The user must be the data source owner.
        ///
        /// ## Required Scope
        ///
        /// Reports.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Only supports paginated reports.
        /// - Changing the data source type isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UpdateDatasources(Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest, CancellationToken cancellationToken = default)
        {
            if (updateRdlDatasourcesRequest == null)
            {
                throw new ArgumentNullException(nameof(updateRdlDatasourcesRequest));
            }

            using var message = CreateUpdateDatasourcesRequest(reportId, updateRdlDatasourcesRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateExportToFileRequest(Guid reportId, ExportReportRequest requestParameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/ExportTo", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestParameters);
            request.Content = content;
            return message;
        }

        /// <summary> Exports the specified report from **My workspace** to the requested [file format](/rest/api/power-bi/reports/export-to-file#fileformat). </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Export to file request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// The API is asynchronous. When the API is called, it triggers an export job. After triggering an export job, use [GetExportToFileStatus API](/rest/api/power-bi/reports/get-export-to-file-status) to track the job status.
        /// Read more about the entire flow: [Export Power BI reports](/power-bi/developer/embedded/export-to) and [Export Paginated reports](/power-bi/developer/embedded/export-paginated-report)
        ///
        /// ## Required Scope
        ///
        /// All of the following:
        ///
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Check the limitations in [Export Power BI report to file](/power-bi/developer/embedded/export-to#considerations-and-limitations) and [Export paginated report to file](/power-bi/developer/embedded/export-paginated-report#considerations-and-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Export>> ExportToFileAsync(Guid reportId, ExportReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateExportToFileRequest(reportId, requestParameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Export value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Export.DeserializeExport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Exports the specified report from **My workspace** to the requested [file format](/rest/api/power-bi/reports/export-to-file#fileformat). </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Export to file request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// The API is asynchronous. When the API is called, it triggers an export job. After triggering an export job, use [GetExportToFileStatus API](/rest/api/power-bi/reports/get-export-to-file-status) to track the job status.
        /// Read more about the entire flow: [Export Power BI reports](/power-bi/developer/embedded/export-to) and [Export Paginated reports](/power-bi/developer/embedded/export-paginated-report)
        ///
        /// ## Required Scope
        ///
        /// All of the following:
        ///
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Check the limitations in [Export Power BI report to file](/power-bi/developer/embedded/export-to#considerations-and-limitations) and [Export paginated report to file](/power-bi/developer/embedded/export-paginated-report#considerations-and-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Export> ExportToFile(Guid reportId, ExportReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateExportToFileRequest(reportId, requestParameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Export value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Export.DeserializeExport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetExportToFileStatusRequest(Guid reportId, string exportId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/exports/", false);
            uri.AppendPath(exportId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the current status of the [Export to File](/rest/api/power-bi/reports/export-to-file) job for the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="exportId"> The export ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exportId"/> is null. </exception>
        /// <remarks>
        /// When the export job status is 'Succeeded' use the [GetFileOfExportToFile API](/rest/api/power-bi/reports/get-file-of-export-to-file) to retrieve the file.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Export>> GetExportToFileStatusAsync(Guid reportId, string exportId, CancellationToken cancellationToken = default)
        {
            if (exportId == null)
            {
                throw new ArgumentNullException(nameof(exportId));
            }

            using var message = CreateGetExportToFileStatusRequest(reportId, exportId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    {
                        Export value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Export.DeserializeExport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the current status of the [Export to File](/rest/api/power-bi/reports/export-to-file) job for the specified report from **My workspace**. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="exportId"> The export ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exportId"/> is null. </exception>
        /// <remarks>
        /// When the export job status is 'Succeeded' use the [GetFileOfExportToFile API](/rest/api/power-bi/reports/get-file-of-export-to-file) to retrieve the file.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Export> GetExportToFileStatus(Guid reportId, string exportId, CancellationToken cancellationToken = default)
        {
            if (exportId == null)
            {
                throw new ArgumentNullException(nameof(exportId));
            }

            using var message = CreateGetExportToFileStatusRequest(reportId, exportId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    {
                        Export value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Export.DeserializeExport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateBindToGatewayRequest(Guid reportId, RdlBindToGatewayRequest rdlBindToGatewayRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/Default.BindToGateway", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(rdlBindToGatewayRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Binds the specified data source of the paginated report from **My workspace** to the specified gateway, optionally with a given data source ID. If you don't supply a specific data source ID, the data source will be bound to the first matching data source in the gateway. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="rdlBindToGatewayRequest"> The bind to gateway request payload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="rdlBindToGatewayRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        ///  This API call can be called by a service principal profile.
        ///
        /// ## Required Delegated Scopes
        ///
        /// Report.ReadWrite.All or Report.Read.All
        ///
        /// ## Limitations
        ///
        /// Only supports on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> BindToGatewayAsync(Guid reportId, RdlBindToGatewayRequest rdlBindToGatewayRequest, CancellationToken cancellationToken = default)
        {
            if (rdlBindToGatewayRequest == null)
            {
                throw new ArgumentNullException(nameof(rdlBindToGatewayRequest));
            }

            using var message = CreateBindToGatewayRequest(reportId, rdlBindToGatewayRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Binds the specified data source of the paginated report from **My workspace** to the specified gateway, optionally with a given data source ID. If you don't supply a specific data source ID, the data source will be bound to the first matching data source in the gateway. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="rdlBindToGatewayRequest"> The bind to gateway request payload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="rdlBindToGatewayRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        ///  This API call can be called by a service principal profile.
        ///
        /// ## Required Delegated Scopes
        ///
        /// Report.ReadWrite.All or Report.Read.All
        ///
        /// ## Limitations
        ///
        /// Only supports on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response BindToGateway(Guid reportId, RdlBindToGatewayRequest rdlBindToGatewayRequest, CancellationToken cancellationToken = default)
        {
            if (rdlBindToGatewayRequest == null)
            {
                throw new ArgumentNullException(nameof(rdlBindToGatewayRequest));
            }

            using var message = CreateBindToGatewayRequest(reportId, rdlBindToGatewayRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetReportsInGroupRequest(Guid groupId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of reports from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Since paginated reports (RDL) don't have a dataset, the dataset ID value in the API response for paginated reports isn't displayed.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Reports>> GetReportsInGroupAsync(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportsInGroupRequest(groupId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Reports value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Reports.DeserializeReports(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of reports from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Since paginated reports (RDL) don't have a dataset, the dataset ID value in the API response for paginated reports isn't displayed.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Reports> GetReportsInGroup(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportsInGroupRequest(groupId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Reports value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Reports.DeserializeReports(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetReportInGroupRequest(Guid groupId, Guid reportId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports/", false);
            uri.AppendPath(reportId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Report>> GetReportInGroupAsync(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportInGroupRequest(groupId, reportId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Report value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Report.DeserializeReport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Report> GetReportInGroup(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportInGroupRequest(groupId, reportId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Report value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Report.DeserializeReport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteReportInGroupRequest(Guid groupId, Guid reportId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports/", false);
            uri.AppendPath(reportId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Deletes the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> DeleteReportInGroupAsync(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteReportInGroupRequest(groupId, reportId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deletes the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response DeleteReportInGroup(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteReportInGroupRequest(groupId, reportId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCloneReportInGroupRequest(Guid groupId, Guid reportId, CloneReportRequest requestParameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/Clone", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestParameters);
            request.Content = content;
            return message;
        }

        /// <summary> Clones the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Clone report parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// - If the dataset for a cloned report resides in two different workspaces or in **My workspace**, then a shared dataset will be created in the report's workspace.
        /// - When cloned, reports with a [live connection](/power-bi/desktop-report-lifecycle-datasets) will lose that connection and instead have a direct binding to the target dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must have all of the following, unless a requirement doesn't apply:
        ///
        ///   - **Write** permission on the specified report.
        ///   - **Build** permission on the target dataset, required if the `targetModelId` parameter is used.
        ///
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Content.Create
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Report>> CloneReportInGroupAsync(Guid groupId, Guid reportId, CloneReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateCloneReportInGroupRequest(groupId, reportId, requestParameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Report value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Report.DeserializeReport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Clones the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Clone report parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// - If the dataset for a cloned report resides in two different workspaces or in **My workspace**, then a shared dataset will be created in the report's workspace.
        /// - When cloned, reports with a [live connection](/power-bi/desktop-report-lifecycle-datasets) will lose that connection and instead have a direct binding to the target dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must have all of the following, unless a requirement doesn't apply:
        ///
        ///   - **Write** permission on the specified report.
        ///   - **Build** permission on the target dataset, required if the `targetModelId` parameter is used.
        ///
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Content.Create
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Report> CloneReportInGroup(Guid groupId, Guid reportId, CloneReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateCloneReportInGroupRequest(groupId, reportId, requestParameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Report value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Report.DeserializeReport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateExportReportInGroupRequest(Guid groupId, Guid reportId, DownloadType? downloadType)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/Export", false);
            if (downloadType != null)
            {
                uri.AppendQuery("downloadType", downloadType.Value.ToSerialString(), true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/zip, application/octet-stream");
            return message;
        }

        /// <summary> Exports the specified report from the specified workspace to a Power BI .pbix or .rdl file. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="downloadType"> The type of download. Valid values are LiveConnect and IncludeModel. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// - For .pbix reports -
        ///  You can set the `preferClientRouting` URL query parameter to `true` as a [workaround](/power-bi/developer/embedded/troubleshoot-rest-api#fix-timeout-exceptions-when-using-import-and-export-apis) for timeout issues.
        /// - Large files are downloaded to a temporary blob. Their URL is returned in the response and stored in the locally downloaded Power BI .pbix file.
        /// - For more information on requirements and limitations, see [Download a report from the Power BI service to Power BI Desktop](/power-bi/create-reports/service-export-to-pbix).
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// &gt; [!NOTE]
        /// &gt; Try-it feature is not supported for this API.
        ///  See [Export Power BI Report](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/Export-PowerBIReport.ps1) Powershell script for an example of how to use this API.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or both Report.Read.All and Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// * For .pbix reports, exporting a report is subject to the same limitation as [downloading a report .pbix file](/power-bi/create-reports/service-export-to-pbix#limitations-when-downloading-a-report-pbix-file).
        ///
        /// * After calling [Rebind Report](/rest/api/power-bi/reports/rebind-report), exporting a report with a [Power BI service live connection](/power-bi/connect-data/desktop-report-lifecycle-datasets) isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Stream>> ExportReportInGroupAsync(Guid groupId, Guid reportId, DownloadType? downloadType = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateExportReportInGroupRequest(groupId, reportId, downloadType);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Exports the specified report from the specified workspace to a Power BI .pbix or .rdl file. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="downloadType"> The type of download. Valid values are LiveConnect and IncludeModel. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// - For .pbix reports -
        ///  You can set the `preferClientRouting` URL query parameter to `true` as a [workaround](/power-bi/developer/embedded/troubleshoot-rest-api#fix-timeout-exceptions-when-using-import-and-export-apis) for timeout issues.
        /// - Large files are downloaded to a temporary blob. Their URL is returned in the response and stored in the locally downloaded Power BI .pbix file.
        /// - For more information on requirements and limitations, see [Download a report from the Power BI service to Power BI Desktop](/power-bi/create-reports/service-export-to-pbix).
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// &gt; [!NOTE]
        /// &gt; Try-it feature is not supported for this API.
        ///  See [Export Power BI Report](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/Export-PowerBIReport.ps1) Powershell script for an example of how to use this API.
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or both Report.Read.All and Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// * For .pbix reports, exporting a report is subject to the same limitation as [downloading a report .pbix file](/power-bi/create-reports/service-export-to-pbix#limitations-when-downloading-a-report-pbix-file).
        ///
        /// * After calling [Rebind Report](/rest/api/power-bi/reports/rebind-report), exporting a report with a [Power BI service live connection](/power-bi/connect-data/desktop-report-lifecycle-datasets) isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Stream> ExportReportInGroup(Guid groupId, Guid reportId, DownloadType? downloadType = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateExportReportInGroupRequest(groupId, reportId, downloadType);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateReportContentInGroupRequest(Guid groupId, Guid reportId, UpdateReportContentRequest requestParameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/UpdateReportContent", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestParameters);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the content of the specified report from the specified workspace with the content of a specified source report. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> UpdateReportContent parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// Specify the source report in the request body.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Report>> UpdateReportContentInGroupAsync(Guid groupId, Guid reportId, UpdateReportContentRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateUpdateReportContentInGroupRequest(groupId, reportId, requestParameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Report value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Report.DeserializeReport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the content of the specified report from the specified workspace with the content of a specified source report. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> UpdateReportContent parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// Specify the source report in the request body.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Report> UpdateReportContentInGroup(Guid groupId, Guid reportId, UpdateReportContentRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateUpdateReportContentInGroupRequest(groupId, reportId, requestParameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Report value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Report.DeserializeReport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRebindReportInGroupRequest(Guid groupId, Guid reportId, RebindReportRequest requestParameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/Rebind", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestParameters);
            request.Content = content;
            return message;
        }

        /// <summary> Rebinds the specified report from the specified workspace to the specified dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Rebind report parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// - If the specified dataset resides in a different workspace than the report or in **My workspace**, then a shared dataset will be created in the report's workspace.
        /// - On rebind, reports with a [live connection](/power-bi/desktop-report-lifecycle-datasets) will lose that connection and instead have a direct binding to the target dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must have all of the following:
        ///
        ///   - **Write** permission on the specified report.
        ///   - **Build** permission on the target dataset.
        ///
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Paginated reports are not supported.&lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> RebindReportInGroupAsync(Guid groupId, Guid reportId, RebindReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateRebindReportInGroupRequest(groupId, reportId, requestParameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Rebinds the specified report from the specified workspace to the specified dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Rebind report parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// - If the specified dataset resides in a different workspace than the report or in **My workspace**, then a shared dataset will be created in the report's workspace.
        /// - On rebind, reports with a [live connection](/power-bi/desktop-report-lifecycle-datasets) will lose that connection and instead have a direct binding to the target dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must have all of the following:
        ///
        ///   - **Write** permission on the specified report.
        ///   - **Build** permission on the target dataset.
        ///
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Paginated reports are not supported.&lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response RebindReportInGroup(Guid groupId, Guid reportId, RebindReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateRebindReportInGroupRequest(groupId, reportId, requestParameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPagesInGroupRequest(Guid groupId, Guid reportId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/pages", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of pages within the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Pages>> GetPagesInGroupAsync(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPagesInGroupRequest(groupId, reportId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Pages value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Pages.DeserializePages(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of pages within the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Pages> GetPagesInGroup(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPagesInGroupRequest(groupId, reportId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Pages value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Pages.DeserializePages(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPageInGroupRequest(Guid groupId, Guid reportId, string pageName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/pages/", false);
            uri.AppendPath(pageName, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the specified page within the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="pageName"> The page name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pageName"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Models.Page>> GetPageInGroupAsync(Guid groupId, Guid reportId, string pageName, CancellationToken cancellationToken = default)
        {
            if (pageName == null)
            {
                throw new ArgumentNullException(nameof(pageName));
            }

            using var message = CreateGetPageInGroupRequest(groupId, reportId, pageName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Models.Page value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Models.Page.DeserializePage(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the specified page within the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="pageName"> The page name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pageName"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Models.Page> GetPageInGroup(Guid groupId, Guid reportId, string pageName, CancellationToken cancellationToken = default)
        {
            if (pageName == null)
            {
                throw new ArgumentNullException(nameof(pageName));
            }

            using var message = CreateGetPageInGroupRequest(groupId, reportId, pageName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Models.Page value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Models.Page.DeserializePage(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasourcesInGroupRequest(Guid groupId, Guid reportId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/datasources", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of data sources for the specified paginated report (RDL) from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The <see cref="Guid"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Datasources>> GetDatasourcesInGroupAsync(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasourcesInGroupRequest(groupId, reportId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasources value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Datasources.DeserializeDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of data sources for the specified paginated report (RDL) from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The <see cref="Guid"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Datasources> GetDatasourcesInGroup(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasourcesInGroupRequest(groupId, reportId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasources value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Datasources.DeserializeDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateDatasourcesInGroupRequest(Guid groupId, Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/Default.UpdateDatasources", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(updateRdlDatasourcesRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the data sources of the specified paginated report (RDL) from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="updateRdlDatasourcesRequest"> The <see cref="UpdateRdlDatasourcesRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="updateRdlDatasourcesRequest"/> is null. </exception>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; Both the original data source and the new data source must have the exact same schema.
        ///
        /// ## Permissions
        ///
        /// - The user must be the data source owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Reports.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Only supports paginated reports.
        /// - Changing the data source type isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UpdateDatasourcesInGroupAsync(Guid groupId, Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest, CancellationToken cancellationToken = default)
        {
            if (updateRdlDatasourcesRequest == null)
            {
                throw new ArgumentNullException(nameof(updateRdlDatasourcesRequest));
            }

            using var message = CreateUpdateDatasourcesInGroupRequest(groupId, reportId, updateRdlDatasourcesRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the data sources of the specified paginated report (RDL) from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="updateRdlDatasourcesRequest"> The <see cref="UpdateRdlDatasourcesRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="updateRdlDatasourcesRequest"/> is null. </exception>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; Both the original data source and the new data source must have the exact same schema.
        ///
        /// ## Permissions
        ///
        /// - The user must be the data source owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Reports.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Only supports paginated reports.
        /// - Changing the data source type isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UpdateDatasourcesInGroup(Guid groupId, Guid reportId, UpdateRdlDatasourcesRequest updateRdlDatasourcesRequest, CancellationToken cancellationToken = default)
        {
            if (updateRdlDatasourcesRequest == null)
            {
                throw new ArgumentNullException(nameof(updateRdlDatasourcesRequest));
            }

            using var message = CreateUpdateDatasourcesInGroupRequest(groupId, reportId, updateRdlDatasourcesRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateExportToFileInGroupRequest(Guid groupId, Guid reportId, ExportReportRequest requestParameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/ExportTo", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestParameters);
            request.Content = content;
            return message;
        }

        /// <summary> Exports the specified report from the specified workspace to the requested [file format](/rest/api/power-bi/reports/export-to-file-in-group#fileformat). </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Export to file request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// The API is asynchronous. When the API is called, it triggers an export job. After triggering an export job, use [GetExportToFileStatus API](/rest/api/power-bi/reports/get-export-to-file-status-in-group) to track the job status.
        /// Read more about the entire flow: [Export Power BI reports](/power-bi/developer/embedded/export-to) and [Export Paginated reports](/power-bi/developer/embedded/export-paginated-report)
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// All of the following:
        ///
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Check the limitations in [Export Power BI report to file](/power-bi/developer/embedded/export-to#considerations-and-limitations) and [Export paginated report to file](/power-bi/developer/embedded/export-paginated-report#considerations-and-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Export>> ExportToFileInGroupAsync(Guid groupId, Guid reportId, ExportReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateExportToFileInGroupRequest(groupId, reportId, requestParameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Export value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Export.DeserializeExport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Exports the specified report from the specified workspace to the requested [file format](/rest/api/power-bi/reports/export-to-file-in-group#fileformat). </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Export to file request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// The API is asynchronous. When the API is called, it triggers an export job. After triggering an export job, use [GetExportToFileStatus API](/rest/api/power-bi/reports/get-export-to-file-status-in-group) to track the job status.
        /// Read more about the entire flow: [Export Power BI reports](/power-bi/developer/embedded/export-to) and [Export Paginated reports](/power-bi/developer/embedded/export-paginated-report)
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// All of the following:
        ///
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Check the limitations in [Export Power BI report to file](/power-bi/developer/embedded/export-to#considerations-and-limitations) and [Export paginated report to file](/power-bi/developer/embedded/export-paginated-report#considerations-and-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Export> ExportToFileInGroup(Guid groupId, Guid reportId, ExportReportRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateExportToFileInGroupRequest(groupId, reportId, requestParameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        Export value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Export.DeserializeExport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetExportToFileStatusInGroupRequest(Guid groupId, Guid reportId, string exportId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/exports/", false);
            uri.AppendPath(exportId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the current status of the [Export to File In Group](/rest/api/power-bi/reports/export-to-file-in-group) job for the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="exportId"> The export ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exportId"/> is null. </exception>
        /// <remarks>
        /// When the export job status is 'Succeeded' use the [GetFileOfExportToFile API](/rest/api/power-bi/reports/get-file-of-export-to-file-in-group) to retrieve the file.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Export>> GetExportToFileStatusInGroupAsync(Guid groupId, Guid reportId, string exportId, CancellationToken cancellationToken = default)
        {
            if (exportId == null)
            {
                throw new ArgumentNullException(nameof(exportId));
            }

            using var message = CreateGetExportToFileStatusInGroupRequest(groupId, reportId, exportId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    {
                        Export value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Export.DeserializeExport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the current status of the [Export to File In Group](/rest/api/power-bi/reports/export-to-file-in-group) job for the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="exportId"> The export ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="exportId"/> is null. </exception>
        /// <remarks>
        /// When the export job status is 'Succeeded' use the [GetFileOfExportToFile API](/rest/api/power-bi/reports/get-file-of-export-to-file-in-group) to retrieve the file.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Export> GetExportToFileStatusInGroup(Guid groupId, Guid reportId, string exportId, CancellationToken cancellationToken = default)
        {
            if (exportId == null)
            {
                throw new ArgumentNullException(nameof(exportId));
            }

            using var message = CreateGetExportToFileStatusInGroupRequest(groupId, reportId, exportId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    {
                        Export value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Export.DeserializeExport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGenerateTokenForCreateInGroupRequest(Guid groupId, GenerateTokenRequest requestParameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports/GenerateToken", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestParameters);
            request.Content = content;
            return message;
        }

        /// <summary> Generates an embed token to allow report creation in the specified workspace based on the specified dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="requestParameters"> Generate token parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// &gt; [!TIP]
        /// &gt; To create embed tokens, it's recommended to use the latest API, [Generate Token](/rest/api/power-bi/embed-token/generate-token). Generate token supports additional functions, such as creating a token for multiple items.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is only relevant to the [embed for your customers](/power-bi/developer/embed-sample-for-customers) scenario. To learn more about using this API, see [Considerations when generating an embed token](/power-bi/developer/embedded/generate-embed-token).
        ///
        /// ## Permissions
        ///
        /// - When using a service principal for authentication, refer to [Embed Power BI content with service principal](/power-bi/developer/embed-service-principal) and [Considerations and limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// All of the following:
        ///
        /// - Content.Create
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// For Azure Analysis Services or Analysis Services on-premises live connection reports, generating an embed token with row-level security may not work for several minutes after a [Rebind Report](/rest/api/power-bi/reports/rebind-report) api call.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<EmbedToken>> GenerateTokenForCreateInGroupAsync(Guid groupId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateGenerateTokenForCreateInGroupRequest(groupId, requestParameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EmbedToken value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = EmbedToken.DeserializeEmbedToken(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Generates an embed token to allow report creation in the specified workspace based on the specified dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="requestParameters"> Generate token parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// &gt; [!TIP]
        /// &gt; To create embed tokens, it's recommended to use the latest API, [Generate Token](/rest/api/power-bi/embed-token/generate-token). Generate token supports additional functions, such as creating a token for multiple items.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is only relevant to the [embed for your customers](/power-bi/developer/embed-sample-for-customers) scenario. To learn more about using this API, see [Considerations when generating an embed token](/power-bi/developer/embedded/generate-embed-token).
        ///
        /// ## Permissions
        ///
        /// - When using a service principal for authentication, refer to [Embed Power BI content with service principal](/power-bi/developer/embed-service-principal) and [Considerations and limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// All of the following:
        ///
        /// - Content.Create
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// For Azure Analysis Services or Analysis Services on-premises live connection reports, generating an embed token with row-level security may not work for several minutes after a [Rebind Report](/rest/api/power-bi/reports/rebind-report) api call.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<EmbedToken> GenerateTokenForCreateInGroup(Guid groupId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateGenerateTokenForCreateInGroupRequest(groupId, requestParameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EmbedToken value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = EmbedToken.DeserializeEmbedToken(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGenerateTokenInGroupRequest(Guid groupId, Guid reportId, GenerateTokenRequest requestParameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/GenerateToken", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestParameters);
            request.Content = content;
            return message;
        }

        /// <summary> Generates an embed token to view or edit the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Generate token parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// &gt; [!TIP]
        /// &gt; To create embed tokens, it's recommended to use the latest API, [Generate Token](/rest/api/power-bi/embed-token/generate-token). Generate token supports additional functions, such as creating a token for multiple items.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is only relevant to the [embed for your customers](/power-bi/developer/embed-sample-for-customers) scenario. To learn more about using this API, see [Considerations when generating an embed token](/power-bi/developer/embedded/generate-embed-token).
        ///
        /// ## Permissions
        ///
        /// - When using a service principal for authentication, refer to [Embed Power BI content with service principal](/power-bi/developer/embed-service-principal) and [Considerations and limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// All of the following, unless a requirement doesn't apply:
        ///
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        /// - Content.Create, required if the `allowSaveAs` flag is specified in [GenerateTokenRequest](/rest/api/power-bi/embed-token/reports-generate-token-for-create-in-group#generatetokenrequest)
        ///
        /// ## Limitations
        ///
        /// For Azure Analysis Services or Analysis Services on-premises live connection reports, generating an embed token with row-level security may not work for several minutes after a [Rebind Report](/rest/api/power-bi/reports/rebind-report).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<EmbedToken>> GenerateTokenInGroupAsync(Guid groupId, Guid reportId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateGenerateTokenInGroupRequest(groupId, reportId, requestParameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EmbedToken value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = EmbedToken.DeserializeEmbedToken(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Generates an embed token to view or edit the specified report from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="requestParameters"> Generate token parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// &gt; [!TIP]
        /// &gt; To create embed tokens, it's recommended to use the latest API, [Generate Token](/rest/api/power-bi/embed-token/generate-token). Generate token supports additional functions, such as creating a token for multiple items.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is only relevant to the [embed for your customers](/power-bi/developer/embed-sample-for-customers) scenario. To learn more about using this API, see [Considerations when generating an embed token](/power-bi/developer/embedded/generate-embed-token).
        ///
        /// ## Permissions
        ///
        /// - When using a service principal for authentication, refer to [Embed Power BI content with service principal](/power-bi/developer/embed-service-principal) and [Considerations and limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// All of the following, unless a requirement doesn't apply:
        ///
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        /// - Content.Create, required if the `allowSaveAs` flag is specified in [GenerateTokenRequest](/rest/api/power-bi/embed-token/reports-generate-token-for-create-in-group#generatetokenrequest)
        ///
        /// ## Limitations
        ///
        /// For Azure Analysis Services or Analysis Services on-premises live connection reports, generating an embed token with row-level security may not work for several minutes after a [Rebind Report](/rest/api/power-bi/reports/rebind-report).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<EmbedToken> GenerateTokenInGroup(Guid groupId, Guid reportId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateGenerateTokenInGroupRequest(groupId, reportId, requestParameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EmbedToken value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = EmbedToken.DeserializeEmbedToken(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateBindToGatewayInGroupRequest(Guid groupId, Guid reportId, RdlBindToGatewayRequest rdlBindToGatewayRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/Default.BindToGateway", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(rdlBindToGatewayRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Binds the specified data source of the paginated report from the specified workspace to the specified gateway, optionally with a given data source ID. If you don't supply a specific data source ID, the data source will be bound to the first matching data source in the gateway. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="rdlBindToGatewayRequest"> The bind to gateway request payload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="rdlBindToGatewayRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        ///  This API call can be called by a service principal profile.
        ///
        /// ## Required Delegated Scopes
        ///
        /// Workspace.Read.All or Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports the on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> BindToGatewayInGroupAsync(Guid groupId, Guid reportId, RdlBindToGatewayRequest rdlBindToGatewayRequest, CancellationToken cancellationToken = default)
        {
            if (rdlBindToGatewayRequest == null)
            {
                throw new ArgumentNullException(nameof(rdlBindToGatewayRequest));
            }

            using var message = CreateBindToGatewayInGroupRequest(groupId, reportId, rdlBindToGatewayRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Binds the specified data source of the paginated report from the specified workspace to the specified gateway, optionally with a given data source ID. If you don't supply a specific data source ID, the data source will be bound to the first matching data source in the gateway. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="rdlBindToGatewayRequest"> The bind to gateway request payload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="rdlBindToGatewayRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        ///  This API call can be called by a service principal profile.
        ///
        /// ## Required Delegated Scopes
        ///
        /// Workspace.Read.All or Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports the on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response BindToGatewayInGroup(Guid groupId, Guid reportId, RdlBindToGatewayRequest rdlBindToGatewayRequest, CancellationToken cancellationToken = default)
        {
            if (rdlBindToGatewayRequest == null)
            {
                throw new ArgumentNullException(nameof(rdlBindToGatewayRequest));
            }

            using var message = CreateBindToGatewayInGroupRequest(groupId, reportId, rdlBindToGatewayRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetReportsInGroupAsAdminRequest(Guid groupId, string filter, int? top, int? skip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of reports from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<AdminReports>> GetReportsInGroupAsAdminAsync(Guid groupId, string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportsInGroupAsAdminRequest(groupId, filter, top, skip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminReports value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AdminReports.DeserializeAdminReports(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of reports from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<AdminReports> GetReportsInGroupAsAdmin(Guid groupId, string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportsInGroupAsAdminRequest(groupId, filter, top, skip);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminReports value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AdminReports.DeserializeAdminReports(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetReportsAsAdminRequest(string filter, int? top, int? skip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/reports", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of reports for the organization. </summary>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 50 requests per hour or 5 requests per minute, per tenant.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<AdminReports>> GetReportsAsAdminAsync(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportsAsAdminRequest(filter, top, skip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminReports value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AdminReports.DeserializeAdminReports(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of reports for the organization. </summary>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 50 requests per hour or 5 requests per minute, per tenant.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<AdminReports> GetReportsAsAdmin(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportsAsAdminRequest(filter, top, skip);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminReports value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AdminReports.DeserializeAdminReports(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetReportUsersAsAdminRequest(Guid reportId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of users that have access to the specified report. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<ReportUsers>> GetReportUsersAsAdminAsync(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportUsersAsAdminRequest(reportId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ReportUsers value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ReportUsers.DeserializeReportUsers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of users that have access to the specified report. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<ReportUsers> GetReportUsersAsAdmin(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportUsersAsAdminRequest(reportId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ReportUsers value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ReportUsers.DeserializeReportUsers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetReportSubscriptionsAsAdminRequest(Guid reportId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/subscriptions", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of report subscriptions along with subscriber details. This is a preview API call. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Subscriptions>> GetReportSubscriptionsAsAdminAsync(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportSubscriptionsAsAdminRequest(reportId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Subscriptions value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Subscriptions.DeserializeSubscriptions(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of report subscriptions along with subscriber details. This is a preview API call. </summary>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Subscriptions> GetReportSubscriptionsAsAdmin(Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportSubscriptionsAsAdminRequest(reportId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Subscriptions value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Subscriptions.DeserializeSubscriptions(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateTakeOverInGroupRequest(Guid groupId, Guid reportId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/reports/", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath("/Default.TakeOver", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Transfers ownership of the data sources for the specified paginated report (RDL) to the current authorized user. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports paginated reports.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> TakeOverInGroupAsync(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateTakeOverInGroupRequest(groupId, reportId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Transfers ownership of the data sources for the specified paginated report (RDL) to the current authorized user. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports paginated reports.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response TakeOverInGroup(Guid groupId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateTakeOverInGroupRequest(groupId, reportId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
