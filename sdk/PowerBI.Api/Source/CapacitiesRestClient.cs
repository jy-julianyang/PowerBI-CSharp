// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    internal partial class CapacitiesRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of CapacitiesRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public CapacitiesRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://api.powerbi.com");
        }

        internal HttpMessage CreateGetCapacitiesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/capacities", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of capacities that the user has access to. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy). The profile creator must have capacity permissions.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Capacities>> GetCapacitiesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetCapacitiesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Capacities value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Capacities.DeserializeCapacities(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of capacities that the user has access to. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy). The profile creator must have capacity permissions.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Capacities> GetCapacities(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetCapacitiesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Capacities value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Capacities.DeserializeCapacities(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetWorkloadsRequest(Guid capacityId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/capacities/", false);
            uri.AppendPath(capacityId, true);
            uri.AppendPath("/Workloads", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the current state of the specified capacity workloads. If a workload is enabled, the percentage of maximum memory that the workload can consume is also returned. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Workload APIs aren't relevant for [Gen2](/power-bi/developer/embedded/power-bi-embedded-generation-2) capacities.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Workloads>> GetWorkloadsAsync(Guid capacityId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetWorkloadsRequest(capacityId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Workloads value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Workloads.DeserializeWorkloads(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the current state of the specified capacity workloads. If a workload is enabled, the percentage of maximum memory that the workload can consume is also returned. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Workload APIs aren't relevant for [Gen2](/power-bi/developer/embedded/power-bi-embedded-generation-2) capacities.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Workloads> GetWorkloads(Guid capacityId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetWorkloadsRequest(capacityId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Workloads value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Workloads.DeserializeWorkloads(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetWorkloadRequest(Guid capacityId, string workloadName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/capacities/", false);
            uri.AppendPath(capacityId, true);
            uri.AppendPath("/Workloads/", false);
            uri.AppendPath(workloadName, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the current state of a workload. If the workload is enabled, the percentage of maximum memory that the workload can consume is also returned. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="workloadName"> The name of the workload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadName"/> is null. </exception>
        /// <remarks>
        /// Workload APIs aren't relevant for [Gen2](/power-bi/developer/embedded/power-bi-embedded-generation-2) capacities.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Workload>> GetWorkloadAsync(Guid capacityId, string workloadName, CancellationToken cancellationToken = default)
        {
            if (workloadName == null)
            {
                throw new ArgumentNullException(nameof(workloadName));
            }

            using var message = CreateGetWorkloadRequest(capacityId, workloadName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Workload value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Workload.DeserializeWorkload(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the current state of a workload. If the workload is enabled, the percentage of maximum memory that the workload can consume is also returned. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="workloadName"> The name of the workload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadName"/> is null. </exception>
        /// <remarks>
        /// Workload APIs aren't relevant for [Gen2](/power-bi/developer/embedded/power-bi-embedded-generation-2) capacities.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Workload> GetWorkload(Guid capacityId, string workloadName, CancellationToken cancellationToken = default)
        {
            if (workloadName == null)
            {
                throw new ArgumentNullException(nameof(workloadName));
            }

            using var message = CreateGetWorkloadRequest(capacityId, workloadName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Workload value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Workload.DeserializeWorkload(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePatchWorkloadRequest(Guid capacityId, string workloadName, PatchWorkloadRequest workload)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/capacities/", false);
            uri.AppendPath(capacityId, true);
            uri.AppendPath("/Workloads/", false);
            uri.AppendPath(workloadName, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(workload);
            request.Content = content;
            return message;
        }

        /// <summary> Changes the state of a specific workload to *Enabled* or *Disabled*. When enabling a workload, specify the percentage of maximum memory that the workload can consume. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="workloadName"> The name of the workload. </param>
        /// <param name="workload"> Patch workload parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadName"/> or <paramref name="workload"/> is null. </exception>
        /// <remarks>
        /// Workload APIs aren't relevant for [Gen2](/power-bi/developer/embedded/power-bi-embedded-generation-2) capacities.
        ///
        /// ## Required Scope
        ///
        /// Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> PatchWorkloadAsync(Guid capacityId, string workloadName, PatchWorkloadRequest workload, CancellationToken cancellationToken = default)
        {
            if (workloadName == null)
            {
                throw new ArgumentNullException(nameof(workloadName));
            }
            if (workload == null)
            {
                throw new ArgumentNullException(nameof(workload));
            }

            using var message = CreatePatchWorkloadRequest(capacityId, workloadName, workload);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Changes the state of a specific workload to *Enabled* or *Disabled*. When enabling a workload, specify the percentage of maximum memory that the workload can consume. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="workloadName"> The name of the workload. </param>
        /// <param name="workload"> Patch workload parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="workloadName"/> or <paramref name="workload"/> is null. </exception>
        /// <remarks>
        /// Workload APIs aren't relevant for [Gen2](/power-bi/developer/embedded/power-bi-embedded-generation-2) capacities.
        ///
        /// ## Required Scope
        ///
        /// Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response PatchWorkload(Guid capacityId, string workloadName, PatchWorkloadRequest workload, CancellationToken cancellationToken = default)
        {
            if (workloadName == null)
            {
                throw new ArgumentNullException(nameof(workloadName));
            }
            if (workload == null)
            {
                throw new ArgumentNullException(nameof(workload));
            }

            using var message = CreatePatchWorkloadRequest(capacityId, workloadName, workload);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRefreshablesRequest(int top, string expand, string filter, int? skip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/capacities/refreshables", false);
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            uri.AppendQuery("$top", top, true);
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of refreshables for all capacities that the user has access to. </summary>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacity` and `group`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Refreshables>> GetRefreshablesAsync(int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetRefreshablesRequest(top, expand, filter, skip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Refreshables value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Refreshables.DeserializeRefreshables(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of refreshables for all capacities that the user has access to. </summary>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacity` and `group`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Refreshables> GetRefreshables(int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetRefreshablesRequest(top, expand, filter, skip);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Refreshables value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Refreshables.DeserializeRefreshables(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRefreshablesForCapacityRequest(Guid capacityId, int top, string expand, string filter, int? skip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/capacities/", false);
            uri.AppendPath(capacityId, true);
            uri.AppendPath("/refreshables", false);
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            uri.AppendQuery("$top", top, true);
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of refreshables for the specified capacity that the user has access to. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Refreshables>> GetRefreshablesForCapacityAsync(Guid capacityId, int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetRefreshablesForCapacityRequest(capacityId, top, expand, filter, skip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Refreshables value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Refreshables.DeserializeRefreshables(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of refreshables for the specified capacity that the user has access to. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Refreshables> GetRefreshablesForCapacity(Guid capacityId, int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetRefreshablesForCapacityRequest(capacityId, top, expand, filter, skip);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Refreshables value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Refreshables.DeserializeRefreshables(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRefreshableForCapacityRequest(Guid capacityId, string refreshableId, string expand)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/capacities/", false);
            uri.AppendPath(capacityId, true);
            uri.AppendPath("/refreshables/", false);
            uri.AppendPath(refreshableId, true);
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the specified refreshable for the specified capacity that the user has access to. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="refreshableId"> The refreshable ID. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="refreshableId"/> is null. </exception>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Refreshables>> GetRefreshableForCapacityAsync(Guid capacityId, string refreshableId, string expand = null, CancellationToken cancellationToken = default)
        {
            if (refreshableId == null)
            {
                throw new ArgumentNullException(nameof(refreshableId));
            }

            using var message = CreateGetRefreshableForCapacityRequest(capacityId, refreshableId, expand);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Refreshables value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Refreshables.DeserializeRefreshables(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the specified refreshable for the specified capacity that the user has access to. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="refreshableId"> The refreshable ID. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="refreshableId"/> is null. </exception>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Refreshables> GetRefreshableForCapacity(Guid capacityId, string refreshableId, string expand = null, CancellationToken cancellationToken = default)
        {
            if (refreshableId == null)
            {
                throw new ArgumentNullException(nameof(refreshableId));
            }

            using var message = CreateGetRefreshableForCapacityRequest(capacityId, refreshableId, expand);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Refreshables value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Refreshables.DeserializeRefreshables(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAssignWorkspacesToCapacityRequest(AssignWorkspacesToCapacityRequest requestParameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/capacities/AssignWorkspaces", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestParameters);
            request.Content = content;
            return message;
        }

        /// <summary> Assigns the specified workspaces to the specified Premium capacity. </summary>
        /// <param name="requestParameters"> Admin assign workspaces capacity parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public async Task<Response> AssignWorkspacesToCapacityAsync(AssignWorkspacesToCapacityRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateAssignWorkspacesToCapacityRequest(requestParameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Assigns the specified workspaces to the specified Premium capacity. </summary>
        /// <param name="requestParameters"> Admin assign workspaces capacity parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public Response AssignWorkspacesToCapacity(AssignWorkspacesToCapacityRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateAssignWorkspacesToCapacityRequest(requestParameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUnassignWorkspacesFromCapacityRequest(UnassignWorkspacesCapacityRequest requestParameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/capacities/UnassignWorkspaces", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestParameters);
            request.Content = content;
            return message;
        }

        /// <summary> Unassigns the specified workspaces from capacity. </summary>
        /// <param name="requestParameters"> Admin assign workspaces to shared capacity parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public async Task<Response> UnassignWorkspacesFromCapacityAsync(UnassignWorkspacesCapacityRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateUnassignWorkspacesFromCapacityRequest(requestParameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Unassigns the specified workspaces from capacity. </summary>
        /// <param name="requestParameters"> Admin assign workspaces to shared capacity parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public Response UnassignWorkspacesFromCapacity(UnassignWorkspacesCapacityRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateUnassignWorkspacesFromCapacityRequest(requestParameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetCapacityUsersAsAdminRequest(Guid capacityId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/capacities/", false);
            uri.AppendPath(capacityId, true);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of users that have access to the specified workspace. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public async Task<Response<CapacityUsers>> GetCapacityUsersAsAdminAsync(Guid capacityId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetCapacityUsersAsAdminRequest(capacityId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CapacityUsers value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CapacityUsers.DeserializeCapacityUsers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of users that have access to the specified workspace. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public Response<CapacityUsers> GetCapacityUsersAsAdmin(Guid capacityId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetCapacityUsersAsAdminRequest(capacityId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CapacityUsers value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CapacityUsers.DeserializeCapacityUsers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
