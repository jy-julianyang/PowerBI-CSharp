// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    /// <summary> The GoalValues service client. </summary>
    public partial class GoalValuesClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal GoalValuesRestClient RestClient { get; }

        /// <summary> Initializes a new instance of GoalValuesClient for mocking. </summary>
        protected GoalValuesClient()
        {
        }

        /// <summary> Initializes a new instance of GoalValuesClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public GoalValuesClient(TokenCredential credential, Uri endpoint = null, PowerBIClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("https://api.powerbi.com");

            options ??= new PowerBIClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://analysis.windows.net/powerbi/api/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new GoalValuesRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of GoalValuesClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal GoalValuesClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new GoalValuesRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Reads goal value check-ins. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `notes`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<GoalValues>> PreviewGetAsync(Guid groupId, Guid scorecardId, Guid goalId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GoalValuesClient.PreviewGet");
            scope.Start();
            try
            {
                return await RestClient.PreviewGetAsync(groupId, scorecardId, goalId, expand, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Reads goal value check-ins. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `notes`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<GoalValues> PreviewGet(Guid groupId, Guid scorecardId, Guid goalId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GoalValuesClient.PreviewGet");
            scope.Start();
            try
            {
                return RestClient.PreviewGet(groupId, scorecardId, goalId, expand, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new goal value check-in. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="goalValue"> Goal value content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<GoalValue>> PreviewPostAsync(Guid groupId, Guid scorecardId, Guid goalId, GoalValueCreateRequest goalValue, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GoalValuesClient.PreviewPost");
            scope.Start();
            try
            {
                return await RestClient.PreviewPostAsync(groupId, scorecardId, goalId, goalValue, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new goal value check-in. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="goalValue"> Goal value content. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<GoalValue> PreviewPost(Guid groupId, Guid scorecardId, Guid goalId, GoalValueCreateRequest goalValue, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GoalValuesClient.PreviewPost");
            scope.Start();
            try
            {
                return RestClient.PreviewPost(groupId, scorecardId, goalId, goalValue, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Reads a goal value check-in by a UTC date timestamp. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="timestamp"> The timestamp for the value of the goal. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `notes`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<GoalValue>> PreviewGetByIDAsync(Guid groupId, Guid scorecardId, Guid goalId, DateTimeOffset timestamp, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GoalValuesClient.PreviewGetByID");
            scope.Start();
            try
            {
                return await RestClient.PreviewGetByIDAsync(groupId, scorecardId, goalId, timestamp, expand, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Reads a goal value check-in by a UTC date timestamp. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="timestamp"> The timestamp for the value of the goal. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `notes`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<GoalValue> PreviewGetByID(Guid groupId, Guid scorecardId, Guid goalId, DateTimeOffset timestamp, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GoalValuesClient.PreviewGetByID");
            scope.Start();
            try
            {
                return RestClient.PreviewGetByID(groupId, scorecardId, goalId, timestamp, expand, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a goal value check-in by a UTC date timestamp. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="timestamp"> The timestamp for the value of the goal. </param>
        /// <param name="goalValue"> The updated content of goal value check-in. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<GoalValue>> PreviewPatchByIDAsync(Guid groupId, Guid scorecardId, Guid goalId, DateTimeOffset timestamp, GoalValue goalValue, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GoalValuesClient.PreviewPatchByID");
            scope.Start();
            try
            {
                return await RestClient.PreviewPatchByIDAsync(groupId, scorecardId, goalId, timestamp, goalValue, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a goal value check-in by a UTC date timestamp. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="timestamp"> The timestamp for the value of the goal. </param>
        /// <param name="goalValue"> The updated content of goal value check-in. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<GoalValue> PreviewPatchByID(Guid groupId, Guid scorecardId, Guid goalId, DateTimeOffset timestamp, GoalValue goalValue, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GoalValuesClient.PreviewPatchByID");
            scope.Start();
            try
            {
                return RestClient.PreviewPatchByID(groupId, scorecardId, goalId, timestamp, goalValue, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a goal value check-in by a UTC day timestamp. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="timestamp"> The timestamp for the value of the goal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> PreviewDeleteByIDAsync(Guid groupId, Guid scorecardId, Guid goalId, DateTimeOffset timestamp, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GoalValuesClient.PreviewDeleteByID");
            scope.Start();
            try
            {
                return await RestClient.PreviewDeleteByIDAsync(groupId, scorecardId, goalId, timestamp, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a goal value check-in by a UTC day timestamp. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="timestamp"> The timestamp for the value of the goal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response PreviewDeleteByID(Guid groupId, Guid scorecardId, Guid goalId, DateTimeOffset timestamp, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GoalValuesClient.PreviewDeleteByID");
            scope.Start();
            try
            {
                return RestClient.PreviewDeleteByID(groupId, scorecardId, goalId, timestamp, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
