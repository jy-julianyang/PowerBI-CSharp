// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    /// <summary> The Dataflows service client. </summary>
    public partial class DataflowsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal DataflowsRestClient RestClient { get; }

        /// <summary> Initializes a new instance of DataflowsClient for mocking. </summary>
        protected DataflowsClient()
        {
        }

        /// <summary> Initializes a new instance of DataflowsClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public DataflowsClient(TokenCredential credential, Uri endpoint = null, PowerBIClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("https://api.powerbi.com");

            options ??= new PowerBIClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://analysis.windows.net/powerbi/api/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new DataflowsRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of DataflowsClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal DataflowsClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new DataflowsRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Exports the specified dataflow definition to a JSON file. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Stream>> GetDataflowAsync(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetDataflow");
            scope.Start();
            try
            {
                return await RestClient.GetDataflowAsync(groupId, dataflowId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Exports the specified dataflow definition to a JSON file. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Stream> GetDataflow(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetDataflow");
            scope.Start();
            try
            {
                return RestClient.GetDataflow(groupId, dataflowId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a dataflow from Power BI data prep storage, including its definition file and model. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> DeleteDataflowAsync(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.DeleteDataflow");
            scope.Start();
            try
            {
                return await RestClient.DeleteDataflowAsync(groupId, dataflowId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a dataflow from Power BI data prep storage, including its definition file and model. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response DeleteDataflow(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.DeleteDataflow");
            scope.Start();
            try
            {
                return RestClient.DeleteDataflow(groupId, dataflowId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates dataflow properties, capabilities and settings. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="dataflowUpdateRequest"> Patch dataflow properties, capabilities and settings. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateDataflowAsync(Guid groupId, Guid dataflowId, DataflowUpdateRequestMessage dataflowUpdateRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.UpdateDataflow");
            scope.Start();
            try
            {
                return await RestClient.UpdateDataflowAsync(groupId, dataflowId, dataflowUpdateRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates dataflow properties, capabilities and settings. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="dataflowUpdateRequest"> Patch dataflow properties, capabilities and settings. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateDataflow(Guid groupId, Guid dataflowId, DataflowUpdateRequestMessage dataflowUpdateRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.UpdateDataflow");
            scope.Start();
            try
            {
                return RestClient.UpdateDataflow(groupId, dataflowId, dataflowUpdateRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a refresh for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="processType"> Type of refresh process to use. </param>
        /// <param name="refreshRequest"> The <see cref="RefreshRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Supported email notification options are **MailOnFailure** and **NoNotification**. **MailOnCompletion** isn't supported.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> RefreshDataflowAsync(Guid groupId, Guid dataflowId, Enum10? processType = null, RefreshRequest refreshRequest = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.RefreshDataflow");
            scope.Start();
            try
            {
                return await RestClient.RefreshDataflowAsync(groupId, dataflowId, processType, refreshRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a refresh for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="processType"> Type of refresh process to use. </param>
        /// <param name="refreshRequest"> The <see cref="RefreshRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Supported email notification options are **MailOnFailure** and **NoNotification**. **MailOnCompletion** isn't supported.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response RefreshDataflow(Guid groupId, Guid dataflowId, Enum10? processType = null, RefreshRequest refreshRequest = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.RefreshDataflow");
            scope.Start();
            try
            {
                return RestClient.RefreshDataflow(groupId, dataflowId, processType, refreshRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of data sources for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Datasources>> GetDataflowDataSourcesAsync(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetDataflowDataSources");
            scope.Start();
            try
            {
                return await RestClient.GetDataflowDataSourcesAsync(groupId, dataflowId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of data sources for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Datasources> GetDataflowDataSources(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetDataflowDataSources");
            scope.Start();
            try
            {
                return RestClient.GetDataflowDataSources(groupId, dataflowId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of all dataflows from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Dataflows>> GetDataflowsAsync(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetDataflows");
            scope.Start();
            try
            {
                return await RestClient.GetDataflowsAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of all dataflows from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Dataflows> GetDataflows(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetDataflows");
            scope.Start();
            try
            {
                return RestClient.GetDataflows(groupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of upstream dataflows for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DependentDataflows>> GetUpstreamDataflowsInGroupAsync(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetUpstreamDataflowsInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetUpstreamDataflowsInGroupAsync(groupId, dataflowId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of upstream dataflows for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DependentDataflows> GetUpstreamDataflowsInGroup(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetUpstreamDataflowsInGroup");
            scope.Start();
            try
            {
                return RestClient.GetUpstreamDataflowsInGroup(groupId, dataflowId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates the refresh schedule for a specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="refreshScheduleRequest"> The dataflow refresh schedule to create or update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateRefreshScheduleAsync(Guid groupId, Guid dataflowId, RefreshScheduleRequest refreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.UpdateRefreshSchedule");
            scope.Start();
            try
            {
                return await RestClient.UpdateRefreshScheduleAsync(groupId, dataflowId, refreshScheduleRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates the refresh schedule for a specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="refreshScheduleRequest"> The dataflow refresh schedule to create or update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateRefreshSchedule(Guid groupId, Guid dataflowId, RefreshScheduleRequest refreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.UpdateRefreshSchedule");
            scope.Start();
            try
            {
                return RestClient.UpdateRefreshSchedule(groupId, dataflowId, refreshScheduleRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of transactions for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DataflowTransactions>> GetDataflowTransactionsAsync(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetDataflowTransactions");
            scope.Start();
            try
            {
                return await RestClient.GetDataflowTransactionsAsync(groupId, dataflowId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of transactions for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DataflowTransactions> GetDataflowTransactions(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetDataflowTransactions");
            scope.Start();
            try
            {
                return RestClient.GetDataflowTransactions(groupId, dataflowId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Attempts to cancel the specified transactions. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="transactionId"> The transaction ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DataflowTransactionStatus>> CancelDataflowTransactionAsync(Guid groupId, string transactionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.CancelDataflowTransaction");
            scope.Start();
            try
            {
                return await RestClient.CancelDataflowTransactionAsync(groupId, transactionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Attempts to cancel the specified transactions. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="transactionId"> The transaction ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DataflowTransactionStatus> CancelDataflowTransaction(Guid groupId, string transactionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.CancelDataflowTransaction");
            scope.Start();
            try
            {
                return RestClient.CancelDataflowTransaction(groupId, transactionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of upstream dataflows for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DependentDataflows>> GetUpstreamDataflowsInGroupAsAdminAsync(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetUpstreamDataflowsInGroupAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetUpstreamDataflowsInGroupAsAdminAsync(groupId, dataflowId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of upstream dataflows for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DependentDataflows> GetUpstreamDataflowsInGroupAsAdmin(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetUpstreamDataflowsInGroupAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetUpstreamDataflowsInGroupAsAdmin(groupId, dataflowId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of dataflows from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Dataflows>> GetDataflowsInGroupAsAdminAsync(Guid groupId, string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetDataflowsInGroupAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetDataflowsInGroupAsAdminAsync(groupId, filter, top, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of dataflows from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Dataflows> GetDataflowsInGroupAsAdmin(Guid groupId, string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetDataflowsInGroupAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetDataflowsInGroupAsAdmin(groupId, filter, top, skip, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of dataflows for the organization. </summary>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual async Task<Response<AdminDataflows>> GetDataflowsAsAdminAsync(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetDataflowsAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetDataflowsAsAdminAsync(filter, top, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of dataflows for the organization. </summary>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual Response<AdminDataflows> GetDataflowsAsAdmin(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetDataflowsAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetDataflowsAsAdmin(filter, top, skip, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Exports the definition for the specified dataflow to a JSON file. </summary>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual async Task<Response<Stream>> ExportDataflowAsAdminAsync(Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.ExportDataflowAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.ExportDataflowAsAdminAsync(dataflowId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Exports the definition for the specified dataflow to a JSON file. </summary>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual Response<Stream> ExportDataflowAsAdmin(Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.ExportDataflowAsAdmin");
            scope.Start();
            try
            {
                return RestClient.ExportDataflowAsAdmin(dataflowId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of data sources for the specified dataflow. </summary>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Deleted data sources will still appear in the response. This may include both cloud and on-premise data gateway sources. For more information see [Dataflows considerations and limitations](/power-bi/transform-model/dataflows/dataflows-features-limitations).
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Datasources>> GetDataflowDatasourcesAsAdminAsync(Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetDataflowDatasourcesAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetDataflowDatasourcesAsAdminAsync(dataflowId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of data sources for the specified dataflow. </summary>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Deleted data sources will still appear in the response. This may include both cloud and on-premise data gateway sources. For more information see [Dataflows considerations and limitations](/power-bi/transform-model/dataflows/dataflows-features-limitations).
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Datasources> GetDataflowDatasourcesAsAdmin(Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetDataflowDatasourcesAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetDataflowDatasourcesAsAdmin(dataflowId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified dataflow. </summary>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DataflowUsers>> GetDataflowUsersAsAdminAsync(Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetDataflowUsersAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetDataflowUsersAsAdminAsync(dataflowId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified dataflow. </summary>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DataflowUsers> GetDataflowUsersAsAdmin(Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DataflowsClient.GetDataflowUsersAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetDataflowUsersAsAdmin(dataflowId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
