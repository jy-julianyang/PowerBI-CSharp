// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    /// <summary> The Dashboards service client. </summary>
    public partial class DashboardsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal DashboardsRestClient RestClient { get; }

        /// <summary> Initializes a new instance of DashboardsClient for mocking. </summary>
        protected DashboardsClient()
        {
        }

        /// <summary> Initializes a new instance of DashboardsClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public DashboardsClient(TokenCredential credential, Uri endpoint = null, PowerBIClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("https://api.powerbi.com");

            options ??= new PowerBIClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://analysis.windows.net/powerbi/api/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new DashboardsRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of DashboardsClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal DashboardsClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new DashboardsRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Returns a list of dashboards from **My workspace**. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This API also returns shared dashboards and dashboards from shared apps. Dashboards that reside in shared workspaces can be accessed using the [Get Dashboards In Group API](/rest/api/power-bi/dashboards/get-dashboards-in-group).
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Dashboards>> GetDashboardsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetDashboards");
            scope.Start();
            try
            {
                return await RestClient.GetDashboardsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of dashboards from **My workspace**. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This API also returns shared dashboards and dashboards from shared apps. Dashboards that reside in shared workspaces can be accessed using the [Get Dashboards In Group API](/rest/api/power-bi/dashboards/get-dashboards-in-group).
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Dashboards> GetDashboards(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetDashboards");
            scope.Start();
            try
            {
                return RestClient.GetDashboards(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new empty dashboard in **My workspace**. </summary>
        /// <param name="requestParameters"> Add dashboard parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Content.Create
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Dashboard>> AddDashboardAsync(AddDashboardRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.AddDashboard");
            scope.Start();
            try
            {
                return await RestClient.AddDashboardAsync(requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new empty dashboard in **My workspace**. </summary>
        /// <param name="requestParameters"> Add dashboard parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Content.Create
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Dashboard> AddDashboard(AddDashboardRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.AddDashboard");
            scope.Start();
            try
            {
                return RestClient.AddDashboard(requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified dashboard from **My workspace**. </summary>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Dashboard>> GetDashboardAsync(Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetDashboard");
            scope.Start();
            try
            {
                return await RestClient.GetDashboardAsync(dashboardId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified dashboard from **My workspace**. </summary>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Dashboard> GetDashboard(Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetDashboard");
            scope.Start();
            try
            {
                return RestClient.GetDashboard(dashboardId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified dashboard from **My workspace**. </summary>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> DeleteDashboardAsync(Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.DeleteDashboard");
            scope.Start();
            try
            {
                return await RestClient.DeleteDashboardAsync(dashboardId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified dashboard from **My workspace**. </summary>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response DeleteDashboard(Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.DeleteDashboard");
            scope.Start();
            try
            {
                return RestClient.DeleteDashboard(dashboardId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of tiles within the specified dashboard from **My workspace**. </summary>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Supported tiles include datasets and live tiles that contain an entire report page.
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Titles that are edited in the report before the visual is added to the dashboard, are not returned. To return these titles, edit them in the dashboard.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Tiles>> GetTilesAsync(Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetTiles");
            scope.Start();
            try
            {
                return await RestClient.GetTilesAsync(dashboardId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of tiles within the specified dashboard from **My workspace**. </summary>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Supported tiles include datasets and live tiles that contain an entire report page.
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Titles that are edited in the report before the visual is added to the dashboard, are not returned. To return these titles, edit them in the dashboard.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Tiles> GetTiles(Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetTiles");
            scope.Start();
            try
            {
                return RestClient.GetTiles(dashboardId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified tile within the specified dashboard from **My workspace**. </summary>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="tileId"> The tile ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Supported tiles include datasets and live tiles that contain an entire report page.
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Titles that are edited in the report before the visual is added to the dashboard, are not returned. To return these titles, edit them in the dashboard.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Tile>> GetTileAsync(Guid dashboardId, Guid tileId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetTile");
            scope.Start();
            try
            {
                return await RestClient.GetTileAsync(dashboardId, tileId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified tile within the specified dashboard from **My workspace**. </summary>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="tileId"> The tile ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Supported tiles include datasets and live tiles that contain an entire report page.
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Titles that are edited in the report before the visual is added to the dashboard, are not returned. To return these titles, edit them in the dashboard.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Tile> GetTile(Guid dashboardId, Guid tileId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetTile");
            scope.Start();
            try
            {
                return RestClient.GetTile(dashboardId, tileId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Clones the specified tile from **My workspace**. </summary>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="tileId"> The tile ID. </param>
        /// <param name="requestParameters"> Clone tile parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When a tile is cloned to another workspace and bound to another report and dataset, it's cloned as is with its underlying query containing the original report filters.
        ///
        /// If the target report ID and target dataset are missing, the following can occur:
        /// - If you're cloning a tile within the same workspace, the report and dataset links will be cloned from the source tile.
        /// - If you're cloning a tile within a different workspace, report and dataset links will be removed, and the tile will be broken.
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Tile>> CloneTileAsync(Guid dashboardId, Guid tileId, CloneTileRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.CloneTile");
            scope.Start();
            try
            {
                return await RestClient.CloneTileAsync(dashboardId, tileId, requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Clones the specified tile from **My workspace**. </summary>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="tileId"> The tile ID. </param>
        /// <param name="requestParameters"> Clone tile parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When a tile is cloned to another workspace and bound to another report and dataset, it's cloned as is with its underlying query containing the original report filters.
        ///
        /// If the target report ID and target dataset are missing, the following can occur:
        /// - If you're cloning a tile within the same workspace, the report and dataset links will be cloned from the source tile.
        /// - If you're cloning a tile within a different workspace, report and dataset links will be removed, and the tile will be broken.
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Tile> CloneTile(Guid dashboardId, Guid tileId, CloneTileRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.CloneTile");
            scope.Start();
            try
            {
                return RestClient.CloneTile(dashboardId, tileId, requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of dashboards from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Dashboards>> GetDashboardsInGroupAsync(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetDashboardsInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetDashboardsInGroupAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of dashboards from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Dashboards> GetDashboardsInGroup(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetDashboardsInGroup");
            scope.Start();
            try
            {
                return RestClient.GetDashboardsInGroup(groupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new empty dashboard in the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="requestParameters"> Add dashboard parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Content.Create
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Dashboard>> AddDashboardInGroupAsync(Guid groupId, AddDashboardRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.AddDashboardInGroup");
            scope.Start();
            try
            {
                return await RestClient.AddDashboardInGroupAsync(groupId, requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new empty dashboard in the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="requestParameters"> Add dashboard parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Content.Create
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Dashboard> AddDashboardInGroup(Guid groupId, AddDashboardRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.AddDashboardInGroup");
            scope.Start();
            try
            {
                return RestClient.AddDashboardInGroup(groupId, requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified dashboard from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Dashboard>> GetDashboardInGroupAsync(Guid groupId, Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetDashboardInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetDashboardInGroupAsync(groupId, dashboardId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified dashboard from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Dashboard> GetDashboardInGroup(Guid groupId, Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetDashboardInGroup");
            scope.Start();
            try
            {
                return RestClient.GetDashboardInGroup(groupId, dashboardId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified dashboard from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> DeleteDashboardInGroupAsync(Guid groupId, Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.DeleteDashboardInGroup");
            scope.Start();
            try
            {
                return await RestClient.DeleteDashboardInGroupAsync(groupId, dashboardId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified dashboard from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response DeleteDashboardInGroup(Guid groupId, Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.DeleteDashboardInGroup");
            scope.Start();
            try
            {
                return RestClient.DeleteDashboardInGroup(groupId, dashboardId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of tiles within the specified dashboard from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Supported tiles include datasets and live tiles that contain an entire report page.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Titles that are edited in the report before the visual is added to the dashboard, are not returned. To return these titles, edit them in the dashboard.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Tiles>> GetTilesInGroupAsync(Guid groupId, Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetTilesInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetTilesInGroupAsync(groupId, dashboardId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of tiles within the specified dashboard from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Supported tiles include datasets and live tiles that contain an entire report page.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Titles that are edited in the report before the visual is added to the dashboard, are not returned. To return these titles, edit them in the dashboard.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Tiles> GetTilesInGroup(Guid groupId, Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetTilesInGroup");
            scope.Start();
            try
            {
                return RestClient.GetTilesInGroup(groupId, dashboardId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified tile within the specified dashboard from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="tileId"> The tile ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Supported tiles include datasets and live tiles that contain an entire report page.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Titles that are edited in the report before the visual is added to the dashboard, are not returned. To return these titles, edit them in the dashboard.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Tile>> GetTileInGroupAsync(Guid groupId, Guid dashboardId, Guid tileId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetTileInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetTileInGroupAsync(groupId, dashboardId, tileId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified tile within the specified dashboard from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="tileId"> The tile ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Supported tiles include datasets and live tiles that contain an entire report page.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Titles that are edited in the report before the visual is added to the dashboard, are not returned. To return these titles, edit them in the dashboard.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Tile> GetTileInGroup(Guid groupId, Guid dashboardId, Guid tileId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetTileInGroup");
            scope.Start();
            try
            {
                return RestClient.GetTileInGroup(groupId, dashboardId, tileId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Clones the specified tile from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="tileId"> The tile ID. </param>
        /// <param name="requestParameters"> Clone tile parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When a tile is cloned to another workspace and bound to another report and dataset, it's cloned as is with its underlying query containing the original report filters.
        ///
        /// If the target report ID and target dataset are missing, the following can occur:
        /// - If you're cloning a tile within the same workspace, the report and dataset links will be cloned from the source tile.
        /// - If you're cloning a tile within a different workspace, report and dataset links will be removed, and the tile will be broken.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Tile>> CloneTileInGroupAsync(Guid groupId, Guid dashboardId, Guid tileId, CloneTileRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.CloneTileInGroup");
            scope.Start();
            try
            {
                return await RestClient.CloneTileInGroupAsync(groupId, dashboardId, tileId, requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Clones the specified tile from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="tileId"> The tile ID. </param>
        /// <param name="requestParameters"> Clone tile parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When a tile is cloned to another workspace and bound to another report and dataset, it's cloned as is with its underlying query containing the original report filters.
        ///
        /// If the target report ID and target dataset are missing, the following can occur:
        /// - If you're cloning a tile within the same workspace, the report and dataset links will be cloned from the source tile.
        /// - If you're cloning a tile within a different workspace, report and dataset links will be removed, and the tile will be broken.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Tile> CloneTileInGroup(Guid groupId, Guid dashboardId, Guid tileId, CloneTileRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.CloneTileInGroup");
            scope.Start();
            try
            {
                return RestClient.CloneTileInGroup(groupId, dashboardId, tileId, requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generates an embed token to view the specified dashboard from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="requestParameters"> Generate token parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is only relevant to the [embed for your customers](/power-bi/developer/embed-sample-for-customers) scenario. To learn more about using this API, see [Considerations when generating an embed token](/power-bi/developer/embedded/generate-embed-token).
        ///
        /// ## Permissions
        ///
        /// - When using a service principal for authentication, refer to [Embed Power BI content with service principal](/power-bi/developer/embed-service-principal) and [Considerations and limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// All of the following:
        ///
        /// - Dashboard.ReadWrite.All or Dashboard.Read.All
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<EmbedToken>> GenerateTokenInGroupAsync(Guid groupId, Guid dashboardId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GenerateTokenInGroup");
            scope.Start();
            try
            {
                return await RestClient.GenerateTokenInGroupAsync(groupId, dashboardId, requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generates an embed token to view the specified dashboard from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="requestParameters"> Generate token parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is only relevant to the [embed for your customers](/power-bi/developer/embed-sample-for-customers) scenario. To learn more about using this API, see [Considerations when generating an embed token](/power-bi/developer/embedded/generate-embed-token).
        ///
        /// ## Permissions
        ///
        /// - When using a service principal for authentication, refer to [Embed Power BI content with service principal](/power-bi/developer/embed-service-principal) and [Considerations and limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// All of the following:
        ///
        /// - Dashboard.ReadWrite.All or Dashboard.Read.All
        /// - Report.ReadWrite.All or Report.Read.All
        /// - Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<EmbedToken> GenerateTokenInGroup(Guid groupId, Guid dashboardId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GenerateTokenInGroup");
            scope.Start();
            try
            {
                return RestClient.GenerateTokenInGroup(groupId, dashboardId, requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of dashboards from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<AdminDashboards>> GetDashboardsInGroupAsAdminAsync(Guid groupId, string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetDashboardsInGroupAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetDashboardsInGroupAsAdminAsync(groupId, filter, top, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of dashboards from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<AdminDashboards> GetDashboardsInGroupAsAdmin(Guid groupId, string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetDashboardsInGroupAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetDashboardsInGroupAsAdmin(groupId, filter, top, skip, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of dashboards for the organization. </summary>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `tiles`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 50 requests per hour or 5 requests per minute, per tenant.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<AdminDashboards>> GetDashboardsAsAdminAsync(string expand = null, string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetDashboardsAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetDashboardsAsAdminAsync(expand, filter, top, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of dashboards for the organization. </summary>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `tiles`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 50 requests per hour or 5 requests per minute, per tenant.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<AdminDashboards> GetDashboardsAsAdmin(string expand = null, string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetDashboardsAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetDashboardsAsAdmin(expand, filter, top, skip, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of tiles within the specified dashboard. </summary>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<AdminTiles>> GetTilesAsAdminAsync(Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetTilesAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetTilesAsAdminAsync(dashboardId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of tiles within the specified dashboard. </summary>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<AdminTiles> GetTilesAsAdmin(Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetTilesAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetTilesAsAdmin(dashboardId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified dashboard. </summary>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DashboardUsers>> GetDashboardUsersAsAdminAsync(Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetDashboardUsersAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetDashboardUsersAsAdminAsync(dashboardId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified dashboard. </summary>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DashboardUsers> GetDashboardUsersAsAdmin(Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetDashboardUsersAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetDashboardUsersAsAdmin(dashboardId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of dashboard subscriptions along with subscriber details. This is a preview API call. </summary>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Subscriptions>> GetDashboardSubscriptionsAsAdminAsync(Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetDashboardSubscriptionsAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetDashboardSubscriptionsAsAdminAsync(dashboardId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of dashboard subscriptions along with subscriber details. This is a preview API call. </summary>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Subscriptions> GetDashboardSubscriptionsAsAdmin(Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DashboardsClient.GetDashboardSubscriptionsAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetDashboardSubscriptionsAsAdmin(dashboardId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
