// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    internal partial class DataflowsRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of DataflowsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public DataflowsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://api.powerbi.com");
        }

        internal HttpMessage CreateGetDataflowRequest(Guid groupId, Guid dataflowId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/dataflows/", false);
            uri.AppendPath(dataflowId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Exports the specified dataflow definition to a JSON file. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Stream>> GetDataflowAsync(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataflowRequest(groupId, dataflowId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Exports the specified dataflow definition to a JSON file. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Stream> GetDataflow(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataflowRequest(groupId, dataflowId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteDataflowRequest(Guid groupId, Guid dataflowId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/dataflows/", false);
            uri.AppendPath(dataflowId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Deletes a dataflow from Power BI data prep storage, including its definition file and model. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> DeleteDataflowAsync(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteDataflowRequest(groupId, dataflowId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deletes a dataflow from Power BI data prep storage, including its definition file and model. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response DeleteDataflow(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteDataflowRequest(groupId, dataflowId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateDataflowRequest(Guid groupId, Guid dataflowId, DataflowUpdateRequestMessage dataflowUpdateRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/dataflows/", false);
            uri.AppendPath(dataflowId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(dataflowUpdateRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Updates dataflow properties, capabilities and settings. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="dataflowUpdateRequest"> Patch dataflow properties, capabilities and settings. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataflowUpdateRequest"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UpdateDataflowAsync(Guid groupId, Guid dataflowId, DataflowUpdateRequestMessage dataflowUpdateRequest, CancellationToken cancellationToken = default)
        {
            if (dataflowUpdateRequest == null)
            {
                throw new ArgumentNullException(nameof(dataflowUpdateRequest));
            }

            using var message = CreateUpdateDataflowRequest(groupId, dataflowId, dataflowUpdateRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates dataflow properties, capabilities and settings. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="dataflowUpdateRequest"> Patch dataflow properties, capabilities and settings. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataflowUpdateRequest"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UpdateDataflow(Guid groupId, Guid dataflowId, DataflowUpdateRequestMessage dataflowUpdateRequest, CancellationToken cancellationToken = default)
        {
            if (dataflowUpdateRequest == null)
            {
                throw new ArgumentNullException(nameof(dataflowUpdateRequest));
            }

            using var message = CreateUpdateDataflowRequest(groupId, dataflowId, dataflowUpdateRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRefreshDataflowRequest(Guid groupId, Guid dataflowId, Enum10? processType, RefreshRequest refreshRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/dataflows/", false);
            uri.AppendPath(dataflowId, true);
            uri.AppendPath("/refreshes", false);
            if (processType != null)
            {
                uri.AppendQuery("processType", processType.Value.ToString(), true);
            }
            request.Uri = uri;
            if (refreshRequest != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(refreshRequest);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Triggers a refresh for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="processType"> Type of refresh process to use. </param>
        /// <param name="refreshRequest"> The <see cref="RefreshRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Supported email notification options are **MailOnFailure** and **NoNotification**. **MailOnCompletion** isn't supported.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> RefreshDataflowAsync(Guid groupId, Guid dataflowId, Enum10? processType = null, RefreshRequest refreshRequest = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateRefreshDataflowRequest(groupId, dataflowId, processType, refreshRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Triggers a refresh for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="processType"> Type of refresh process to use. </param>
        /// <param name="refreshRequest"> The <see cref="RefreshRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Supported email notification options are **MailOnFailure** and **NoNotification**. **MailOnCompletion** isn't supported.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response RefreshDataflow(Guid groupId, Guid dataflowId, Enum10? processType = null, RefreshRequest refreshRequest = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateRefreshDataflowRequest(groupId, dataflowId, processType, refreshRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDataflowDataSourcesRequest(Guid groupId, Guid dataflowId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/dataflows/", false);
            uri.AppendPath(dataflowId, true);
            uri.AppendPath("/datasources", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of data sources for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Datasources>> GetDataflowDataSourcesAsync(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataflowDataSourcesRequest(groupId, dataflowId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasources value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Datasources.DeserializeDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of data sources for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Datasources> GetDataflowDataSources(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataflowDataSourcesRequest(groupId, dataflowId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasources value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Datasources.DeserializeDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDataflowsRequest(Guid groupId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/dataflows", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of all dataflows from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Dataflows>> GetDataflowsAsync(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataflowsRequest(groupId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Dataflows value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Dataflows.DeserializeDataflows(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of all dataflows from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Dataflows> GetDataflows(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataflowsRequest(groupId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Dataflows value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Dataflows.DeserializeDataflows(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetUpstreamDataflowsInGroupRequest(Guid groupId, Guid dataflowId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/dataflows/", false);
            uri.AppendPath(dataflowId, true);
            uri.AppendPath("/upstreamDataflows", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of upstream dataflows for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DependentDataflows>> GetUpstreamDataflowsInGroupAsync(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetUpstreamDataflowsInGroupRequest(groupId, dataflowId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DependentDataflows value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DependentDataflows.DeserializeDependentDataflows(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of upstream dataflows for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DependentDataflows> GetUpstreamDataflowsInGroup(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetUpstreamDataflowsInGroupRequest(groupId, dataflowId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DependentDataflows value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DependentDataflows.DeserializeDependentDataflows(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRefreshScheduleRequest(Guid groupId, Guid dataflowId, RefreshScheduleRequest refreshScheduleRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/dataflows/", false);
            uri.AppendPath(dataflowId, true);
            uri.AppendPath("/refreshSchedule", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(refreshScheduleRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Creates or updates the refresh schedule for a specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="refreshScheduleRequest"> The dataflow refresh schedule to create or update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="refreshScheduleRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UpdateRefreshScheduleAsync(Guid groupId, Guid dataflowId, RefreshScheduleRequest refreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            if (refreshScheduleRequest == null)
            {
                throw new ArgumentNullException(nameof(refreshScheduleRequest));
            }

            using var message = CreateUpdateRefreshScheduleRequest(groupId, dataflowId, refreshScheduleRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Creates or updates the refresh schedule for a specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="refreshScheduleRequest"> The dataflow refresh schedule to create or update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="refreshScheduleRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UpdateRefreshSchedule(Guid groupId, Guid dataflowId, RefreshScheduleRequest refreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            if (refreshScheduleRequest == null)
            {
                throw new ArgumentNullException(nameof(refreshScheduleRequest));
            }

            using var message = CreateUpdateRefreshScheduleRequest(groupId, dataflowId, refreshScheduleRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDataflowTransactionsRequest(Guid groupId, Guid dataflowId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/dataflows/", false);
            uri.AppendPath(dataflowId, true);
            uri.AppendPath("/transactions", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of transactions for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DataflowTransactions>> GetDataflowTransactionsAsync(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataflowTransactionsRequest(groupId, dataflowId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataflowTransactions value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DataflowTransactions.DeserializeDataflowTransactions(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of transactions for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All or Dataflow.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DataflowTransactions> GetDataflowTransactions(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataflowTransactionsRequest(groupId, dataflowId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataflowTransactions value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DataflowTransactions.DeserializeDataflowTransactions(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCancelDataflowTransactionRequest(Guid groupId, string transactionId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/dataflows/transactions/", false);
            uri.AppendPath(transactionId, true);
            uri.AppendPath("/cancel", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Attempts to cancel the specified transactions. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="transactionId"> The transaction ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="transactionId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DataflowTransactionStatus>> CancelDataflowTransactionAsync(Guid groupId, string transactionId, CancellationToken cancellationToken = default)
        {
            if (transactionId == null)
            {
                throw new ArgumentNullException(nameof(transactionId));
            }

            using var message = CreateCancelDataflowTransactionRequest(groupId, transactionId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataflowTransactionStatus value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DataflowTransactionStatus.DeserializeDataflowTransactionStatus(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Attempts to cancel the specified transactions. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="transactionId"> The transaction ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="transactionId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataflow.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DataflowTransactionStatus> CancelDataflowTransaction(Guid groupId, string transactionId, CancellationToken cancellationToken = default)
        {
            if (transactionId == null)
            {
                throw new ArgumentNullException(nameof(transactionId));
            }

            using var message = CreateCancelDataflowTransactionRequest(groupId, transactionId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataflowTransactionStatus value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DataflowTransactionStatus.DeserializeDataflowTransactionStatus(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetUpstreamDataflowsInGroupAsAdminRequest(Guid groupId, Guid dataflowId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/dataflows/", false);
            uri.AppendPath(dataflowId, true);
            uri.AppendPath("/upstreamDataflows", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of upstream dataflows for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DependentDataflows>> GetUpstreamDataflowsInGroupAsAdminAsync(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetUpstreamDataflowsInGroupAsAdminRequest(groupId, dataflowId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DependentDataflows value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DependentDataflows.DeserializeDependentDataflows(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of upstream dataflows for the specified dataflow. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DependentDataflows> GetUpstreamDataflowsInGroupAsAdmin(Guid groupId, Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetUpstreamDataflowsInGroupAsAdminRequest(groupId, dataflowId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DependentDataflows value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DependentDataflows.DeserializeDependentDataflows(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDataflowsInGroupAsAdminRequest(Guid groupId, string filter, int? top, int? skip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/dataflows", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of dataflows from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Dataflows>> GetDataflowsInGroupAsAdminAsync(Guid groupId, string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataflowsInGroupAsAdminRequest(groupId, filter, top, skip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Dataflows value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Dataflows.DeserializeDataflows(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of dataflows from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Dataflows> GetDataflowsInGroupAsAdmin(Guid groupId, string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataflowsInGroupAsAdminRequest(groupId, filter, top, skip);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Dataflows value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Dataflows.DeserializeDataflows(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDataflowsAsAdminRequest(string filter, int? top, int? skip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/dataflows", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of dataflows for the organization. </summary>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public async Task<Response<AdminDataflows>> GetDataflowsAsAdminAsync(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataflowsAsAdminRequest(filter, top, skip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminDataflows value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AdminDataflows.DeserializeAdminDataflows(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of dataflows for the organization. </summary>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public Response<AdminDataflows> GetDataflowsAsAdmin(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataflowsAsAdminRequest(filter, top, skip);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminDataflows value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AdminDataflows.DeserializeAdminDataflows(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateExportDataflowAsAdminRequest(Guid dataflowId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/dataflows/", false);
            uri.AppendPath(dataflowId, true);
            uri.AppendPath("/export", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Exports the definition for the specified dataflow to a JSON file. </summary>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public async Task<Response<Stream>> ExportDataflowAsAdminAsync(Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateExportDataflowAsAdminRequest(dataflowId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Exports the definition for the specified dataflow to a JSON file. </summary>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public Response<Stream> ExportDataflowAsAdmin(Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateExportDataflowAsAdminRequest(dataflowId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDataflowDatasourcesAsAdminRequest(Guid dataflowId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/dataflows/", false);
            uri.AppendPath(dataflowId, true);
            uri.AppendPath("/datasources", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of data sources for the specified dataflow. </summary>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Deleted data sources will still appear in the response. This may include both cloud and on-premise data gateway sources. For more information see [Dataflows considerations and limitations](/power-bi/transform-model/dataflows/dataflows-features-limitations).
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Datasources>> GetDataflowDatasourcesAsAdminAsync(Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataflowDatasourcesAsAdminRequest(dataflowId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasources value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Datasources.DeserializeDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of data sources for the specified dataflow. </summary>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Deleted data sources will still appear in the response. This may include both cloud and on-premise data gateway sources. For more information see [Dataflows considerations and limitations](/power-bi/transform-model/dataflows/dataflows-features-limitations).
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Datasources> GetDataflowDatasourcesAsAdmin(Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataflowDatasourcesAsAdminRequest(dataflowId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasources value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Datasources.DeserializeDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDataflowUsersAsAdminRequest(Guid dataflowId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/dataflows/", false);
            uri.AppendPath(dataflowId, true);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of users that have access to the specified dataflow. </summary>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DataflowUsers>> GetDataflowUsersAsAdminAsync(Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataflowUsersAsAdminRequest(dataflowId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataflowUsers value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DataflowUsers.DeserializeDataflowUsers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of users that have access to the specified dataflow. </summary>
        /// <param name="dataflowId"> The dataflow ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DataflowUsers> GetDataflowUsersAsAdmin(Guid dataflowId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDataflowUsersAsAdminRequest(dataflowId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DataflowUsers value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DataflowUsers.DeserializeDataflowUsers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
