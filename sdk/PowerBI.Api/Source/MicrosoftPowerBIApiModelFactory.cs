// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Microsoft.PowerBI.Api.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class MicrosoftPowerBIApiModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.Datasets"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The datasets. </param>
        /// <returns> A new <see cref="Models.Datasets"/> instance for mocking. </returns>
        public static Datasets Datasets(string odataContext = null, IEnumerable<Dataset> value = null)
        {
            value ??= new List<Dataset>();

            return new Datasets(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Dataset"/>. </summary>
        /// <param name="id"> The dataset ID. </param>
        /// <param name="name"> The dataset name. </param>
        /// <param name="configuredBy"> The dataset owner. </param>
        /// <param name="createdDate"> The dataset creation date and time. </param>
        /// <param name="contentProviderType"> A deprecated property that should be ignored. </param>
        /// <param name="description"> The dataset description. </param>
        /// <param name="upstreamDataflows"> The list of all the dataflows this item depends on. </param>
        /// <param name="queryScaleOutSettings"> Query scale-out settings of a dataset. </param>
        /// <param name="createReportEmbedURL"> The dataset create report embed URL. </param>
        /// <param name="qnaEmbedURL"> The dataset Q&amp;A embed URL. </param>
        /// <param name="webUrl"> The web URL of the dataset. </param>
        /// <param name="isEffectiveIdentityRequired"> Whether the dataset requires an effective identity, which you must send in a [GenerateToken](/rest/api/power-bi/embed-token/generate-token) API call. </param>
        /// <param name="isEffectiveIdentityRolesRequired"> Whether row-level security is defined inside the Power BI .pbix file. If so, you must specify a role. </param>
        /// <param name="isOnPremGatewayRequired"> Whether the dataset requires an on-premises data gateway. </param>
        /// <param name="encryption"> Dataset encryption information. Only applicable when `$expand` is specified. </param>
        /// <param name="users"> (Empty value) The dataset user access details. This property will be removed from the payload response in an upcoming release. You can retrieve user information on a Power BI item (such as a report or a dashboard) by using the [Get Dataset Users as Admin](/rest/api/power-bi/admin/datasets-get-dataset-users-as-admin) API, or the [PostWorkspaceInfo](/rest/api/power-bi/admin/workspace-info-post-workspace-info) API with the `getArtifactUsers` parameter. </param>
        /// <param name="addRowsAPIEnabled"> Whether the dataset allows adding new rows. </param>
        /// <param name="isRefreshable"> This field returns `true` when the dataset is either recently refreshed or is configured for automatic refresh, with the connection mode specifically set to 'Import'. The value will return `false` for other connection modes, such as 'DirectQuery' and 'LiveConnection', regardless of whether the dataset is manually refreshed or is set up for automatic refresh. </param>
        /// <param name="isInPlaceSharingEnabled"> Whether the dataset can be shared with external users to be consumed in their own tenant. </param>
        /// <param name="targetStorageMode"> The dataset storage mode. </param>
        /// <returns> A new <see cref="Models.Dataset"/> instance for mocking. </returns>
        public static Dataset Dataset(string id = null, string name = null, string configuredBy = null, DateTimeOffset? createdDate = null, string contentProviderType = null, string description = null, IEnumerable<DependentDataflow> upstreamDataflows = null, DatasetQueryScaleOutSettings queryScaleOutSettings = null, string createReportEmbedURL = null, string qnaEmbedURL = null, string webUrl = null, bool? isEffectiveIdentityRequired = null, bool? isEffectiveIdentityRolesRequired = null, bool? isOnPremGatewayRequired = null, Encryption encryption = null, IEnumerable<DatasetUser> users = null, bool? addRowsAPIEnabled = null, bool? isRefreshable = null, bool? isInPlaceSharingEnabled = null, string targetStorageMode = null)
        {
            upstreamDataflows ??= new List<DependentDataflow>();
            users ??= new List<DatasetUser>();

            return new Dataset(
                id,
                name,
                configuredBy,
                createdDate,
                contentProviderType,
                description,
                upstreamDataflows?.ToList(),
                queryScaleOutSettings,
                createReportEmbedURL,
                qnaEmbedURL,
                webUrl,
                isEffectiveIdentityRequired,
                isEffectiveIdentityRolesRequired,
                isOnPremGatewayRequired,
                encryption,
                users?.ToList(),
                addRowsAPIEnabled,
                isRefreshable,
                isInPlaceSharingEnabled,
                targetStorageMode);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatasetExecuteQueriesResponse"/>. </summary>
        /// <param name="informationProtectionLabel"> The details of the information protection label, if any, associated with the dataset. </param>
        /// <param name="results"> The list of results, one per input query. </param>
        /// <param name="error"> The details of an error, if present. </param>
        /// <returns> A new <see cref="Models.DatasetExecuteQueriesResponse"/> instance for mocking. </returns>
        public static DatasetExecuteQueriesResponse DatasetExecuteQueriesResponse(DatasetExecuteQueriesInformationProtectionLabel informationProtectionLabel = null, IEnumerable<DatasetExecuteQueriesQueryResult> results = null, DatasetExecuteQueriesError error = null)
        {
            results ??= new List<DatasetExecuteQueriesQueryResult>();

            return new DatasetExecuteQueriesResponse(informationProtectionLabel, results?.ToList(), error);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatasetExecuteQueriesInformationProtectionLabel"/>. </summary>
        /// <param name="id"> The identifier (guid) of the information protection label. </param>
        /// <param name="name"> The display name of the information protection label. </param>
        /// <returns> A new <see cref="Models.DatasetExecuteQueriesInformationProtectionLabel"/> instance for mocking. </returns>
        public static DatasetExecuteQueriesInformationProtectionLabel DatasetExecuteQueriesInformationProtectionLabel(string id = null, string name = null)
        {
            return new DatasetExecuteQueriesInformationProtectionLabel(id, name);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatasetExecuteQueriesQueryResult"/>. </summary>
        /// <param name="tables"> A list of tables data for a query. </param>
        /// <param name="error"> The details of an error, if present. </param>
        /// <returns> A new <see cref="Models.DatasetExecuteQueriesQueryResult"/> instance for mocking. </returns>
        public static DatasetExecuteQueriesQueryResult DatasetExecuteQueriesQueryResult(IEnumerable<DatasetExecuteQueriesTableResult> tables = null, DatasetExecuteQueriesError error = null)
        {
            tables ??= new List<DatasetExecuteQueriesTableResult>();

            return new DatasetExecuteQueriesQueryResult(tables?.ToList(), error);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatasetExecuteQueriesTableResult"/>. </summary>
        /// <param name="rows"> A list of rows. </param>
        /// <param name="error"> The details of an error, if present. </param>
        /// <returns> A new <see cref="Models.DatasetExecuteQueriesTableResult"/> instance for mocking. </returns>
        public static DatasetExecuteQueriesTableResult DatasetExecuteQueriesTableResult(IEnumerable<object> rows = null, DatasetExecuteQueriesError error = null)
        {
            rows ??= new List<object>();

            return new DatasetExecuteQueriesTableResult(rows?.ToList(), error);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatasetExecuteQueriesError"/>. </summary>
        /// <param name="code"> The code associated with the error. </param>
        /// <param name="message"> The message of the error. If not present here, this information my also be found in details object nested under the error object. </param>
        /// <returns> A new <see cref="Models.DatasetExecuteQueriesError"/> instance for mocking. </returns>
        public static DatasetExecuteQueriesError DatasetExecuteQueriesError(string code = null, string message = null)
        {
            return new DatasetExecuteQueriesError(code, message);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Tables"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The Power BI tables. </param>
        /// <returns> A new <see cref="Models.Tables"/> instance for mocking. </returns>
        public static Tables Tables(string odataContext = null, IEnumerable<Table> value = null)
        {
            value ??= new List<Table>();

            return new Tables(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Refreshes"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> The refresh history list. </param>
        /// <returns> A new <see cref="Models.Refreshes"/> instance for mocking. </returns>
        public static Refreshes Refreshes(string odataContext = null, IEnumerable<Refresh> value = null)
        {
            value ??= new List<Refresh>();

            return new Refreshes(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Refresh"/>. </summary>
        /// <param name="refreshType"> The type of refresh request. </param>
        /// <param name="startTime"> The start date and time of the refresh. </param>
        /// <param name="endTime"> The end date and time of the refresh (may be empty if a refresh is in progress). </param>
        /// <param name="serviceExceptionJson"> Failure error code in JSON format (empty if no error). </param>
        /// <param name="status">
        /// - `Unknown` if the completion state is unknown or a refresh is in progress.
        /// - `Completed` for a successfully completed refresh.
        /// - `Failed` for an unsuccessful refresh (`serviceExceptionJson` will contain the error code).
        /// - `Disabled` if the refresh is disabled by a selective refresh.
        /// </param>
        /// <param name="requestId"> The identifier of the refresh request. Provide this identifier in all service requests. </param>
        /// <param name="refreshAttempts"> The refresh attempt list. </param>
        /// <returns> A new <see cref="Models.Refresh"/> instance for mocking. </returns>
        public static Refresh Refresh(RefreshType? refreshType = null, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string serviceExceptionJson = null, string status = null, string requestId = null, IEnumerable<RefreshAttempt> refreshAttempts = null)
        {
            refreshAttempts ??= new List<RefreshAttempt>();

            return new Refresh(
                refreshType,
                startTime,
                endTime,
                serviceExceptionJson,
                status,
                requestId,
                refreshAttempts?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.RefreshAttempt"/>. </summary>
        /// <param name="attemptId"> The index of the refresh attempt. </param>
        /// <param name="startTime"> The start date and time of the refresh attempt. </param>
        /// <param name="endTime"> The end date and time of the refresh attempt. The value is void if the refresh attempt is in progress. </param>
        /// <param name="serviceExceptionJson"> Failure error code in JSON format. Void if there's no error. </param>
        /// <param name="type"> The type of refresh attempt. </param>
        /// <returns> A new <see cref="Models.RefreshAttempt"/> instance for mocking. </returns>
        public static RefreshAttempt RefreshAttempt(int? attemptId = null, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string serviceExceptionJson = null, RefreshAttemptType? type = null)
        {
            return new RefreshAttempt(attemptId, startTime, endTime, serviceExceptionJson, type);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatasetRefreshDetail"/>. </summary>
        /// <param name="startTime"> The start date and time of the refresh. </param>
        /// <param name="endTime"> The end date and time of the refresh (may be empty if a refresh is in progress). </param>
        /// <param name="type"> The type of processing to perform. </param>
        /// <param name="commitMode"> Determines if objects will be committed in batches or only when complete. </param>
        /// <param name="status"> Dataset operation general status. </param>
        /// <param name="extendedStatus"> Dataset operation detailed status. </param>
        /// <param name="currentRefreshType"> The type of processing for the current iteration. This is useful when `commitMode` is set to `PartialBatch`. </param>
        /// <param name="numberOfAttempts"> The number of attempts for the refresh request. </param>
        /// <param name="objects"> An array of objects included in the refresh request. </param>
        /// <param name="messages"> An array of engine error or warning messages for the refresh request. </param>
        /// <param name="refreshAttempts"> The refresh attempt list. </param>
        /// <returns> A new <see cref="Models.DatasetRefreshDetail"/> instance for mocking. </returns>
        public static DatasetRefreshDetail DatasetRefreshDetail(DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, DatasetRefreshDetailType? type = null, DatasetRefreshDetailCommitMode? commitMode = null, DatasetRefreshDetailStatus? status = null, DatasetRefreshDetailExtendedStatus? extendedStatus = null, DatasetRefreshDetailType? currentRefreshType = null, int? numberOfAttempts = null, IEnumerable<DatasetRefreshObjects> objects = null, IEnumerable<EngineMessage> messages = null, IEnumerable<RefreshAttempt> refreshAttempts = null)
        {
            objects ??= new List<DatasetRefreshObjects>();
            messages ??= new List<EngineMessage>();
            refreshAttempts ??= new List<RefreshAttempt>();

            return new DatasetRefreshDetail(
                startTime,
                endTime,
                type,
                commitMode,
                status,
                extendedStatus,
                currentRefreshType,
                numberOfAttempts,
                objects?.ToList(),
                messages?.ToList(),
                refreshAttempts?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.EngineMessage"/>. </summary>
        /// <param name="code"> The error code in hex format. </param>
        /// <param name="message"> The text of error or warning message. </param>
        /// <param name="type"> The type of the error. </param>
        /// <returns> A new <see cref="Models.EngineMessage"/> instance for mocking. </returns>
        public static EngineMessage EngineMessage(string code = null, string message = null, RefreshEngineErrorType? type = null)
        {
            return new EngineMessage(code, message, type);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MashupParameters"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> A list of dataset parameters. </param>
        /// <returns> A new <see cref="Models.MashupParameters"/> instance for mocking. </returns>
        public static MashupParameters MashupParameters(string odataContext = null, IEnumerable<MashupParameter> value = null)
        {
            value ??= new List<MashupParameter>();

            return new MashupParameters(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.MashupParameter"/>. </summary>
        /// <param name="name"> The parameter name. </param>
        /// <param name="type"> The parameter type. </param>
        /// <param name="currentValue"> The current value of the parameter. </param>
        /// <param name="isRequired"> Whether the dataset parameter is required. </param>
        /// <param name="suggestedValues"> A list of suggested parameter values. </param>
        /// <returns> A new <see cref="Models.MashupParameter"/> instance for mocking. </returns>
        public static MashupParameter MashupParameter(string name = null, string type = null, string currentValue = null, bool isRequired = default, IEnumerable<string> suggestedValues = null)
        {
            suggestedValues ??= new List<string>();

            return new MashupParameter(name, type, currentValue, isRequired, suggestedValues?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Datasources"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The data source collection. </param>
        /// <returns> A new <see cref="Models.Datasources"/> instance for mocking. </returns>
        public static Datasources Datasources(string odataContext = null, IEnumerable<Datasource> value = null)
        {
            value ??= new List<Datasource>();

            return new Datasources(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.GatewayDatasources"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The list of gateway data sources. </param>
        /// <returns> A new <see cref="Models.GatewayDatasources"/> instance for mocking. </returns>
        public static GatewayDatasources GatewayDatasources(string odataContext = null, IEnumerable<GatewayDatasource> value = null)
        {
            value ??= new List<GatewayDatasource>();

            return new GatewayDatasources(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.GatewayDatasource"/>. </summary>
        /// <param name="id"> The unique ID for the data source. </param>
        /// <param name="gatewayId"> The associated gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster and is similar to the gateway cluster ID. </param>
        /// <param name="datasourceName"> The name of the data source. </param>
        /// <param name="datasourceType">
        /// The type of [data source](/power-bi/connect-data/power-bi-data-sources).
        ///
        ///
        /// | API name for the data source | | |
        /// |-|-|-|
        /// | ActiveDirectory | AdobeAnalytics | AdoDotNet |
        /// | AnalysisServices | AzureBlobs | AzureDataLakeStorage |
        /// | AzureMarketplace | AzureTables | BizTalk |
        /// | CDPA | CustomConnector | CustomHttpApi |
        /// | DB2 | Essbase | EventHub |
        /// | Excel | Exchange | Extension |
        /// | Facebook | File | Folder |
        /// | GoogleAnalytics | Hdfs | HDInsight |
        /// | Informix | MQ | MySql |
        /// | OData | ODBC | OleDb |
        /// | Oracle | PostgreSql | PowerQueryMashup
        /// | PubNub | Salesforce | SAPBW |
        /// | SAPBWMessageServer | SapErp | SAPHana |
        /// | SharePoint | SharePointDocLib | SharePointList |
        /// | Sql | Sybase | Teradata |
        /// | UIFlow | Web |
        /// </param>
        /// <param name="connectionDetails"> Connection details in JSON format. </param>
        /// <param name="credentialType"> The type of data source [credential](/power-bi/developer/embedded/configure-credentials). </param>
        /// <param name="credentialDetails"> The connection details for the data source that needs update. The connection details are mandatory when the dataset has more than one data source. </param>
        /// <returns> A new <see cref="Models.GatewayDatasource"/> instance for mocking. </returns>
        public static GatewayDatasource GatewayDatasource(Guid id = default, Guid gatewayId = default, string datasourceName = null, string datasourceType = null, string connectionDetails = null, CredentialType credentialType = default, GatewayDatasourceCredentialDetails credentialDetails = null)
        {
            return new GatewayDatasource(
                id,
                gatewayId,
                datasourceName,
                datasourceType,
                connectionDetails,
                credentialType,
                credentialDetails);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GatewayDatasourceCredentialDetails"/>. </summary>
        /// <param name="useEndUserOAuth2Credentials"> Whether the end-user Azure AD identity (OAuth 2.0 credentials) is used when connecting to the data source in DirectQuery mode. Use with data sources that support [single sign-on (SSO)](/power-bi/connect-data/power-bi-data-sources#single-sign-on-sso-for-directquery-sources). </param>
        /// <returns> A new <see cref="Models.GatewayDatasourceCredentialDetails"/> instance for mocking. </returns>
        public static GatewayDatasourceCredentialDetails GatewayDatasourceCredentialDetails(bool? useEndUserOAuth2Credentials = null)
        {
            return new GatewayDatasourceCredentialDetails(useEndUserOAuth2Credentials);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Gateways"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> The list of gateways. </param>
        /// <returns> A new <see cref="Models.Gateways"/> instance for mocking. </returns>
        public static Gateways Gateways(string odataContext = null, IEnumerable<Gateway> value = null)
        {
            value ??= new List<Gateway>();

            return new Gateways(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Gateway"/>. </summary>
        /// <param name="id"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster and is similar to the gateway cluster ID. </param>
        /// <param name="name"> The gateway name. </param>
        /// <param name="type"> The gateway type. </param>
        /// <param name="gatewayAnnotation"> Gateway metadata in JSON format. </param>
        /// <param name="publicKey"> The gateway public key. </param>
        /// <param name="gatewayStatus"> The gateway connectivity status. </param>
        /// <returns> A new <see cref="Models.Gateway"/> instance for mocking. </returns>
        public static Gateway Gateway(Guid id = default, string name = null, string type = null, string gatewayAnnotation = null, GatewayPublicKey publicKey = null, string gatewayStatus = null)
        {
            return new Gateway(
                id,
                name,
                type,
                gatewayAnnotation,
                publicKey,
                gatewayStatus);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GatewayPublicKey"/>. </summary>
        /// <param name="exponent"> The public key exponent. </param>
        /// <param name="modulus"> The public key modulus. </param>
        /// <returns> A new <see cref="Models.GatewayPublicKey"/> instance for mocking. </returns>
        public static GatewayPublicKey GatewayPublicKey(string exponent = null, string modulus = null)
        {
            return new GatewayPublicKey(exponent, modulus);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatasetQueryScaleOutSyncStatus"/>. </summary>
        /// <param name="commitVersion"> Latest commit version. </param>
        /// <param name="commitTimestamp"> Timestamp indicating the latest commit version. </param>
        /// <param name="targetSyncVersion"> Target sync version. </param>
        /// <param name="targetSyncTimestamp"> Timestamp indicating the target sync version. </param>
        /// <param name="triggerReason"> Query scale-out sync trigger reason. </param>
        /// <param name="syncStartTime"> Timestamp indicating when last sync started. </param>
        /// <param name="syncEndTime"> Timestamp indicating when last sync ended. </param>
        /// <param name="minActiveReadVersion"> Minimum active read version. </param>
        /// <param name="minActiveReadTimestamp"> Timestamp indicating the minimum active read version. </param>
        /// <param name="scaleOutStatus"> Query scale-out status. </param>
        /// <returns> A new <see cref="Models.DatasetQueryScaleOutSyncStatus"/> instance for mocking. </returns>
        public static DatasetQueryScaleOutSyncStatus DatasetQueryScaleOutSyncStatus(long? commitVersion = null, DateTimeOffset? commitTimestamp = null, long? targetSyncVersion = null, DateTimeOffset? targetSyncTimestamp = null, QueryScaleOutSyncTriggerReason? triggerReason = null, DateTimeOffset? syncStartTime = null, DateTimeOffset? syncEndTime = null, long? minActiveReadVersion = null, DateTimeOffset? minActiveReadTimestamp = null, QueryScaleOutStatus? scaleOutStatus = null)
        {
            return new DatasetQueryScaleOutSyncStatus(
                commitVersion,
                commitTimestamp,
                targetSyncVersion,
                targetSyncTimestamp,
                triggerReason,
                syncStartTime,
                syncEndTime,
                minActiveReadVersion,
                minActiveReadTimestamp,
                scaleOutStatus);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatasetUsersAccess"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> The list of users with access to a dataset. </param>
        /// <returns> A new <see cref="Models.DatasetUsersAccess"/> instance for mocking. </returns>
        public static DatasetUsersAccess DatasetUsersAccess(string odataContext = null, IEnumerable<DatasetUserAccess> value = null)
        {
            value ??= new List<DatasetUserAccess>();

            return new DatasetUsersAccess(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Imports"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The import collection. </param>
        /// <returns> A new <see cref="Models.Imports"/> instance for mocking. </returns>
        public static Imports Imports(string odataContext = null, IEnumerable<Import> value = null)
        {
            value ??= new List<Import>();

            return new Imports(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Import"/>. </summary>
        /// <param name="id"> The import ID. </param>
        /// <param name="name"> The import name. </param>
        /// <param name="importState"> The import upload state. </param>
        /// <param name="reports"> The reports associated with this import. </param>
        /// <param name="datasets"> The datasets associated with this import. </param>
        /// <param name="createdDateTime"> Import creation date and time. </param>
        /// <param name="updatedDateTime"> Import last update date and time. </param>
        /// <returns> A new <see cref="Models.Import"/> instance for mocking. </returns>
        public static Import Import(Guid id = default, string name = null, ImportState? importState = null, IEnumerable<Report> reports = null, IEnumerable<Dataset> datasets = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? updatedDateTime = null)
        {
            reports ??= new List<Report>();
            datasets ??= new List<Dataset>();

            return new Import(
                id,
                name,
                importState,
                reports?.ToList(),
                datasets?.ToList(),
                createdDateTime,
                updatedDateTime);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TemporaryUploadLocation"/>. </summary>
        /// <param name="url"> The shared access signature URL for the temporary blob storage. </param>
        /// <param name="expirationTime"> The expiration date and time of the shared access signature URL. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="url"/> is null. </exception>
        /// <returns> A new <see cref="Models.TemporaryUploadLocation"/> instance for mocking. </returns>
        public static TemporaryUploadLocation TemporaryUploadLocation(string url = null, DateTimeOffset expirationTime = default)
        {
            if (url == null)
            {
                throw new ArgumentNullException(nameof(url));
            }

            return new TemporaryUploadLocation(url, expirationTime);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Reports"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The report collection. </param>
        /// <returns> A new <see cref="Models.Reports"/> instance for mocking. </returns>
        public static Reports Reports(string odataContext = null, IEnumerable<Report> value = null)
        {
            value ??= new List<Report>();

            return new Reports(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Pages"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The page collection. </param>
        /// <returns> A new <see cref="Models.Pages"/> instance for mocking. </returns>
        public static Pages Pages(string odataContext = null, IEnumerable<Page> value = null)
        {
            value ??= new List<Page>();

            return new Pages(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Page"/>. </summary>
        /// <param name="name"> The name of the report page. </param>
        /// <param name="displayName"> The display name of the report page. </param>
        /// <param name="order"> The order of the report page. </param>
        /// <returns> A new <see cref="Models.Page"/> instance for mocking. </returns>
        public static Page Page(string name = null, string displayName = null, int? order = null)
        {
            return new Page(name, displayName, order);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Export"/>. </summary>
        /// <param name="id"> The export to file job ID. </param>
        /// <param name="createdDateTime"> The start date and time of the export to file job. </param>
        /// <param name="lastActionDateTime"> The date and time of the last change to the export to file job. </param>
        /// <param name="reportId"> The ID of the exported report. </param>
        /// <param name="reportName"> The name of the exported report. </param>
        /// <param name="status"> The current state of the export to file job. </param>
        /// <param name="percentComplete"> Job progress as a percentage. </param>
        /// <param name="resourceLocation"> The retrieval URL for the exported file. </param>
        /// <param name="resourceFileExtension"> The extension of the exported file. </param>
        /// <param name="expirationTime"> The expiration date and time of the retrieval URL. </param>
        /// <returns> A new <see cref="Models.Export"/> instance for mocking. </returns>
        public static Export Export(string id = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? lastActionDateTime = null, Guid? reportId = null, string reportName = null, ExportState? status = null, int? percentComplete = null, string resourceLocation = null, string resourceFileExtension = null, DateTimeOffset? expirationTime = null)
        {
            return new Export(
                id,
                createdDateTime,
                lastActionDateTime,
                reportId,
                reportName,
                status,
                percentComplete,
                resourceLocation,
                resourceFileExtension,
                expirationTime);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Dashboards"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The dashboard collection. </param>
        /// <returns> A new <see cref="Models.Dashboards"/> instance for mocking. </returns>
        public static Dashboards Dashboards(string odataContext = null, IEnumerable<Dashboard> value = null)
        {
            value ??= new List<Dashboard>();

            return new Dashboards(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Tiles"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The tile collection. </param>
        /// <returns> A new <see cref="Models.Tiles"/> instance for mocking. </returns>
        public static Tiles Tiles(string odataContext = null, IEnumerable<Tile> value = null)
        {
            value ??= new List<Tile>();

            return new Tiles(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatasetToDataflowLinksResponse"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> The dataset to dataflow links. </param>
        /// <returns> A new <see cref="Models.DatasetToDataflowLinksResponse"/> instance for mocking. </returns>
        public static DatasetToDataflowLinksResponse DatasetToDataflowLinksResponse(string odataContext = null, IEnumerable<DatasetToDataflowLinkResponse> value = null)
        {
            value ??= new List<DatasetToDataflowLinkResponse>();

            return new DatasetToDataflowLinksResponse(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatasetToDataflowLinkResponse"/>. </summary>
        /// <param name="datasetObjectId"> The dataset object ID. </param>
        /// <param name="dataflowObjectId"> The dataflow object ID. </param>
        /// <param name="workspaceObjectId"> The workspace object ID. </param>
        /// <returns> A new <see cref="Models.DatasetToDataflowLinkResponse"/> instance for mocking. </returns>
        public static DatasetToDataflowLinkResponse DatasetToDataflowLinkResponse(string datasetObjectId = null, string dataflowObjectId = null, string workspaceObjectId = null)
        {
            return new DatasetToDataflowLinkResponse(datasetObjectId, dataflowObjectId, workspaceObjectId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EmbedToken"/>. </summary>
        /// <param name="token"> The embed token. </param>
        /// <param name="tokenId"> The unique token ID. Through audit logs, the token ID can be used to correlate operations that use the token with the generate operation. </param>
        /// <param name="expiration"> The date and time (UTC) of token expiration. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="token"/> is null. </exception>
        /// <returns> A new <see cref="Models.EmbedToken"/> instance for mocking. </returns>
        public static EmbedToken EmbedToken(string token = null, Guid tokenId = default, DateTimeOffset expiration = default)
        {
            if (token == null)
            {
                throw new ArgumentNullException(nameof(token));
            }

            return new EmbedToken(token, tokenId, expiration);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Apps"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The list of installed apps. </param>
        /// <returns> A new <see cref="Models.Apps"/> instance for mocking. </returns>
        public static Apps Apps(string odataContext = null, IEnumerable<App> value = null)
        {
            value ??= new List<App>();

            return new Apps(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.App"/>. </summary>
        /// <param name="id"> The app ID. </param>
        /// <param name="name"> The app name. </param>
        /// <param name="description"> The app description. </param>
        /// <param name="lastUpdate"> The date and time the app was last updated. </param>
        /// <param name="publishedBy"> The app publisher. </param>
        /// <returns> A new <see cref="Models.App"/> instance for mocking. </returns>
        public static App App(Guid id = default, string name = null, string description = null, DateTimeOffset? lastUpdate = null, string publishedBy = null)
        {
            return new App(id, name, description, lastUpdate, publishedBy);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Dataflows"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> The dataflow metadata list. </param>
        /// <returns> A new <see cref="Models.Dataflows"/> instance for mocking. </returns>
        public static Dataflows Dataflows(string odataContext = null, IEnumerable<Dataflow> value = null)
        {
            value ??= new List<Dataflow>();

            return new Dataflows(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.DependentDataflows"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> The dependent dataflows. </param>
        /// <returns> A new <see cref="Models.DependentDataflows"/> instance for mocking. </returns>
        public static DependentDataflows DependentDataflows(string odataContext = null, IEnumerable<DependentDataflow> value = null)
        {
            value ??= new List<DependentDataflow>();

            return new DependentDataflows(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.DataflowTransactions"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The dataflow transactions. </param>
        /// <returns> A new <see cref="Models.DataflowTransactions"/> instance for mocking. </returns>
        public static DataflowTransactions DataflowTransactions(string odataContext = null, IEnumerable<DataflowTransaction> value = null)
        {
            value ??= new List<DataflowTransaction>();

            return new DataflowTransactions(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.DataflowTransaction"/>. </summary>
        /// <param name="id"> The transaction ID. </param>
        /// <param name="refreshType"> The type of refresh transaction. </param>
        /// <param name="startTime"> The start time of the transaction. </param>
        /// <param name="endTime"> The end time of the transaction. </param>
        /// <param name="status"> The status of the transaction. </param>
        /// <returns> A new <see cref="Models.DataflowTransaction"/> instance for mocking. </returns>
        public static DataflowTransaction DataflowTransaction(string id = null, string refreshType = null, string startTime = null, string endTime = null, string status = null)
        {
            return new DataflowTransaction(id, refreshType, startTime, endTime, status);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DataflowTransactionStatus"/>. </summary>
        /// <param name="transactionId"> The transaction ID. </param>
        /// <param name="status"> The transaction status. </param>
        /// <returns> A new <see cref="Models.DataflowTransactionStatus"/> instance for mocking. </returns>
        public static DataflowTransactionStatus DataflowTransactionStatus(string transactionId = null, DataflowTransactionStatusStatus? status = null)
        {
            return new DataflowTransactionStatus(transactionId, status);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatasourceUsers"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> The list of users with access to a data source. </param>
        /// <returns> A new <see cref="Models.DatasourceUsers"/> instance for mocking. </returns>
        public static DatasourceUsers DatasourceUsers(string odataContext = null, IEnumerable<DatasourceUser> value = null)
        {
            value ??= new List<DatasourceUser>();

            return new DatasourceUsers(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Groups"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The list of groups. </param>
        /// <returns> A new <see cref="Models.Groups"/> instance for mocking. </returns>
        public static Groups Groups(string odataContext = null, IEnumerable<Group> value = null)
        {
            value ??= new List<Group>();

            return new Groups(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.AzureResource"/>. </summary>
        /// <param name="id"> An identifier for the resource within Power BI. </param>
        /// <param name="subscriptionId"> The Azure subscription where the resource resides. </param>
        /// <param name="resourceGroup"> The resource group within the subscription where the resource resides. </param>
        /// <param name="resourceName"> The name of the resource. </param>
        /// <returns> A new <see cref="Models.AzureResource"/> instance for mocking. </returns>
        public static AzureResource AzureResource(Guid? id = null, Guid subscriptionId = default, string resourceGroup = null, string resourceName = null)
        {
            return new AzureResource(id, subscriptionId, resourceGroup, resourceName);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GroupUsers"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> The list of users with access to a workspace. </param>
        /// <returns> A new <see cref="Models.GroupUsers"/> instance for mocking. </returns>
        public static GroupUsers GroupUsers(string odataContext = null, IEnumerable<GroupUser> value = null)
        {
            value ??= new List<GroupUser>();

            return new GroupUsers(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Capacities"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> The capacity list. </param>
        /// <returns> A new <see cref="Models.Capacities"/> instance for mocking. </returns>
        public static Capacities Capacities(string odataContext = null, IEnumerable<Capacity> value = null)
        {
            value ??= new List<Capacity>();

            return new Capacities(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Capacity"/>. </summary>
        /// <param name="id"> The capacity ID. </param>
        /// <param name="displayName"> The display name of the capacity. </param>
        /// <param name="admins"> An array of capacity admins. </param>
        /// <param name="sku"> The capacity SKU. </param>
        /// <param name="state"> The capacity state. </param>
        /// <param name="capacityUserAccessRight"> The access right a user has on the capacity. </param>
        /// <param name="region"> The Azure region where the capacity was provisioned. </param>
        /// <param name="tenantKeyId"> The ID of an encryption key (only applicable to the admin route). </param>
        /// <param name="tenantKey"> Encryption key information (only applies to admin routes). </param>
        /// <returns> A new <see cref="Models.Capacity"/> instance for mocking. </returns>
        public static Capacity Capacity(Guid id = default, string displayName = null, IEnumerable<string> admins = null, string sku = null, CapacityState state = default, CapacityUserAccessRight capacityUserAccessRight = default, string region = null, Guid? tenantKeyId = null, TenantKey tenantKey = null)
        {
            admins ??= new List<string>();

            return new Capacity(
                id,
                displayName,
                admins?.ToList(),
                sku,
                state,
                capacityUserAccessRight,
                region,
                tenantKeyId,
                tenantKey);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TenantKey"/>. </summary>
        /// <param name="id"> The ID of the encryption key. </param>
        /// <param name="name"> The name of the encryption key. </param>
        /// <param name="keyVaultKeyIdentifier"> The URI that uniquely specifies the encryption key in Azure Key Vault. </param>
        /// <param name="isDefault"> Whether the encryption key is the default key for the entire tenant. Any newly created capacity inherits the default key. </param>
        /// <param name="createdAt"> The creation date and time of the encryption key. </param>
        /// <param name="updatedAt"> The last update date and time of the encryption key. </param>
        /// <returns> A new <see cref="Models.TenantKey"/> instance for mocking. </returns>
        public static TenantKey TenantKey(Guid? id = null, string name = null, string keyVaultKeyIdentifier = null, bool? isDefault = null, DateTimeOffset? createdAt = null, DateTimeOffset? updatedAt = null)
        {
            return new TenantKey(
                id,
                name,
                keyVaultKeyIdentifier,
                isDefault,
                createdAt,
                updatedAt);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Workloads"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> The list of capacity workload settings. </param>
        /// <returns> A new <see cref="Models.Workloads"/> instance for mocking. </returns>
        public static Workloads Workloads(string odataContext = null, IEnumerable<Workload> value = null)
        {
            value ??= new List<Workload>();

            return new Workloads(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Workload"/>. </summary>
        /// <param name="name"> The workload name. </param>
        /// <param name="state"> The capacity workload state. </param>
        /// <param name="maxMemoryPercentageSetByUser"> The percentage of the maximum memory that a workload can consume (set by the user). </param>
        /// <returns> A new <see cref="Models.Workload"/> instance for mocking. </returns>
        public static Workload Workload(string name = null, WorkloadState state = default, int? maxMemoryPercentageSetByUser = null)
        {
            return new Workload(name, state, maxMemoryPercentageSetByUser);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Refreshables"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The refreshables. </param>
        /// <returns> A new <see cref="Models.Refreshables"/> instance for mocking. </returns>
        public static Refreshables Refreshables(string odataContext = null, IEnumerable<Refreshable> value = null)
        {
            value ??= new List<Refreshable>();

            return new Refreshables(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Refreshable"/>. </summary>
        /// <param name="id"> The object ID of the refreshable. </param>
        /// <param name="name"> The display name of the refreshable. </param>
        /// <param name="kind"> The refreshable kind. </param>
        /// <param name="startTime"> The start time of the window for which refresh data exists. </param>
        /// <param name="endTime"> The end time of the window for which refresh data exists. </param>
        /// <param name="refreshCount"> The number of refreshes within the time window for which refresh data exists. </param>
        /// <param name="refreshFailures"> The number of refresh failures within the time window for which refresh data exists. </param>
        /// <param name="averageDuration"> The average duration in seconds of a refresh during the time window for which refresh data exists. </param>
        /// <param name="medianDuration"> The median duration in seconds of a refresh within the time window for which refresh data exists. </param>
        /// <param name="refreshesPerDay"> The number of refreshes per day (scheduled and on-demand) within the time window for which refresh data exists. </param>
        /// <param name="lastRefresh"> The last Power BI refresh history entry for the refreshable item. </param>
        /// <param name="refreshSchedule"> The refresh schedule for the refreshable item. </param>
        /// <param name="configuredBy"> The refreshable owners. </param>
        /// <param name="capacity"> The capacity for the refreshable item. </param>
        /// <param name="group"> The associated group for the refreshable item. </param>
        /// <returns> A new <see cref="Models.Refreshable"/> instance for mocking. </returns>
        public static Refreshable Refreshable(string id = null, string name = null, RefreshableKind? kind = null, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, int? refreshCount = null, int? refreshFailures = null, float? averageDuration = null, float? medianDuration = null, int? refreshesPerDay = null, Refresh lastRefresh = null, RefreshSchedule refreshSchedule = null, IEnumerable<string> configuredBy = null, Capacity capacity = null, RefreshableGroup group = null)
        {
            configuredBy ??= new List<string>();

            return new Refreshable(
                id,
                name,
                kind,
                startTime,
                endTime,
                refreshCount,
                refreshFailures,
                averageDuration,
                medianDuration,
                refreshesPerDay,
                lastRefresh,
                refreshSchedule,
                configuredBy?.ToList(),
                capacity,
                group);
        }

        /// <summary> Initializes a new instance of <see cref="Models.WorkspaceCapacityAssignmentStatus"/>. </summary>
        /// <param name="status"> The status of a workspace assign-to-capacity operation. </param>
        /// <param name="startTime"> The start date and time of a workspace assignment operation. </param>
        /// <param name="endTime"> The end date and time of a workspace assignment operation. </param>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="activityId"> The activity ID of the assignment operation (provided in case of an assignment failure). </param>
        /// <returns> A new <see cref="Models.WorkspaceCapacityAssignmentStatus"/> instance for mocking. </returns>
        public static WorkspaceCapacityAssignmentStatus WorkspaceCapacityAssignmentStatus(AssignmentStatus status = default, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, Guid? capacityId = null, Guid? activityId = null)
        {
            return new WorkspaceCapacityAssignmentStatus(status, startTime, endTime, capacityId, activityId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AvailableFeatures"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="features"> The available features list. </param>
        /// <returns> A new <see cref="Models.AvailableFeatures"/> instance for mocking. </returns>
        public static AvailableFeatures AvailableFeatures(string odataContext = null, IEnumerable<AvailableFeature> features = null)
        {
            features ??= new List<AvailableFeature>();

            return new AvailableFeatures(odataContext, features?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.AvailableFeature"/>. </summary>
        /// <param name="name"> The feature name. </param>
        /// <param name="state"> The feature state. </param>
        /// <param name="extendedState"> The feature extended state. </param>
        /// <param name="additionalInfo"> Additional feature information. </param>
        /// <returns> A new <see cref="Models.AvailableFeature"/> instance for mocking. </returns>
        public static AvailableFeature AvailableFeature(string name = null, FeatureState state = default, FeatureExtendedState extendedState = default, AdditionalFeatureInfo additionalInfo = null)
        {
            return new AvailableFeature(name, state, extendedState, additionalInfo);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AdditionalFeatureInfo"/>. </summary>
        /// <param name="usage"> Workspaces that aren't assigned to a capacity get a limited amount of [embed tokens](/power-bi/developer/embedded/embed-tokens#embed-token), to allow experimenting with the APIs. The `Usage` value represents the percentage of embed tokens that have been consumed. The `Usage` value only applies to the **embed trial** feature. For more information, see [Development testing](/power-bi/developer/embedded/move-to-production#development-testing). </param>
        /// <returns> A new <see cref="Models.AdditionalFeatureInfo"/> instance for mocking. </returns>
        public static AdditionalFeatureInfo AdditionalFeatureInfo(int? usage = null)
        {
            return new AdditionalFeatureInfo(usage);
        }

        /// <summary> Initializes a new instance of <see cref="Models.Pipelines"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The collection of deployment pipelines. </param>
        /// <returns> A new <see cref="Models.Pipelines"/> instance for mocking. </returns>
        public static Pipelines Pipelines(string odataContext = null, IEnumerable<Pipeline> value = null)
        {
            value ??= new List<Pipeline>();

            return new Pipelines(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Pipeline"/>. </summary>
        /// <param name="id"> The deployment pipeline ID. </param>
        /// <param name="displayName"> The deployment pipeline display name. </param>
        /// <param name="description"> The deployment pipeline description. </param>
        /// <param name="stages"> The collection of deployment pipeline stages. Only returned when `$expand` is set to `stages` in the request. </param>
        /// <returns> A new <see cref="Models.Pipeline"/> instance for mocking. </returns>
        public static Pipeline Pipeline(Guid id = default, string displayName = null, string description = null, IEnumerable<PipelineStage> stages = null)
        {
            stages ??= new List<PipelineStage>();

            return new Pipeline(id, displayName, description, stages?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.PipelineBaseProperties"/>. </summary>
        /// <param name="id"> The deployment pipeline ID. </param>
        /// <param name="displayName"> The deployment pipeline display name. </param>
        /// <param name="description"> The deployment pipeline description. </param>
        /// <param name="stages"> The collection of deployment pipeline stages. Only returned when `$expand` is set to `stages` in the request. </param>
        /// <returns> A new <see cref="Models.PipelineBaseProperties"/> instance for mocking. </returns>
        public static PipelineBaseProperties PipelineBaseProperties(Guid id = default, string displayName = null, string description = null, IEnumerable<PipelineStage> stages = null)
        {
            stages ??= new List<PipelineStage>();

            return new PipelineBaseProperties(id, displayName, description, stages?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.PipelineStage"/>. </summary>
        /// <param name="order"> The stage order, starting from zero. </param>
        /// <param name="workspaceId"> The assigned workspace ID. Only applicable when there's an assigned workspace. </param>
        /// <param name="workspaceName"> The assigned workspace name. Only applicable when there's an assigned workspace and the user has access to the workspace. </param>
        /// <returns> A new <see cref="Models.PipelineStage"/> instance for mocking. </returns>
        public static PipelineStage PipelineStage(int order = default, Guid? workspaceId = null, string workspaceName = null)
        {
            return new PipelineStage(order, workspaceId, workspaceName);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PipelineUsers"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The collection of deployment pipeline users. </param>
        /// <returns> A new <see cref="Models.PipelineUsers"/> instance for mocking. </returns>
        public static PipelineUsers PipelineUsers(string odataContext = null, IEnumerable<PipelineUser> value = null)
        {
            value ??= new List<PipelineUser>();

            return new PipelineUsers(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.PipelineStages"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The collection of deployment pipeline stages. </param>
        /// <returns> A new <see cref="Models.PipelineStages"/> instance for mocking. </returns>
        public static PipelineStages PipelineStages(string odataContext = null, IEnumerable<PipelineStage> value = null)
        {
            value ??= new List<PipelineStage>();

            return new PipelineStages(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.PipelineStageArtifacts"/>. </summary>
        /// <param name="datasets"> The datasets collection. </param>
        /// <param name="reports"> The reports collection. </param>
        /// <param name="dashboards"> The dashboards collection. </param>
        /// <param name="dataflows"> The dataflows collection. </param>
        /// <param name="datamarts"> The datamarts collection. </param>
        /// <returns> A new <see cref="Models.PipelineStageArtifacts"/> instance for mocking. </returns>
        public static PipelineStageArtifacts PipelineStageArtifacts(IEnumerable<PipelineStageDataset> datasets = null, IEnumerable<PipelineStageReport> reports = null, IEnumerable<PipelineStageDashboard> dashboards = null, IEnumerable<PipelineStageDataflow> dataflows = null, IEnumerable<PipelineStageDatamart> datamarts = null)
        {
            datasets ??= new List<PipelineStageDataset>();
            reports ??= new List<PipelineStageReport>();
            dashboards ??= new List<PipelineStageDashboard>();
            dataflows ??= new List<PipelineStageDataflow>();
            datamarts ??= new List<PipelineStageDatamart>();

            return new PipelineStageArtifacts(datasets?.ToList(), reports?.ToList(), dashboards?.ToList(), dataflows?.ToList(), datamarts?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.PipelineStageDataset"/>. </summary>
        /// <param name="artifactId"> The Power BI item ID. </param>
        /// <param name="artifactDisplayName"> The Power BI item display name. </param>
        /// <param name="sourceArtifactId"> The ID of the Power BI item (such as a report or a dashboard) from the workspace assigned to the source stage, which will update the current Power BI item upon deployment. Applicable only when the user has at least contributor access to the source stage workspace. </param>
        /// <param name="targetArtifactId"> The ID of the Power BI item (such as a report or a dashboard) from the workspace of the target stage, which will be updated by the current Power BI item upon deployment. Applicable only when the user has at least contributor access to the target stage workspace. </param>
        /// <param name="lastDeploymentTime"> The last deployment date and time of the Power BI item. </param>
        /// <returns> A new <see cref="Models.PipelineStageDataset"/> instance for mocking. </returns>
        public static PipelineStageDataset PipelineStageDataset(Guid artifactId = default, string artifactDisplayName = null, Guid? sourceArtifactId = null, Guid? targetArtifactId = null, DateTimeOffset? lastDeploymentTime = null)
        {
            return new PipelineStageDataset(artifactId, artifactDisplayName, sourceArtifactId, targetArtifactId, lastDeploymentTime);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PipelineStageArtifactBase"/>. </summary>
        /// <param name="artifactId"> The Power BI item ID. </param>
        /// <param name="artifactDisplayName"> The Power BI item display name. </param>
        /// <param name="sourceArtifactId"> The ID of the Power BI item (such as a report or a dashboard) from the workspace assigned to the source stage, which will update the current Power BI item upon deployment. Applicable only when the user has at least contributor access to the source stage workspace. </param>
        /// <param name="targetArtifactId"> The ID of the Power BI item (such as a report or a dashboard) from the workspace of the target stage, which will be updated by the current Power BI item upon deployment. Applicable only when the user has at least contributor access to the target stage workspace. </param>
        /// <param name="lastDeploymentTime"> The last deployment date and time of the Power BI item. </param>
        /// <returns> A new <see cref="Models.PipelineStageArtifactBase"/> instance for mocking. </returns>
        public static PipelineStageArtifactBase PipelineStageArtifactBase(Guid artifactId = default, string artifactDisplayName = null, Guid? sourceArtifactId = null, Guid? targetArtifactId = null, DateTimeOffset? lastDeploymentTime = null)
        {
            return new PipelineStageArtifactBase(artifactId, artifactDisplayName, sourceArtifactId, targetArtifactId, lastDeploymentTime);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PipelineStageReport"/>. </summary>
        /// <param name="artifactId"> The Power BI item ID. </param>
        /// <param name="artifactDisplayName"> The Power BI item display name. </param>
        /// <param name="sourceArtifactId"> The ID of the Power BI item (such as a report or a dashboard) from the workspace assigned to the source stage, which will update the current Power BI item upon deployment. Applicable only when the user has at least contributor access to the source stage workspace. </param>
        /// <param name="targetArtifactId"> The ID of the Power BI item (such as a report or a dashboard) from the workspace of the target stage, which will be updated by the current Power BI item upon deployment. Applicable only when the user has at least contributor access to the target stage workspace. </param>
        /// <param name="lastDeploymentTime"> The last deployment date and time of the Power BI item. </param>
        /// <returns> A new <see cref="Models.PipelineStageReport"/> instance for mocking. </returns>
        public static PipelineStageReport PipelineStageReport(Guid artifactId = default, string artifactDisplayName = null, Guid? sourceArtifactId = null, Guid? targetArtifactId = null, DateTimeOffset? lastDeploymentTime = null)
        {
            return new PipelineStageReport(artifactId, artifactDisplayName, sourceArtifactId, targetArtifactId, lastDeploymentTime);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PipelineStageDashboard"/>. </summary>
        /// <param name="artifactId"> The Power BI item ID. </param>
        /// <param name="artifactDisplayName"> The Power BI item display name. </param>
        /// <param name="sourceArtifactId"> The ID of the Power BI item (such as a report or a dashboard) from the workspace assigned to the source stage, which will update the current Power BI item upon deployment. Applicable only when the user has at least contributor access to the source stage workspace. </param>
        /// <param name="targetArtifactId"> The ID of the Power BI item (such as a report or a dashboard) from the workspace of the target stage, which will be updated by the current Power BI item upon deployment. Applicable only when the user has at least contributor access to the target stage workspace. </param>
        /// <param name="lastDeploymentTime"> The last deployment date and time of the Power BI item. </param>
        /// <returns> A new <see cref="Models.PipelineStageDashboard"/> instance for mocking. </returns>
        public static PipelineStageDashboard PipelineStageDashboard(Guid artifactId = default, string artifactDisplayName = null, Guid? sourceArtifactId = null, Guid? targetArtifactId = null, DateTimeOffset? lastDeploymentTime = null)
        {
            return new PipelineStageDashboard(artifactId, artifactDisplayName, sourceArtifactId, targetArtifactId, lastDeploymentTime);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PipelineStageDataflow"/>. </summary>
        /// <param name="artifactId"> The Power BI item ID. </param>
        /// <param name="artifactDisplayName"> The Power BI item display name. </param>
        /// <param name="sourceArtifactId"> The ID of the Power BI item (such as a report or a dashboard) from the workspace assigned to the source stage, which will update the current Power BI item upon deployment. Applicable only when the user has at least contributor access to the source stage workspace. </param>
        /// <param name="targetArtifactId"> The ID of the Power BI item (such as a report or a dashboard) from the workspace of the target stage, which will be updated by the current Power BI item upon deployment. Applicable only when the user has at least contributor access to the target stage workspace. </param>
        /// <param name="lastDeploymentTime"> The last deployment date and time of the Power BI item. </param>
        /// <returns> A new <see cref="Models.PipelineStageDataflow"/> instance for mocking. </returns>
        public static PipelineStageDataflow PipelineStageDataflow(Guid artifactId = default, string artifactDisplayName = null, Guid? sourceArtifactId = null, Guid? targetArtifactId = null, DateTimeOffset? lastDeploymentTime = null)
        {
            return new PipelineStageDataflow(artifactId, artifactDisplayName, sourceArtifactId, targetArtifactId, lastDeploymentTime);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PipelineStageDatamart"/>. </summary>
        /// <param name="artifactId"> The Power BI item ID. </param>
        /// <param name="artifactDisplayName"> The Power BI item display name. </param>
        /// <param name="sourceArtifactId"> The ID of the Power BI item (such as a report or a dashboard) from the workspace assigned to the source stage, which will update the current Power BI item upon deployment. Applicable only when the user has at least contributor access to the source stage workspace. </param>
        /// <param name="targetArtifactId"> The ID of the Power BI item (such as a report or a dashboard) from the workspace of the target stage, which will be updated by the current Power BI item upon deployment. Applicable only when the user has at least contributor access to the target stage workspace. </param>
        /// <param name="lastDeploymentTime"> The last deployment date and time of the Power BI item. </param>
        /// <returns> A new <see cref="Models.PipelineStageDatamart"/> instance for mocking. </returns>
        public static PipelineStageDatamart PipelineStageDatamart(Guid artifactId = default, string artifactDisplayName = null, Guid? sourceArtifactId = null, Guid? targetArtifactId = null, DateTimeOffset? lastDeploymentTime = null)
        {
            return new PipelineStageDatamart(artifactId, artifactDisplayName, sourceArtifactId, targetArtifactId, lastDeploymentTime);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PipelineOperations"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The collection of deployment pipeline operations. </param>
        /// <returns> A new <see cref="Models.PipelineOperations"/> instance for mocking. </returns>
        public static PipelineOperations PipelineOperations(string odataContext = null, IEnumerable<PipelineOperation> value = null)
        {
            value ??= new List<PipelineOperation>();

            return new PipelineOperations(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.PipelineOperation"/>. </summary>
        /// <param name="id"> The operation ID. </param>
        /// <param name="type"> The operation type. </param>
        /// <param name="status"> The pipeline operation status. </param>
        /// <param name="lastUpdatedTime"> The date and time that the operation was last updated. </param>
        /// <param name="executionStartTime"> The date and time that the operation started. </param>
        /// <param name="executionEndTime"> The date and time that the operation ended. </param>
        /// <param name="sourceStageOrder"> The numeric identifier of a source pipeline deployment stage. Development (0), Test (1), Production (2). </param>
        /// <param name="targetStageOrder"> The numeric identifier of a target pipeline deployment stage. Development (0), Test (1), Production (2). </param>
        /// <param name="performedBy"> User or service principal that performed the pipeline operation. </param>
        /// <param name="note"> A note representing a description of the operation. </param>
        /// <param name="executionPlan"> The deployment execution plan. Only applicable to a single pipeline operation. </param>
        /// <param name="preDeploymentDiffInformation"> The amount of deployed items in the source stage, that are new, identical or different to items in the target stage, before deployment. </param>
        /// <returns> A new <see cref="Models.PipelineOperation"/> instance for mocking. </returns>
        public static PipelineOperation PipelineOperation(Guid id = default, PipelineOperationType? type = null, PipelineOperationStatus status = default, DateTimeOffset lastUpdatedTime = default, DateTimeOffset? executionStartTime = null, DateTimeOffset? executionEndTime = null, int? sourceStageOrder = null, int? targetStageOrder = null, PipelineOperationUser performedBy = null, PipelineOperationNote note = null, DeploymentExecutionPlan executionPlan = null, PreDeploymentDiffInformation preDeploymentDiffInformation = null)
        {
            return new PipelineOperation(
                id,
                type,
                status,
                lastUpdatedTime,
                executionStartTime,
                executionEndTime,
                sourceStageOrder,
                targetStageOrder,
                performedBy,
                note,
                executionPlan,
                preDeploymentDiffInformation);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PipelineOperationUser"/>. </summary>
        /// <param name="userPrincipalName"> The UPN of the user who performed the deployment. </param>
        /// <param name="principalObjectID"> The ID of the service principal that performed the deployment. </param>
        /// <param name="principalType"> The type of user who performed the deployment. </param>
        /// <returns> A new <see cref="Models.PipelineOperationUser"/> instance for mocking. </returns>
        public static PipelineOperationUser PipelineOperationUser(string userPrincipalName = null, Guid? principalObjectID = null, PrincipalType principalType = default)
        {
            return new PipelineOperationUser(userPrincipalName, principalObjectID, principalType);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PipelineOperationNote"/>. </summary>
        /// <param name="content"> Text describing the deployment. </param>
        /// <param name="isTruncated"> Indicates if the note is incomplete. True, only part of the note is returned. False, the note is complete. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <returns> A new <see cref="Models.PipelineOperationNote"/> instance for mocking. </returns>
        public static PipelineOperationNote PipelineOperationNote(string content = null, bool isTruncated = default)
        {
            if (content == null)
            {
                throw new ArgumentNullException(nameof(content));
            }

            return new PipelineOperationNote(content, isTruncated);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeploymentExecutionPlan"/>. </summary>
        /// <param name="steps"> The collection of execution plan steps. </param>
        /// <returns> A new <see cref="Models.DeploymentExecutionPlan"/> instance for mocking. </returns>
        public static DeploymentExecutionPlan DeploymentExecutionPlan(IEnumerable<DeploymentExecutionStep> steps = null)
        {
            steps ??= new List<DeploymentExecutionStep>();

            return new DeploymentExecutionPlan(steps?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeploymentExecutionStep"/>. </summary>
        /// <param name="index"> The step index. </param>
        /// <param name="type"> The type of deployment step. </param>
        /// <param name="status"> The status of the pipeline operation. </param>
        /// <param name="preDeploymentDiffState"> Is an item new, different or identical to items in the target stage before deployment. </param>
        /// <param name="sourceAndTarget"> The source and target items of the step. </param>
        /// <param name="error"> The error details. Only applicable if the pipeline operation failed. </param>
        /// <returns> A new <see cref="Models.DeploymentExecutionStep"/> instance for mocking. </returns>
        public static DeploymentExecutionStep DeploymentExecutionStep(int index = default, DeploymentStepType type = default, PipelineOperationStatus status = default, DeploymentExecutionStepPreDeploymentDiffState? preDeploymentDiffState = null, DeploymentSourceAndTarget sourceAndTarget = null, DeploymentError error = null)
        {
            return new DeploymentExecutionStep(
                index,
                type,
                status,
                preDeploymentDiffState,
                sourceAndTarget,
                error);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeploymentSourceAndTarget"/>. </summary>
        /// <param name="source"> The ID of the Power BI item that's deployed from the source stage. </param>
        /// <param name="sourceDisplayName"> The display name of the Power BI item that's deployed from the source stage. </param>
        /// <param name="target"> The ID of the Power BI item that will be overwritten in the target stage. Only applies when overwriting a Power BI item. </param>
        /// <param name="targetDisplayName"> The name of the Power BI item that will be overwritten in the target stage. Only applies when overwriting a Power BI item. </param>
        /// <param name="type"> The type of the Power BI item that will be overwritten in the target stage. Only applies when overwriting a Power BI item. </param>
        /// <returns> A new <see cref="Models.DeploymentSourceAndTarget"/> instance for mocking. </returns>
        public static DeploymentSourceAndTarget DeploymentSourceAndTarget(Guid source = default, string sourceDisplayName = null, Guid? target = null, string targetDisplayName = null, string type = null)
        {
            return new DeploymentSourceAndTarget(source, sourceDisplayName, target, targetDisplayName, type);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DeploymentError"/>. </summary>
        /// <param name="errorCode"> The error code. </param>
        /// <param name="errorDetails"> Additional error details. </param>
        /// <returns> A new <see cref="Models.DeploymentError"/> instance for mocking. </returns>
        public static DeploymentError DeploymentError(string errorCode = null, string errorDetails = null)
        {
            return new DeploymentError(errorCode, errorDetails);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PreDeploymentDiffInformation"/>. </summary>
        /// <param name="newArtifactsCount"> The number of new items deployed to the target stage. </param>
        /// <param name="differentArtifactsCount"> The number of deployed items with differences between source and target stages, before deployment. </param>
        /// <param name="noDifferenceArtifactsCount"> The number of identical deployed items in the source and target stages, before deployment. </param>
        /// <returns> A new <see cref="Models.PreDeploymentDiffInformation"/> instance for mocking. </returns>
        public static PreDeploymentDiffInformation PreDeploymentDiffInformation(int newArtifactsCount = default, int differentArtifactsCount = default, int noDifferenceArtifactsCount = default)
        {
            return new PreDeploymentDiffInformation(newArtifactsCount, differentArtifactsCount, noDifferenceArtifactsCount);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DataflowStorageAccounts"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> The Power BI dataflow storage account list. </param>
        /// <returns> A new <see cref="Models.DataflowStorageAccounts"/> instance for mocking. </returns>
        public static DataflowStorageAccounts DataflowStorageAccounts(string odataContext = null, IEnumerable<DataflowStorageAccount> value = null)
        {
            value ??= new List<DataflowStorageAccount>();

            return new DataflowStorageAccounts(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.DataflowStorageAccount"/>. </summary>
        /// <param name="id"> The Power BI dataflow storage account ID. </param>
        /// <param name="name"> The Power BI dataflow storage account name. </param>
        /// <param name="isEnabled"> Whether workspaces can be assigned to this storage account. </param>
        /// <returns> A new <see cref="Models.DataflowStorageAccount"/> instance for mocking. </returns>
        public static DataflowStorageAccount DataflowStorageAccount(Guid id = default, string name = null, bool isEnabled = default)
        {
            return new DataflowStorageAccount(id, name, isEnabled);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ScanRequest"/>. </summary>
        /// <param name="id"> The scan ID. </param>
        /// <param name="createdDateTime"> The scan creation date and time. </param>
        /// <param name="status"> The scan state. </param>
        /// <param name="error"> The scan error (if any). </param>
        /// <returns> A new <see cref="Models.ScanRequest"/> instance for mocking. </returns>
        public static ScanRequest ScanRequest(Guid? id = null, DateTimeOffset? createdDateTime = null, string status = null, PowerBIApiErrorResponseDetail error = null)
        {
            return new ScanRequest(id, createdDateTime, status, error);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PowerBIApiErrorResponseDetail"/>. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="target"> The error target. </param>
        /// <returns> A new <see cref="Models.PowerBIApiErrorResponseDetail"/> instance for mocking. </returns>
        public static PowerBIApiErrorResponseDetail PowerBIApiErrorResponseDetail(string code = null, string message = null, string target = null)
        {
            return new PowerBIApiErrorResponseDetail(code, message, target);
        }

        /// <summary> Initializes a new instance of <see cref="Models.WorkspaceInfoResponse"/>. </summary>
        /// <param name="workspaces"> The workspace info associated with this scan. </param>
        /// <param name="datasourceInstances"> The data source instances associated with this scan. </param>
        /// <param name="misconfiguredDatasourceInstances"> The data source misconfigured instances associated with this scan. </param>
        /// <returns> A new <see cref="Models.WorkspaceInfoResponse"/> instance for mocking. </returns>
        public static WorkspaceInfoResponse WorkspaceInfoResponse(IEnumerable<WorkspaceInfo> workspaces = null, IEnumerable<Datasource> datasourceInstances = null, IEnumerable<Datasource> misconfiguredDatasourceInstances = null)
        {
            workspaces ??= new List<WorkspaceInfo>();
            datasourceInstances ??= new List<Datasource>();
            misconfiguredDatasourceInstances ??= new List<Datasource>();

            return new WorkspaceInfoResponse(workspaces?.ToList(), datasourceInstances?.ToList(), misconfiguredDatasourceInstances?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.WorkspaceInfo"/>. </summary>
        /// <param name="id"> The workspace object ID. </param>
        /// <param name="name"> The workspace name. </param>
        /// <param name="description"> The workspace description. </param>
        /// <param name="type"> The workspace type. </param>
        /// <param name="state"> The workspace state. </param>
        /// <param name="dataRetrievalState"> The workspace data retrieval state. </param>
        /// <param name="isOnDedicatedCapacity"> Whether the workspace is assigned to a dedicated capacity. </param>
        /// <param name="capacityId"> The workspace capacity ID. </param>
        /// <param name="defaultDatasetStorageFormat"> The default dataset storage format in the workspace. Returned only when `isOnDedicatedCapacity` is `true`. </param>
        /// <param name="reports"> The reports associated with this workspace. The list of report properties returned varies for different API calls, so you might not see all report properties in an API response. </param>
        /// <param name="dashboards"> The dashboards associated with this workspace. The list of dashboard properties returned varies for different API calls, so you might not see all dashboard properties in an API response. </param>
        /// <param name="datasets"> The datasets associated with this workspace. The list of dataset properties returned varies for different API calls, so you might not see all dataset properties in an API response. </param>
        /// <param name="dataflows"> The dataflows associated with this workspace. The list of dataflow properties returned varies for different API calls, so you might not see all dataflow properties in an API response. </param>
        /// <param name="datamarts"> The datamarts associated with this workspace. The list of datamart properties returned varies for different API calls, so you might not see all datamart properties in an API response. </param>
        /// <param name="users"> The users with access to the workspace. The list is returned only when explicitly requested. To retrieve a list of users for a classic workspace, use the Azure Active Directory Graph API. </param>
        /// <returns> A new <see cref="Models.WorkspaceInfo"/> instance for mocking. </returns>
        public static WorkspaceInfo WorkspaceInfo(Guid id = default, string name = null, string description = null, string type = null, string state = null, string dataRetrievalState = null, bool? isOnDedicatedCapacity = null, string capacityId = null, DefaultDatasetStorageFormat? defaultDatasetStorageFormat = null, IEnumerable<WorkspaceInfoReport> reports = null, IEnumerable<WorkspaceInfoDashboard> dashboards = null, IEnumerable<WorkspaceInfoDataset> datasets = null, IEnumerable<WorkspaceInfoDataflow> dataflows = null, IEnumerable<WorkspaceInfoDatamart> datamarts = null, IEnumerable<GroupUser> users = null)
        {
            reports ??= new List<WorkspaceInfoReport>();
            dashboards ??= new List<WorkspaceInfoDashboard>();
            datasets ??= new List<WorkspaceInfoDataset>();
            dataflows ??= new List<WorkspaceInfoDataflow>();
            datamarts ??= new List<WorkspaceInfoDatamart>();
            users ??= new List<GroupUser>();

            return new WorkspaceInfo(
                id,
                name,
                description,
                type,
                state,
                dataRetrievalState,
                isOnDedicatedCapacity,
                capacityId,
                defaultDatasetStorageFormat,
                reports?.ToList(),
                dashboards?.ToList(),
                datasets?.ToList(),
                dataflows?.ToList(),
                datamarts?.ToList(),
                users?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.WorkspaceInfoDatamart"/>. </summary>
        /// <param name="id"> The datamart ID. </param>
        /// <param name="name"> The datamart name. </param>
        /// <param name="description"> The datamart description. </param>
        /// <param name="type"> The datamart type. </param>
        /// <param name="status"> The datamart status. </param>
        /// <param name="state"> The datamart current state. </param>
        /// <param name="suspendedBatchId"> datamart suspended batch id. </param>
        /// <param name="endorsementDetails"> The datamart endorsement details. </param>
        /// <param name="sensitivityLabel"> The datamart sensitivity label. </param>
        /// <param name="modifiedBy"> The last user that modified the datamart. </param>
        /// <param name="modifiedDateTime"> The date and time that the datamart was last modified. </param>
        /// <param name="configuredBy"> The name of the datamart owner. </param>
        /// <param name="modifiedById"> The ID of the last user that modified the datamart. </param>
        /// <param name="configuredById"> The ID of the datamart owner. </param>
        /// <param name="upstreamDataflows"> The list of all the dataflows this item depends on. </param>
        /// <param name="upstreamDatamarts"> The list of all the datamarts this item depends on. </param>
        /// <param name="datasourceUsages"> The data source usages. </param>
        /// <param name="users"> The user access details for a Power BI datamart. </param>
        /// <returns> A new <see cref="Models.WorkspaceInfoDatamart"/> instance for mocking. </returns>
        public static WorkspaceInfoDatamart WorkspaceInfoDatamart(Guid id = default, string name = null, string description = null, DatamartType? type = null, DatamartStatus? status = null, DatamartState? state = null, string suspendedBatchId = null, EndorsementDetails endorsementDetails = null, SensitivityLabel sensitivityLabel = null, string modifiedBy = null, DateTimeOffset? modifiedDateTime = null, string configuredBy = null, string modifiedById = null, string configuredById = null, IEnumerable<DependentDataflow> upstreamDataflows = null, IEnumerable<DependentDatamart> upstreamDatamarts = null, IEnumerable<DatasourceUsage> datasourceUsages = null, IEnumerable<DatamartUser> users = null)
        {
            upstreamDataflows ??= new List<DependentDataflow>();
            upstreamDatamarts ??= new List<DependentDatamart>();
            datasourceUsages ??= new List<DatasourceUsage>();
            users ??= new List<DatamartUser>();

            return new WorkspaceInfoDatamart(
                id,
                name,
                description,
                type,
                status,
                state,
                suspendedBatchId,
                endorsementDetails,
                sensitivityLabel,
                modifiedBy,
                modifiedDateTime,
                configuredBy,
                modifiedById,
                configuredById,
                upstreamDataflows?.ToList(),
                upstreamDatamarts?.ToList(),
                datasourceUsages?.ToList(),
                users?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatamartBaseProperties"/>. </summary>
        /// <param name="id"> The datamart ID. </param>
        /// <param name="name"> The datamart name. </param>
        /// <param name="description"> The datamart description. </param>
        /// <param name="type"> The datamart type. </param>
        /// <param name="status"> The datamart status. </param>
        /// <param name="state"> The datamart current state. </param>
        /// <param name="suspendedBatchId"> datamart suspended batch id. </param>
        /// <returns> A new <see cref="Models.DatamartBaseProperties"/> instance for mocking. </returns>
        public static DatamartBaseProperties DatamartBaseProperties(Guid id = default, string name = null, string description = null, DatamartType? type = null, DatamartStatus? status = null, DatamartState? state = null, string suspendedBatchId = null)
        {
            return new DatamartBaseProperties(
                id,
                name,
                description,
                type,
                status,
                state,
                suspendedBatchId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatamartEndorsmentProperties"/>. </summary>
        /// <param name="endorsementDetails"> The datamart endorsement details. </param>
        /// <returns> A new <see cref="Models.DatamartEndorsmentProperties"/> instance for mocking. </returns>
        public static DatamartEndorsmentProperties DatamartEndorsmentProperties(EndorsementDetails endorsementDetails = null)
        {
            return new DatamartEndorsmentProperties(endorsementDetails);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatamartSensitivityLabelProperties"/>. </summary>
        /// <param name="sensitivityLabel"> The datamart sensitivity label. </param>
        /// <returns> A new <see cref="Models.DatamartSensitivityLabelProperties"/> instance for mocking. </returns>
        public static DatamartSensitivityLabelProperties DatamartSensitivityLabelProperties(SensitivityLabel sensitivityLabel = null)
        {
            return new DatamartSensitivityLabelProperties(sensitivityLabel);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatamartAuthoringProperties"/>. </summary>
        /// <param name="modifiedBy"> The last user that modified the datamart. </param>
        /// <param name="modifiedDateTime"> The date and time that the datamart was last modified. </param>
        /// <param name="configuredBy"> The name of the datamart owner. </param>
        /// <returns> A new <see cref="Models.DatamartAuthoringProperties"/> instance for mocking. </returns>
        public static DatamartAuthoringProperties DatamartAuthoringProperties(string modifiedBy = null, DateTimeOffset? modifiedDateTime = null, string configuredBy = null)
        {
            return new DatamartAuthoringProperties(modifiedBy, modifiedDateTime, configuredBy);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatamartAuthoringPropertiesById"/>. </summary>
        /// <param name="modifiedById"> The ID of the last user that modified the datamart. </param>
        /// <param name="configuredById"> The ID of the datamart owner. </param>
        /// <returns> A new <see cref="Models.DatamartAuthoringPropertiesById"/> instance for mocking. </returns>
        public static DatamartAuthoringPropertiesById DatamartAuthoringPropertiesById(string modifiedById = null, string configuredById = null)
        {
            return new DatamartAuthoringPropertiesById(modifiedById, configuredById);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatamartUpstreamProperties"/>. </summary>
        /// <param name="upstreamDataflows"> The list of all the dataflows this item depends on. </param>
        /// <param name="upstreamDatamarts"> The list of all the datamarts this item depends on. </param>
        /// <returns> A new <see cref="Models.DatamartUpstreamProperties"/> instance for mocking. </returns>
        public static DatamartUpstreamProperties DatamartUpstreamProperties(IEnumerable<DependentDataflow> upstreamDataflows = null, IEnumerable<DependentDatamart> upstreamDatamarts = null)
        {
            upstreamDataflows ??= new List<DependentDataflow>();
            upstreamDatamarts ??= new List<DependentDatamart>();

            return new DatamartUpstreamProperties(upstreamDataflows?.ToList(), upstreamDatamarts?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatamartDatasourceUsagesProperties"/>. </summary>
        /// <param name="datasourceUsages"> The data source usages. </param>
        /// <returns> A new <see cref="Models.DatamartDatasourceUsagesProperties"/> instance for mocking. </returns>
        public static DatamartDatasourceUsagesProperties DatamartDatasourceUsagesProperties(IEnumerable<DatasourceUsage> datasourceUsages = null)
        {
            datasourceUsages ??= new List<DatasourceUsage>();

            return new DatamartDatasourceUsagesProperties(datasourceUsages?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatamartUserProperties"/>. </summary>
        /// <param name="users"> The user access details for a Power BI datamart. </param>
        /// <returns> A new <see cref="Models.DatamartUserProperties"/> instance for mocking. </returns>
        public static DatamartUserProperties DatamartUserProperties(IEnumerable<DatamartUser> users = null)
        {
            users ??= new List<DatamartUser>();

            return new DatamartUserProperties(users?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.ModifiedWorkspace"/>. </summary>
        /// <param name="id"> The workspace object ID. </param>
        /// <returns> A new <see cref="Models.ModifiedWorkspace"/> instance for mocking. </returns>
        public static ModifiedWorkspace ModifiedWorkspace(Guid id = default)
        {
            return new ModifiedWorkspace(id);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AdminDatasets"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The datasets. </param>
        /// <returns> A new <see cref="Models.AdminDatasets"/> instance for mocking. </returns>
        public static AdminDatasets AdminDatasets(string odataContext = null, IEnumerable<AdminDataset> value = null)
        {
            value ??= new List<AdminDataset>();

            return new AdminDatasets(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.AdminDataset"/>. </summary>
        /// <param name="id"> The dataset ID. </param>
        /// <param name="name"> The dataset name. </param>
        /// <param name="configuredBy"> The dataset owner. </param>
        /// <param name="createdDate"> The dataset creation date and time. </param>
        /// <param name="contentProviderType"> A deprecated property that should be ignored. </param>
        /// <param name="description"> The dataset description. </param>
        /// <param name="upstreamDataflows"> The list of all the dataflows this item depends on. </param>
        /// <param name="queryScaleOutSettings"> Query scale-out settings of a dataset. </param>
        /// <param name="createReportEmbedURL"> The dataset create report embed URL. </param>
        /// <param name="qnaEmbedURL"> The dataset Q&amp;A embed URL. </param>
        /// <param name="webUrl"> The web URL of the dataset. </param>
        /// <param name="isEffectiveIdentityRequired"> Whether the dataset requires an effective identity, which you must send in a [GenerateToken](/rest/api/power-bi/embed-token/generate-token) API call. </param>
        /// <param name="isEffectiveIdentityRolesRequired"> Whether row-level security is defined inside the Power BI .pbix file. If so, you must specify a role. </param>
        /// <param name="isOnPremGatewayRequired"> Whether the dataset requires an on-premises data gateway. </param>
        /// <param name="encryption"> Dataset encryption information. Only applicable when `$expand` is specified. </param>
        /// <param name="users"> (Empty value) The dataset user access details. This property will be removed from the payload response in an upcoming release. You can retrieve user information on a Power BI item (such as a report or a dashboard) by using the [Get Dataset Users as Admin](/rest/api/power-bi/admin/datasets-get-dataset-users-as-admin) API, or the [PostWorkspaceInfo](/rest/api/power-bi/admin/workspace-info-post-workspace-info) API with the `getArtifactUsers` parameter. </param>
        /// <param name="addRowsAPIEnabled"> Whether the dataset allows adding new rows. </param>
        /// <param name="isRefreshable"> This field returns `true` when the dataset is either recently refreshed or is configured for automatic refresh, with the connection mode specifically set to 'Import'. The value will return `false` for other connection modes, such as 'DirectQuery' and 'LiveConnection', regardless of whether the dataset is manually refreshed or is set up for automatic refresh. </param>
        /// <param name="isInPlaceSharingEnabled"> Whether the dataset can be shared with external users to be consumed in their own tenant. </param>
        /// <param name="targetStorageMode"> The dataset storage mode. </param>
        /// <param name="workspaceId"> The dataset workspace ID. This property will be returned only in GetDatasetsAsAdmin. </param>
        /// <returns> A new <see cref="Models.AdminDataset"/> instance for mocking. </returns>
        public static AdminDataset AdminDataset(string id = null, string name = null, string configuredBy = null, DateTimeOffset? createdDate = null, string contentProviderType = null, string description = null, IEnumerable<DependentDataflow> upstreamDataflows = null, DatasetQueryScaleOutSettings queryScaleOutSettings = null, string createReportEmbedURL = null, string qnaEmbedURL = null, string webUrl = null, bool? isEffectiveIdentityRequired = null, bool? isEffectiveIdentityRolesRequired = null, bool? isOnPremGatewayRequired = null, Encryption encryption = null, IEnumerable<DatasetUser> users = null, bool? addRowsAPIEnabled = null, bool? isRefreshable = null, bool? isInPlaceSharingEnabled = null, string targetStorageMode = null, Guid? workspaceId = null)
        {
            upstreamDataflows ??= new List<DependentDataflow>();
            users ??= new List<DatasetUser>();

            return new AdminDataset(
                id,
                name,
                configuredBy,
                createdDate,
                contentProviderType,
                description,
                upstreamDataflows?.ToList(),
                queryScaleOutSettings,
                createReportEmbedURL,
                qnaEmbedURL,
                webUrl,
                isEffectiveIdentityRequired,
                isEffectiveIdentityRolesRequired,
                isOnPremGatewayRequired,
                encryption,
                users?.ToList(),
                addRowsAPIEnabled,
                isRefreshable,
                isInPlaceSharingEnabled,
                targetStorageMode,
                workspaceId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.DatasetUsers"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> The list of users with access to a dataset. </param>
        /// <returns> A new <see cref="Models.DatasetUsers"/> instance for mocking. </returns>
        public static DatasetUsers DatasetUsers(string odataContext = null, IEnumerable<DatasetUser> value = null)
        {
            value ??= new List<DatasetUser>();

            return new DatasetUsers(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.AdminGroups"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The list of groups. </param>
        /// <returns> A new <see cref="Models.AdminGroups"/> instance for mocking. </returns>
        public static AdminGroups AdminGroups(string odataContext = null, IEnumerable<AdminGroup> value = null)
        {
            value ??= new List<AdminGroup>();

            return new AdminGroups(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.AdminDashboards"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The dashboard collection. </param>
        /// <returns> A new <see cref="Models.AdminDashboards"/> instance for mocking. </returns>
        public static AdminDashboards AdminDashboards(string odataContext = null, IEnumerable<AdminDashboard> value = null)
        {
            value ??= new List<AdminDashboard>();

            return new AdminDashboards(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.AdminReports"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The report collection. </param>
        /// <returns> A new <see cref="Models.AdminReports"/> instance for mocking. </returns>
        public static AdminReports AdminReports(string odataContext = null, IEnumerable<AdminReport> value = null)
        {
            value ??= new List<AdminReport>();

            return new AdminReports(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.UnusedArtifactsResponse"/>. </summary>
        /// <param name="unusedArtifactEntities"> The unused Power BI item entities. </param>
        /// <param name="continuationUri"> The URI for the next chunk in the result set. </param>
        /// <param name="continuationToken"> Token to get the next chunk of the result set. </param>
        /// <returns> A new <see cref="Models.UnusedArtifactsResponse"/> instance for mocking. </returns>
        public static UnusedArtifactsResponse UnusedArtifactsResponse(IEnumerable<UnusedArtifactEntity> unusedArtifactEntities = null, string continuationUri = null, string continuationToken = null)
        {
            unusedArtifactEntities ??= new List<UnusedArtifactEntity>();

            return new UnusedArtifactsResponse(unusedArtifactEntities?.ToList(), continuationUri, continuationToken);
        }

        /// <summary> Initializes a new instance of <see cref="Models.UnusedArtifactEntity"/>. </summary>
        /// <param name="artifactId"> The ID of the Power BI item. </param>
        /// <param name="displayName"> The display name of the Power BI item. </param>
        /// <param name="artifactType"> The Power BI item type. </param>
        /// <param name="artifactSizeInMB"> The size of the Power BI item in megabytes (if applicable). </param>
        /// <param name="createdDateTime"> The creation time of the Power BI item (if applicable). </param>
        /// <param name="lastAccessedDateTime"> The last access time of the Power BI item (if applicable). </param>
        /// <returns> A new <see cref="Models.UnusedArtifactEntity"/> instance for mocking. </returns>
        public static UnusedArtifactEntity UnusedArtifactEntity(string artifactId = null, string displayName = null, string artifactType = null, int? artifactSizeInMB = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? lastAccessedDateTime = null)
        {
            return new UnusedArtifactEntity(
                artifactId,
                displayName,
                artifactType,
                artifactSizeInMB,
                createdDateTime,
                lastAccessedDateTime);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReportUsers"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> The list of users with access to a report. </param>
        /// <returns> A new <see cref="Models.ReportUsers"/> instance for mocking. </returns>
        public static ReportUsers ReportUsers(string odataContext = null, IEnumerable<ReportUser> value = null)
        {
            value ??= new List<ReportUser>();

            return new ReportUsers(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Subscriptions"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> Power BI email subscription. </param>
        /// <returns> A new <see cref="Models.Subscriptions"/> instance for mocking. </returns>
        public static Subscriptions Subscriptions(string odataContext = null, IEnumerable<Subscription> value = null)
        {
            value ??= new List<Subscription>();

            return new Subscriptions(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.AdminTiles"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The tile collection. </param>
        /// <returns> A new <see cref="Models.AdminTiles"/> instance for mocking. </returns>
        public static AdminTiles AdminTiles(string odataContext = null, IEnumerable<AdminTile> value = null)
        {
            value ??= new List<AdminTile>();

            return new AdminTiles(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.DashboardUsers"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> The list of users with access to a dashboard. </param>
        /// <returns> A new <see cref="Models.DashboardUsers"/> instance for mocking. </returns>
        public static DashboardUsers DashboardUsers(string odataContext = null, IEnumerable<DashboardUser> value = null)
        {
            value ??= new List<DashboardUser>();

            return new DashboardUsers(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArtifactAccessResponse"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="artifactAccessEntities"> The list of Power BI items that a user can access. </param>
        /// <param name="continuationUri"> The URI of the next chunk in the result set. </param>
        /// <param name="continuationToken"> The token for the next chunk in the result set. </param>
        /// <returns> A new <see cref="Models.ArtifactAccessResponse"/> instance for mocking. </returns>
        public static ArtifactAccessResponse ArtifactAccessResponse(string odataContext = null, IEnumerable<ArtifactAccessEntry> artifactAccessEntities = null, string continuationUri = null, string continuationToken = null)
        {
            artifactAccessEntities ??= new List<ArtifactAccessEntry>();

            return new ArtifactAccessResponse(odataContext, artifactAccessEntities?.ToList(), continuationUri, continuationToken);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ArtifactAccessEntry"/>. </summary>
        /// <param name="artifactId"> The Power BI item ID. </param>
        /// <param name="displayName"> The display name of the Power BI item. </param>
        /// <param name="artifactType"> The type of Power BI item. </param>
        /// <param name="accessRight"> The access right that the user has for the Power BI item. </param>
        /// <param name="shareType"> The type of how the access is given to the Power BI item. Only available for widely shared artifacts APIs. </param>
        /// <param name="sharer"> The user who shared the Power BI item. Only available for widely shared artifacts APIs. </param>
        /// <returns> A new <see cref="Models.ArtifactAccessEntry"/> instance for mocking. </returns>
        public static ArtifactAccessEntry ArtifactAccessEntry(string artifactId = null, string displayName = null, ArtifactType artifactType = default, string accessRight = null, string shareType = null, User sharer = null)
        {
            return new ArtifactAccessEntry(
                artifactId,
                displayName,
                artifactType,
                accessRight,
                shareType,
                sharer);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TenantKeys"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> Encryption keys. </param>
        /// <returns> A new <see cref="Models.TenantKeys"/> instance for mocking. </returns>
        public static TenantKeys TenantKeys(string odataContext = null, IEnumerable<TenantKey> value = null)
        {
            value ??= new List<TenantKey>();

            return new TenantKeys(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.CapacityUsers"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> The list of users with access to a capacity. </param>
        /// <returns> A new <see cref="Models.CapacityUsers"/> instance for mocking. </returns>
        public static CapacityUsers CapacityUsers(string odataContext = null, IEnumerable<CapacityUser> value = null)
        {
            value ??= new List<CapacityUser>();

            return new CapacityUsers(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.AdminDataflows"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The report collection. </param>
        /// <returns> A new <see cref="Models.AdminDataflows"/> instance for mocking. </returns>
        public static AdminDataflows AdminDataflows(string odataContext = null, IEnumerable<AdminDataflow> value = null)
        {
            value ??= new List<AdminDataflow>();

            return new AdminDataflows(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.DataflowUsers"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> The list of users with access to a dataflow. </param>
        /// <returns> A new <see cref="Models.DataflowUsers"/> instance for mocking. </returns>
        public static DataflowUsers DataflowUsers(string odataContext = null, IEnumerable<DataflowUser> value = null)
        {
            value ??= new List<DataflowUser>();

            return new DataflowUsers(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.AdminApps"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The list of installed apps. </param>
        /// <returns> A new <see cref="Models.AdminApps"/> instance for mocking. </returns>
        public static AdminApps AdminApps(string odataContext = null, IEnumerable<AdminApp> value = null)
        {
            value ??= new List<AdminApp>();

            return new AdminApps(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.AdminApp"/>. </summary>
        /// <param name="id"> The app ID. </param>
        /// <param name="name"> The app name. </param>
        /// <param name="description"> The app description. </param>
        /// <param name="lastUpdate"> The date and time the app was last updated. </param>
        /// <param name="publishedBy"> The app publisher. </param>
        /// <param name="workspaceId"> Associated workspace for the app. </param>
        /// <returns> A new <see cref="Models.AdminApp"/> instance for mocking. </returns>
        public static AdminApp AdminApp(Guid id = default, string name = null, string description = null, DateTimeOffset? lastUpdate = null, string publishedBy = null, string workspaceId = null)
        {
            return new AdminApp(
                id,
                name,
                description,
                lastUpdate,
                publishedBy,
                workspaceId);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AppUsers"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="value"> The list of users with access to an app. </param>
        /// <returns> A new <see cref="Models.AppUsers"/> instance for mocking. </returns>
        public static AppUsers AppUsers(string odataContext = null, IEnumerable<AppUser> value = null)
        {
            value ??= new List<AppUser>();

            return new AppUsers(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.AppUser"/>. </summary>
        /// <param name="appUserAccessRight"> The access right that the user has for the app. </param>
        /// <param name="emailAddress"> Email address of the user. </param>
        /// <param name="displayName"> Display name of the principal. </param>
        /// <param name="identifier"> Identifier of the principal. </param>
        /// <param name="graphId"> Identifier of the principal in Microsoft Graph. Only available for admin APIs. </param>
        /// <param name="principalType"> The principal type. </param>
        /// <returns> A new <see cref="Models.AppUser"/> instance for mocking. </returns>
        public static AppUser AppUser(AppUserAccessRight appUserAccessRight = default, string emailAddress = null, string displayName = null, string identifier = null, string graphId = null, PrincipalType? principalType = null)
        {
            return new AppUser(
                appUserAccessRight,
                emailAddress,
                displayName,
                identifier,
                graphId,
                principalType);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SubscriptionsByUserResponse"/>. </summary>
        /// <param name="odataContext"></param>
        /// <param name="subscriptionEntities"> The subscriptions for user. </param>
        /// <param name="continuationUri"> The URI for the next chunk in the result set. </param>
        /// <param name="continuationToken"> Token to get the next chunk of the result set. </param>
        /// <returns> A new <see cref="Models.SubscriptionsByUserResponse"/> instance for mocking. </returns>
        public static SubscriptionsByUserResponse SubscriptionsByUserResponse(string odataContext = null, IEnumerable<Subscription> subscriptionEntities = null, string continuationUri = null, string continuationToken = null)
        {
            subscriptionEntities ??= new List<Subscription>();

            return new SubscriptionsByUserResponse(odataContext, subscriptionEntities?.ToList(), continuationUri, continuationToken);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ActivityEventResponse"/>. </summary>
        /// <param name="activityEventEntities"> An array of activity event objects. To learn more about an activity event (which is a collection of event properties) refer to [Microsoft 365 Management Activity schema](https://learn.microsoft.com/en-us/office/office-365-management-api/office-365-management-activity-api-schema#power-bi-schema). </param>
        /// <param name="continuationUri"> The URI for the next chunk in the result set. </param>
        /// <param name="continuationToken"> Token to get the next chunk of the result set. </param>
        /// <returns> A new <see cref="Models.ActivityEventResponse"/> instance for mocking. </returns>
        public static ActivityEventResponse ActivityEventResponse(IEnumerable<object> activityEventEntities = null, string continuationUri = null, string continuationToken = null)
        {
            activityEventEntities ??= new List<object>();

            return new ActivityEventResponse(activityEventEntities?.ToList(), continuationUri, continuationToken);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InformationProtectionChangeLabelResponse"/>. </summary>
        /// <param name="dashboards"> A list containing the unique ID and information protection label change status of one or more dashboards. </param>
        /// <param name="reports"> A list containing the unique ID and information protection label change status of one or more reports. </param>
        /// <param name="dataflows"> A list containing the unique ID and information protection label change status of one or more dataflows. </param>
        /// <param name="datasets"> A list containing the unique ID and information protection label change status of one or more datasets. </param>
        /// <returns> A new <see cref="Models.InformationProtectionChangeLabelResponse"/> instance for mocking. </returns>
        public static InformationProtectionChangeLabelResponse InformationProtectionChangeLabelResponse(IEnumerable<ChangeLabelStatus> dashboards = null, IEnumerable<ChangeLabelStatus> reports = null, IEnumerable<ChangeLabelStatus> dataflows = null, IEnumerable<ChangeLabelStatus> datasets = null)
        {
            dashboards ??= new List<ChangeLabelStatus>();
            reports ??= new List<ChangeLabelStatus>();
            dataflows ??= new List<ChangeLabelStatus>();
            datasets ??= new List<ChangeLabelStatus>();

            return new InformationProtectionChangeLabelResponse(dashboards?.ToList(), reports?.ToList(), dataflows?.ToList(), datasets?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.ChangeLabelStatus"/>. </summary>
        /// <param name="id"> The unique ID of a Power BI item. The ID is in UUID format for dashboards, reports, and dataflows; and in UUID or string format for datasets. </param>
        /// <param name="status"> The status of an information protection label change operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/> is null. </exception>
        /// <returns> A new <see cref="Models.ChangeLabelStatus"/> instance for mocking. </returns>
        public static ChangeLabelStatus ChangeLabelStatus(string id = null, Status status = default)
        {
            if (id == null)
            {
                throw new ArgumentNullException(nameof(id));
            }

            return new ChangeLabelStatus(id, status);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AdminPipelines"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The collection of deployment pipelines. </param>
        /// <returns> A new <see cref="Models.AdminPipelines"/> instance for mocking. </returns>
        public static AdminPipelines AdminPipelines(string odataContext = null, IEnumerable<AdminPipeline> value = null)
        {
            value ??= new List<AdminPipeline>();

            return new AdminPipelines(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.AdminPipeline"/>. </summary>
        /// <param name="id"> The deployment pipeline ID. </param>
        /// <param name="displayName"> The deployment pipeline display name. </param>
        /// <param name="description"> The deployment pipeline description. </param>
        /// <param name="stages"> The collection of deployment pipeline stages. Only returned when `$expand` is set to `stages` in the request. </param>
        /// <param name="users"> The collection of deployment pipeline users. Only returned when `$expand` is set to `users` in the request. </param>
        /// <returns> A new <see cref="Models.AdminPipeline"/> instance for mocking. </returns>
        public static AdminPipeline AdminPipeline(Guid id = default, string displayName = null, string description = null, IEnumerable<PipelineStage> stages = null, IEnumerable<PipelineUser> users = null)
        {
            stages ??= new List<PipelineStage>();
            users ??= new List<PipelineUser>();

            return new AdminPipeline(id, displayName, description, stages?.ToList(), users?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.PipelineUsersProperties"/>. </summary>
        /// <param name="users"> The collection of deployment pipeline users. Only returned when `$expand` is set to `users` in the request. </param>
        /// <returns> A new <see cref="Models.PipelineUsersProperties"/> instance for mocking. </returns>
        public static PipelineUsersProperties PipelineUsersProperties(IEnumerable<PipelineUser> users = null)
        {
            users ??= new List<PipelineUser>();

            return new PipelineUsersProperties(users?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.AdminServicePrincipalProfiles"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The service principal profile collection. </param>
        /// <returns> A new <see cref="Models.AdminServicePrincipalProfiles"/> instance for mocking. </returns>
        public static AdminServicePrincipalProfiles AdminServicePrincipalProfiles(string odataContext = null, IEnumerable<AdminServicePrincipalProfile> value = null)
        {
            value ??= new List<AdminServicePrincipalProfile>();

            return new AdminServicePrincipalProfiles(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.InstallTicket"/>. </summary>
        /// <param name="ticket"> Install ticket. </param>
        /// <param name="ticketId"> The unique ID of an install ticket. Audit logs can be used to correlate operations that use this ticket with the generate ticket operation. </param>
        /// <param name="expiration"> The expiration date and time (UTC) of the ticket. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ticket"/> is null. </exception>
        /// <returns> A new <see cref="Models.InstallTicket"/> instance for mocking. </returns>
        public static InstallTicket InstallTicket(string ticket = null, Guid ticketId = default, DateTimeOffset expiration = default)
        {
            if (ticket == null)
            {
                throw new ArgumentNullException(nameof(ticket));
            }

            return new InstallTicket(ticket, ticketId, expiration);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ServicePrincipalProfiles"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The service principal profile collection. </param>
        /// <returns> A new <see cref="Models.ServicePrincipalProfiles"/> instance for mocking. </returns>
        public static ServicePrincipalProfiles ServicePrincipalProfiles(string odataContext = null, IEnumerable<ServicePrincipalProfile> value = null)
        {
            value ??= new List<ServicePrincipalProfile>();

            return new ServicePrincipalProfiles(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Scorecards"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="odataCount"></param>
        /// <param name="odataNextLink"> Link to the next page results. </param>
        /// <param name="value"> The scorecard collection. </param>
        /// <returns> A new <see cref="Models.Scorecards"/> instance for mocking. </returns>
        public static Scorecards Scorecards(string odataContext = null, int? odataCount = null, string odataNextLink = null, IEnumerable<Scorecard> value = null)
        {
            value ??= new List<Scorecard>();

            return new Scorecards(odataContext, odataCount, odataNextLink, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.Goals"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The goal collection. </param>
        /// <returns> A new <see cref="Models.Goals"/> instance for mocking. </returns>
        public static Goals Goals(string odataContext = null, IEnumerable<Goal> value = null)
        {
            value ??= new List<Goal>();

            return new Goals(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.GoalsRulesGoalStatusRules"/>. </summary>
        /// <param name="rules"> The list of rules. </param>
        /// <param name="defaultOutput">
        /// The status ID when no rule matches
        ///
        /// | ID | Description |
        /// |-|-|
        /// | 0 | Not started |
        /// | 1 | On track |
        /// | 2 | At risk |
        /// | 3 | Behind |
        /// | 4 | Overdue |
        /// | 5 | Completed |
        /// </param>
        /// <param name="scorecardObjectId"> The scorecard ID. </param>
        /// <param name="goalObjectId"> The goal ID. </param>
        /// <param name="lastModifiedTime"> The UTC time at last modification. </param>
        /// <returns> A new <see cref="Models.GoalsRulesGoalStatusRules"/> instance for mocking. </returns>
        public static GoalsRulesGoalStatusRules GoalsRulesGoalStatusRules(IEnumerable<GoalsRulesRule1OfInt32> rules = null, int? defaultOutput = null, string scorecardObjectId = null, string goalObjectId = null, DateTimeOffset? lastModifiedTime = null)
        {
            rules ??= new List<GoalsRulesRule1OfInt32>();

            return new GoalsRulesGoalStatusRules(rules?.ToList(), defaultOutput, scorecardObjectId, goalObjectId, lastModifiedTime);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GoalValues"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The goal value collection. </param>
        /// <returns> A new <see cref="Models.GoalValues"/> instance for mocking. </returns>
        public static GoalValues GoalValues(string odataContext = null, IEnumerable<GoalValue> value = null)
        {
            value ??= new List<GoalValue>();

            return new GoalValues(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.GoalRefreshHistories"/>. </summary>
        /// <param name="odataContext"> OData context. </param>
        /// <param name="value"> The goal refresh history entries. </param>
        /// <returns> A new <see cref="Models.GoalRefreshHistories"/> instance for mocking. </returns>
        public static GoalRefreshHistories GoalRefreshHistories(string odataContext = null, IEnumerable<GoalRefreshHistory> value = null)
        {
            value ??= new List<GoalRefreshHistory>();

            return new GoalRefreshHistories(odataContext, value?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="Models.GoalRefreshHistory"/>. </summary>
        /// <param name="goalId"> The goal ID. </param>
        /// <param name="connectionType"> The refresh connection type. </param>
        /// <param name="status"> The status of the refresh processing. </param>
        /// <param name="timestamp"> The UTC timestamp of the refresh operation. </param>
        /// <param name="rootActivityId"> The root activity ID. </param>
        /// <param name="message"> The verbal description of the status of the refresh operation. </param>
        /// <returns> A new <see cref="Models.GoalRefreshHistory"/> instance for mocking. </returns>
        public static GoalRefreshHistory GoalRefreshHistory(Guid? goalId = null, GoalValueType? connectionType = null, GoalProcessingStatus? status = null, DateTimeOffset? timestamp = null, Guid? rootActivityId = null, string message = null)
        {
            return new GoalRefreshHistory(
                goalId,
                connectionType,
                status,
                timestamp,
                rootActivityId,
                message);
        }
    }
}
