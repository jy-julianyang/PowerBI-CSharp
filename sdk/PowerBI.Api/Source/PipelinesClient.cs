// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    /// <summary> The Pipelines service client. </summary>
    public partial class PipelinesClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal PipelinesRestClient RestClient { get; }

        /// <summary> Initializes a new instance of PipelinesClient for mocking. </summary>
        protected PipelinesClient()
        {
        }

        /// <summary> Initializes a new instance of PipelinesClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public PipelinesClient(TokenCredential credential, Uri endpoint = null, PowerBIClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("https://api.powerbi.com");

            options ??= new PowerBIClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://analysis.windows.net/powerbi/api/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new PipelinesRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of PipelinesClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal PipelinesClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new PipelinesRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Returns a list of deployment pipelines that the user has access to. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.Read.All or Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Pipelines>> GetPipelinesAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipelines");
            scope.Start();
            try
            {
                return await RestClient.GetPipelinesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of deployment pipelines that the user has access to. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.Read.All or Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Pipelines> GetPipelines(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipelines");
            scope.Start();
            try
            {
                return RestClient.GetPipelines(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new deployment pipeline. </summary>
        /// <param name="createPipelineRequest"> The create pipeline request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Pipeline>> CreatePipelineAsync(CreatePipelineRequest createPipelineRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.CreatePipeline");
            scope.Start();
            try
            {
                return await RestClient.CreatePipelineAsync(createPipelineRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new deployment pipeline. </summary>
        /// <param name="createPipelineRequest"> The create pipeline request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Pipeline> CreatePipeline(CreatePipelineRequest createPipelineRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.CreatePipeline");
            scope.Start();
            try
            {
                return RestClient.CreatePipeline(createPipelineRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `stages`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Pipeline>> GetPipelineAsync(Guid pipelineId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipeline");
            scope.Start();
            try
            {
                return await RestClient.GetPipelineAsync(pipelineId, expand, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `stages`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Pipeline> GetPipeline(Guid pipelineId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipeline");
            scope.Start();
            try
            {
                return RestClient.GetPipeline(pipelineId, expand, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="updatePipelineRequest"> The update pipeline request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Pipeline>> UpdatePipelineAsync(Guid pipelineId, UpdatePipelineRequest updatePipelineRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.UpdatePipeline");
            scope.Start();
            try
            {
                return await RestClient.UpdatePipelineAsync(pipelineId, updatePipelineRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="updatePipelineRequest"> The update pipeline request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Pipeline> UpdatePipeline(Guid pipelineId, UpdatePipelineRequest updatePipelineRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.UpdatePipeline");
            scope.Start();
            try
            {
                return RestClient.UpdatePipeline(pipelineId, updatePipelineRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This operation will fail if there's an active deployment operation.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> DeletePipelineAsync(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.DeletePipeline");
            scope.Start();
            try
            {
                return await RestClient.DeletePipelineAsync(pipelineId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This operation will fail if there's an active deployment operation.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response DeletePipeline(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.DeletePipeline");
            scope.Start();
            try
            {
                return RestClient.DeletePipeline(pipelineId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<PipelineUsers>> GetPipelineUsersAsync(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipelineUsers");
            scope.Start();
            try
            {
                return await RestClient.GetPipelineUsersAsync(pipelineId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<PipelineUsers> GetPipelineUsers(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipelineUsers");
            scope.Start();
            try
            {
                return RestClient.GetPipelineUsers(pipelineId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grants user permissions to the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdatePipelineUserAsync(Guid pipelineId, PipelineUser userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.UpdatePipelineUser");
            scope.Start();
            try
            {
                return await RestClient.UpdatePipelineUserAsync(pipelineId, userDetails, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grants user permissions to the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdatePipelineUser(Guid pipelineId, PipelineUser userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.UpdatePipelineUser");
            scope.Start();
            try
            {
                return RestClient.UpdatePipelineUser(pipelineId, userDetails, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes user permissions from the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="identifier"> To delete user pipeline permissions, provide the user principal name (UPN) of the user. To delete a service principal or a security group's pipeline permissions, provide the Object ID of the service principal or security group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> DeletePipelineUserAsync(Guid pipelineId, string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.DeletePipelineUser");
            scope.Start();
            try
            {
                return await RestClient.DeletePipelineUserAsync(pipelineId, identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes user permissions from the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="identifier"> To delete user pipeline permissions, provide the user principal name (UPN) of the user. To delete a service principal or a security group's pipeline permissions, provide the Object ID of the service principal or security group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response DeletePipelineUser(Guid pipelineId, string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.DeletePipelineUser");
            scope.Start();
            try
            {
                return RestClient.DeletePipelineUser(pipelineId, identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the stages of the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<PipelineStages>> GetPipelineStagesAsync(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipelineStages");
            scope.Start();
            try
            {
                return await RestClient.GetPipelineStagesAsync(pipelineId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the stages of the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<PipelineStages> GetPipelineStages(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipelineStages");
            scope.Start();
            try
            {
                return RestClient.GetPipelineStages(pipelineId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Assigns the specified workspace to the specified deployment pipeline stage. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="stageOrder"> The deployment pipeline stage order. Development (0), Test (1), Production (2). </param>
        /// <param name="assignWorkspaceRequest"> The assign workspace request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All and Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - The specified deployment pipeline stage isn't already assigned.
        /// - You must be an admin of the specified workspace.
        /// - The specified workspace isn't assigned to any other deployment pipeline.
        /// - This operation will fail if there's an active deployment operation.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> AssignWorkspaceAsync(Guid pipelineId, int stageOrder, AssignWorkspaceRequest assignWorkspaceRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.AssignWorkspace");
            scope.Start();
            try
            {
                return await RestClient.AssignWorkspaceAsync(pipelineId, stageOrder, assignWorkspaceRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Assigns the specified workspace to the specified deployment pipeline stage. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="stageOrder"> The deployment pipeline stage order. Development (0), Test (1), Production (2). </param>
        /// <param name="assignWorkspaceRequest"> The assign workspace request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All and Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - The specified deployment pipeline stage isn't already assigned.
        /// - You must be an admin of the specified workspace.
        /// - The specified workspace isn't assigned to any other deployment pipeline.
        /// - This operation will fail if there's an active deployment operation.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response AssignWorkspace(Guid pipelineId, int stageOrder, AssignWorkspaceRequest assignWorkspaceRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.AssignWorkspace");
            scope.Start();
            try
            {
                return RestClient.AssignWorkspace(pipelineId, stageOrder, assignWorkspaceRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Unassigns the workspace from the specified stage in the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="stageOrder"> The deployment pipeline stage order. Development (0), Test (1), Production (2). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This operation will fail if there's an active deployment operation.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UnassignWorkspaceAsync(Guid pipelineId, int stageOrder, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.UnassignWorkspace");
            scope.Start();
            try
            {
                return await RestClient.UnassignWorkspaceAsync(pipelineId, stageOrder, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Unassigns the workspace from the specified stage in the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="stageOrder"> The deployment pipeline stage order. Development (0), Test (1), Production (2). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This operation will fail if there's an active deployment operation.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UnassignWorkspace(Guid pipelineId, int stageOrder, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.UnassignWorkspace");
            scope.Start();
            try
            {
                return RestClient.UnassignWorkspace(pipelineId, stageOrder, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the supported items from the workspace assigned to the specified stage of the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="stageOrder"> The deployment pipeline stage order. Development (0), Test (1), Production (2). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// To learn about items that aren't supported in deployment pipelines, see [Unsupported items](/power-bi/create-reports/deployment-pipelines-process#unsupported-items).
        ///
        /// ## Permissions
        ///
        /// The user must at least be a contributor on the workspace assigned to the specified stage. For more information, see [Permissions](/power-bi/create-reports/deployment-pipelines-process#permissions).
        ///
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<PipelineStageArtifacts>> GetPipelineStageArtifactsAsync(Guid pipelineId, int stageOrder, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipelineStageArtifacts");
            scope.Start();
            try
            {
                return await RestClient.GetPipelineStageArtifactsAsync(pipelineId, stageOrder, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the supported items from the workspace assigned to the specified stage of the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="stageOrder"> The deployment pipeline stage order. Development (0), Test (1), Production (2). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// To learn about items that aren't supported in deployment pipelines, see [Unsupported items](/power-bi/create-reports/deployment-pipelines-process#unsupported-items).
        ///
        /// ## Permissions
        ///
        /// The user must at least be a contributor on the workspace assigned to the specified stage. For more information, see [Permissions](/power-bi/create-reports/deployment-pipelines-process#permissions).
        ///
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<PipelineStageArtifacts> GetPipelineStageArtifacts(Guid pipelineId, int stageOrder, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipelineStageArtifacts");
            scope.Start();
            try
            {
                return RestClient.GetPipelineStageArtifacts(pipelineId, stageOrder, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of the up-to-20 most recent deploy operations performed on the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<PipelineOperations>> GetPipelineOperationsAsync(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipelineOperations");
            scope.Start();
            try
            {
                return await RestClient.GetPipelineOperationsAsync(pipelineId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of the up-to-20 most recent deploy operations performed on the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<PipelineOperations> GetPipelineOperations(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipelineOperations");
            scope.Start();
            try
            {
                return RestClient.GetPipelineOperations(pipelineId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the details of the specified deploy operation performed on the specified deployment pipeline, including the deployment execution plan. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="operationId"> The operation ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Use to track the status of a deploy operation.
        ///
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<PipelineOperation>> GetPipelineOperationAsync(Guid pipelineId, Guid operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipelineOperation");
            scope.Start();
            try
            {
                return await RestClient.GetPipelineOperationAsync(pipelineId, operationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the details of the specified deploy operation performed on the specified deployment pipeline, including the deployment execution plan. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="operationId"> The operation ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Use to track the status of a deploy operation.
        ///
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<PipelineOperation> GetPipelineOperation(Guid pipelineId, Guid operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipelineOperation");
            scope.Start();
            try
            {
                return RestClient.GetPipelineOperation(pipelineId, operationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deploys all supported items from the source stage of the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="deployRequest"> The deploy request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// To learn about items that aren't supported in deployment pipelines, see [Unsupported items](/power-bi/create-reports/deployment-pipelines-process#unsupported-items).
        ///
        /// ## Permissions
        ///
        /// The user must at least be a contributor on both source and target deployment workspaces. For more information, see [Permissions](/power-bi/create-reports/deployment-pipelines-process#permissions).
        ///
        /// ## Required Scope
        ///
        /// Pipeline.Deploy
        ///
        /// ## Limitations
        ///
        /// Maximum 300 deployed items per request.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<PipelineOperation>> DeployAllAsync(Guid pipelineId, DeployAllRequest deployRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.DeployAll");
            scope.Start();
            try
            {
                return await RestClient.DeployAllAsync(pipelineId, deployRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deploys all supported items from the source stage of the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="deployRequest"> The deploy request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// To learn about items that aren't supported in deployment pipelines, see [Unsupported items](/power-bi/create-reports/deployment-pipelines-process#unsupported-items).
        ///
        /// ## Permissions
        ///
        /// The user must at least be a contributor on both source and target deployment workspaces. For more information, see [Permissions](/power-bi/create-reports/deployment-pipelines-process#permissions).
        ///
        /// ## Required Scope
        ///
        /// Pipeline.Deploy
        ///
        /// ## Limitations
        ///
        /// Maximum 300 deployed items per request.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<PipelineOperation> DeployAll(Guid pipelineId, DeployAllRequest deployRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.DeployAll");
            scope.Start();
            try
            {
                return RestClient.DeployAll(pipelineId, deployRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deploys the specified items from the source stage of the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="deployRequest"> The selective deploy request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must at least be a contributor on both source and target deployment workspaces. For more information, see [Permissions](/power-bi/create-reports/deployment-pipelines-process#permissions).
        ///
        /// ## Required Scope
        ///
        /// Pipeline.Deploy
        ///
        /// ## Limitations
        ///
        /// Maximum 300 deployed items per request.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<PipelineOperation>> SelectiveDeployAsync(Guid pipelineId, SelectiveDeployRequest deployRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.SelectiveDeploy");
            scope.Start();
            try
            {
                return await RestClient.SelectiveDeployAsync(pipelineId, deployRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deploys the specified items from the source stage of the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="deployRequest"> The selective deploy request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must at least be a contributor on both source and target deployment workspaces. For more information, see [Permissions](/power-bi/create-reports/deployment-pipelines-process#permissions).
        ///
        /// ## Required Scope
        ///
        /// Pipeline.Deploy
        ///
        /// ## Limitations
        ///
        /// Maximum 300 deployed items per request.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<PipelineOperation> SelectiveDeploy(Guid pipelineId, SelectiveDeployRequest deployRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.SelectiveDeploy");
            scope.Start();
            try
            {
                return RestClient.SelectiveDeploy(pipelineId, deployRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of deployment pipelines for the organization. </summary>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `users` and `stages`. </param>
        /// <param name="filter"> Filters the results based on a boolean condition. This API only supports filtering for [orphaned deployment pipelines](#get-orphaned-deployment-pipelines-example). Unsupported filters will return unfiltered results. </param>
        /// <param name="top"> Returns only the first n results. This parameter must be in the range of 1-5000. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 5000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have administrator rights or authenticate using a service principal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<AdminPipelines>> GetPipelinesAsAdminAsync(string expand = null, string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipelinesAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetPipelinesAsAdminAsync(expand, filter, top, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of deployment pipelines for the organization. </summary>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `users` and `stages`. </param>
        /// <param name="filter"> Filters the results based on a boolean condition. This API only supports filtering for [orphaned deployment pipelines](#get-orphaned-deployment-pipelines-example). Unsupported filters will return unfiltered results. </param>
        /// <param name="top"> Returns only the first n results. This parameter must be in the range of 1-5000. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 5000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have administrator rights or authenticate using a service principal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<AdminPipelines> GetPipelinesAsAdmin(string expand = null, string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipelinesAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetPipelinesAsAdmin(expand, filter, top, skip, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to a specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have administrator rights or authenticate using a service principal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<PipelineUsers>> GetPipelineUsersAsAdminAsync(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipelineUsersAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetPipelineUsersAsAdminAsync(pipelineId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to a specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have administrator rights or authenticate using a service principal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<PipelineUsers> GetPipelineUsersAsAdmin(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.GetPipelineUsersAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetPipelineUsersAsAdmin(pipelineId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grants user permissions to a specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have administrator rights.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateUserAsAdminAsync(Guid pipelineId, PipelineUser userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.UpdateUserAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.UpdateUserAsAdminAsync(pipelineId, userDetails, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grants user permissions to a specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have administrator rights.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateUserAsAdmin(Guid pipelineId, PipelineUser userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.UpdateUserAsAdmin");
            scope.Start();
            try
            {
                return RestClient.UpdateUserAsAdmin(pipelineId, userDetails, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes user permissions from a specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="identifier"> For the principal type `User`, provide the user principal name (UPN). Otherwise, provide the [Object ID](/power-bi/developer/embedded/embedded-troubleshoot#what-is-the-difference-between-application-object-id-and-principal-object-id) of the principal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have administrator rights.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> DeleteUserAsAdminAsync(Guid pipelineId, string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.DeleteUserAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.DeleteUserAsAdminAsync(pipelineId, identifier, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes user permissions from a specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="identifier"> For the principal type `User`, provide the user principal name (UPN). Otherwise, provide the [Object ID](/power-bi/developer/embedded/embedded-troubleshoot#what-is-the-difference-between-application-object-id-and-principal-object-id) of the principal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have administrator rights.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response DeleteUserAsAdmin(Guid pipelineId, string identifier, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("PipelinesClient.DeleteUserAsAdmin");
            scope.Start();
            try
            {
                return RestClient.DeleteUserAsAdmin(pipelineId, identifier, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
