// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    /// <summary> The Datasets service client. </summary>
    public partial class DatasetsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal DatasetsRestClient RestClient { get; }

        /// <summary> Initializes a new instance of DatasetsClient for mocking. </summary>
        protected DatasetsClient()
        {
        }

        /// <summary> Initializes a new instance of DatasetsClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public DatasetsClient(TokenCredential credential, Uri endpoint = null, PowerBIClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("https://api.powerbi.com");

            options ??= new PowerBIClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://analysis.windows.net/powerbi/api/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new DatasetsRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of DatasetsClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal DatasetsClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new DatasetsRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Returns a list of datasets from **My workspace**. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Datasets>> GetDatasetsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasets");
            scope.Start();
            try
            {
                return await RestClient.GetDatasetsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of datasets from **My workspace**. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Datasets> GetDatasets(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasets");
            scope.Start();
            try
            {
                return RestClient.GetDatasets(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new dataset on **My workspace**. </summary>
        /// <param name="dataset"> Dataset definition to create. </param>
        /// <param name="defaultRetentionPolicy"> The default retention policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Dataset>> PostDatasetAsync(CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PostDataset");
            scope.Start();
            try
            {
                return await RestClient.PostDatasetAsync(dataset, defaultRetentionPolicy, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new dataset on **My workspace**. </summary>
        /// <param name="dataset"> Dataset definition to create. </param>
        /// <param name="defaultRetentionPolicy"> The default retention policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Dataset> PostDataset(CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PostDataset");
            scope.Start();
            try
            {
                return RestClient.PostDataset(dataset, defaultRetentionPolicy, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Dataset>> GetDatasetAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDataset");
            scope.Start();
            try
            {
                return await RestClient.GetDatasetAsync(datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Dataset> GetDataset(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDataset");
            scope.Start();
            try
            {
                return RestClient.GetDataset(datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the properties for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="updateDatasetRequest"> Update dataset request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateDatasetAsync(string datasetId, UpdateDatasetRequest updateDatasetRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateDataset");
            scope.Start();
            try
            {
                return await RestClient.UpdateDatasetAsync(datasetId, updateDatasetRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the properties for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="updateDatasetRequest"> Update dataset request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateDataset(string datasetId, UpdateDatasetRequest updateDatasetRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateDataset");
            scope.Start();
            try
            {
                return RestClient.UpdateDataset(datasetId, updateDatasetRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> DeleteDatasetAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.DeleteDataset");
            scope.Start();
            try
            {
                return await RestClient.DeleteDatasetAsync(datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response DeleteDataset(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.DeleteDataset");
            scope.Start();
            try
            {
                return RestClient.DeleteDataset(datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Executes Data Analysis Expressions (DAX) queries against the provided dataset. The dataset must reside in **My workspace** or another workspace. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// DAX query errors will result in:
        ///
        /// - A response error, such as `DAX query failure`.
        /// - A failure HTTP status code (400).
        ///
        /// A query that requests more than one table, or more than the allowed number of table rows, will result in:
        ///
        /// - Limited data being returned.
        /// - A response error, such as `More than one result table in a query` or `More than {allowed number} rows in a query result`.
        /// - A successful HTTP status code (200).
        ///
        /// Columns that are fully qualified in the query will be returned with a fully qualified name, for example, `MyTable[MyColumn]`. Columns that are renamed or created in the query will be returned within square bracket, for example, `[MyNewColumn]`.
        ///
        /// ## Permissions
        ///
        /// The tenant setting **Dataset Execute Queries REST API**, found under **Integration settings**, must be enabled.
        ///
        /// The user must have dataset read and build permissions. For more information, see [Manage dataset access permissions](/power-bi/connect-data/service-datasets-manage-access-permissions).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// - Datasets that are hosted in Azure Analysis Services or that have a live connection to an on-premises Azure Analysis Services model aren't supported.
        /// - One query per API call.
        /// - One table request per query.
        /// - Maximum of 100,000 rows or 1,000,000 values per query (whichever is hit first). For example if you query for 5 columns, you can get back max 100,000 rows. If you query for 20 columns, you can get back max 50,000 rows (1 million divided by 20).
        /// - Maximum of 15MB of data per query. Once 15MB is exceeded, the current row will be completed but no additional rows will be written.
        /// - There's a limit of 120 query requests per minute per user, regardless of the dataset that's queried.
        /// - To use Service Principals, make sure the admin tenant setting [_Allow service principals to use Power BI APIs_](/power-bi/admin/service-admin-portal-developer#allow-service-principals-to-use-power-bi-apis) under _Developer settings_ is enabled. However, regardless of the admin tenant setting, Service Principals aren't supported for datasets with RLS per [RLS limitations](/power-bi/admin/service-admin-rls#considerations-and-limitations) or datasets with SSO enabled.
        /// - Only DAX queries are supported at this time. MDX, INFO functions and DMV queries are not supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DatasetExecuteQueriesResponse>> ExecuteQueriesAsync(string datasetId, DatasetExecuteQueriesRequest requestMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.ExecuteQueries");
            scope.Start();
            try
            {
                return await RestClient.ExecuteQueriesAsync(datasetId, requestMessage, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Executes Data Analysis Expressions (DAX) queries against the provided dataset. The dataset must reside in **My workspace** or another workspace. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// DAX query errors will result in:
        ///
        /// - A response error, such as `DAX query failure`.
        /// - A failure HTTP status code (400).
        ///
        /// A query that requests more than one table, or more than the allowed number of table rows, will result in:
        ///
        /// - Limited data being returned.
        /// - A response error, such as `More than one result table in a query` or `More than {allowed number} rows in a query result`.
        /// - A successful HTTP status code (200).
        ///
        /// Columns that are fully qualified in the query will be returned with a fully qualified name, for example, `MyTable[MyColumn]`. Columns that are renamed or created in the query will be returned within square bracket, for example, `[MyNewColumn]`.
        ///
        /// ## Permissions
        ///
        /// The tenant setting **Dataset Execute Queries REST API**, found under **Integration settings**, must be enabled.
        ///
        /// The user must have dataset read and build permissions. For more information, see [Manage dataset access permissions](/power-bi/connect-data/service-datasets-manage-access-permissions).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// - Datasets that are hosted in Azure Analysis Services or that have a live connection to an on-premises Azure Analysis Services model aren't supported.
        /// - One query per API call.
        /// - One table request per query.
        /// - Maximum of 100,000 rows or 1,000,000 values per query (whichever is hit first). For example if you query for 5 columns, you can get back max 100,000 rows. If you query for 20 columns, you can get back max 50,000 rows (1 million divided by 20).
        /// - Maximum of 15MB of data per query. Once 15MB is exceeded, the current row will be completed but no additional rows will be written.
        /// - There's a limit of 120 query requests per minute per user, regardless of the dataset that's queried.
        /// - To use Service Principals, make sure the admin tenant setting [_Allow service principals to use Power BI APIs_](/power-bi/admin/service-admin-portal-developer#allow-service-principals-to-use-power-bi-apis) under _Developer settings_ is enabled. However, regardless of the admin tenant setting, Service Principals aren't supported for datasets with RLS per [RLS limitations](/power-bi/admin/service-admin-rls#considerations-and-limitations) or datasets with SSO enabled.
        /// - Only DAX queries are supported at this time. MDX, INFO functions and DMV queries are not supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DatasetExecuteQueriesResponse> ExecuteQueries(string datasetId, DatasetExecuteQueriesRequest requestMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.ExecuteQueries");
            scope.Start();
            try
            {
                return RestClient.ExecuteQueries(datasetId, requestMessage, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of tables within the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Tables>> GetTablesAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetTables");
            scope.Start();
            try
            {
                return await RestClient.GetTablesAsync(datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of tables within the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Tables> GetTables(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetTables");
            scope.Start();
            try
            {
                return RestClient.GetTables(datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the metadata and schema for the specified table within the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="requestMessage"> Table name and columns to update existing table. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Table>> PutTableAsync(string datasetId, string tableName, Table requestMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PutTable");
            scope.Start();
            try
            {
                return await RestClient.PutTableAsync(datasetId, tableName, requestMessage, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the metadata and schema for the specified table within the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="requestMessage"> Table name and columns to update existing table. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Table> PutTable(string datasetId, string tableName, Table requestMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PutTable");
            scope.Start();
            try
            {
                return RestClient.PutTable(datasetId, tableName, requestMessage, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds new data rows to the specified table within the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - This API call only supports **push datasets**.
        /// - See [Power BI REST API limitations](/power-bi/developer/automation/api-rest-api-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> PostRowsAsync(string datasetId, string tableName, PostRowsRequest requestMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PostRows");
            scope.Start();
            try
            {
                return await RestClient.PostRowsAsync(datasetId, tableName, requestMessage, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds new data rows to the specified table within the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - This API call only supports **push datasets**.
        /// - See [Power BI REST API limitations](/power-bi/developer/automation/api-rest-api-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response PostRows(string datasetId, string tableName, PostRowsRequest requestMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PostRows");
            scope.Start();
            try
            {
                return RestClient.PostRows(datasetId, tableName, requestMessage, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes all rows from the specified table within the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> DeleteRowsAsync(string datasetId, string tableName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.DeleteRows");
            scope.Start();
            try
            {
                return await RestClient.DeleteRowsAsync(datasetId, tableName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes all rows from the specified table within the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response DeleteRows(string datasetId, string tableName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.DeleteRows");
            scope.Start();
            try
            {
                return RestClient.DeleteRows(datasetId, tableName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the refresh history for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="top"> The requested number of entries in the refresh history. If not provided, the default is the last available 60 entries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// OneDrive refresh history isn't returned.
        ///
        /// There are always between 20–60 available refresh history entries for each dataset, depending on the number of refreshes in the last 3 days.
        /// The most recent 60 are kept if they are all less than 3 days old.
        /// Entries more than 3 days old are deleted when there are more than 20 entries.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Refreshes>> GetRefreshHistoryAsync(string datasetId, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetRefreshHistory");
            scope.Start();
            try
            {
                return await RestClient.GetRefreshHistoryAsync(datasetId, top, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the refresh history for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="top"> The requested number of entries in the refresh history. If not provided, the default is the last available 60 entries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// OneDrive refresh history isn't returned.
        ///
        /// There are always between 20–60 available refresh history entries for each dataset, depending on the number of refreshes in the last 3 days.
        /// The most recent 60 are kept if they are all less than 3 days old.
        /// Entries more than 3 days old are deleted when there are more than 20 entries.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Refreshes> GetRefreshHistory(string datasetId, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetRefreshHistory");
            scope.Start();
            try
            {
                return RestClient.GetRefreshHistory(datasetId, top, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a refresh for the specified dataset from **My workspace**. An [enhanced refresh](/power-bi/connect-data/asynchronous-refresh) is triggered only if a request payload other than `notifyOption` is set. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetRefreshRequest"> The <see cref="DatasetRefreshRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - For Shared capacities, a maximum of eight requests per day, including refreshes executed by using scheduled refresh, can be initiated.
        /// - For Shared capacities, only `notifyOption` can be specified in the request body.
        /// - Enhanced refresh is not supported for shared capacities.
        /// - For enhanced refresh, `notifyOption` is not required and must be excluded from the request body. However, one or more parameters other than `notifyOption` are required.
        /// - For Premium capacities, the maximum requests per day is only limited by the available resources in the capacity. If available resources are overloaded, refreshes are throttled until the load is reduced. The refresh will fail if throttling exceeds 1 hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> RefreshDatasetAsync(string datasetId, DatasetRefreshRequest datasetRefreshRequest = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.RefreshDataset");
            scope.Start();
            try
            {
                return (await RestClient.RefreshDatasetAsync(datasetId, datasetRefreshRequest, cancellationToken).ConfigureAwait(false)).GetRawResponse();
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a refresh for the specified dataset from **My workspace**. An [enhanced refresh](/power-bi/connect-data/asynchronous-refresh) is triggered only if a request payload other than `notifyOption` is set. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetRefreshRequest"> The <see cref="DatasetRefreshRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - For Shared capacities, a maximum of eight requests per day, including refreshes executed by using scheduled refresh, can be initiated.
        /// - For Shared capacities, only `notifyOption` can be specified in the request body.
        /// - Enhanced refresh is not supported for shared capacities.
        /// - For enhanced refresh, `notifyOption` is not required and must be excluded from the request body. However, one or more parameters other than `notifyOption` are required.
        /// - For Premium capacities, the maximum requests per day is only limited by the available resources in the capacity. If available resources are overloaded, refreshes are throttled until the load is reduced. The refresh will fail if throttling exceeds 1 hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response RefreshDataset(string datasetId, DatasetRefreshRequest datasetRefreshRequest = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.RefreshDataset");
            scope.Start();
            try
            {
                return RestClient.RefreshDataset(datasetId, datasetRefreshRequest, cancellationToken).GetRawResponse();
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns execution details of an [enhanced refresh operation](/power-bi/connect-data/asynchronous-refresh) for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="refreshId"> The refresh ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DatasetRefreshDetail>> GetRefreshExecutionDetailsAsync(Guid datasetId, Guid refreshId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetRefreshExecutionDetails");
            scope.Start();
            try
            {
                return await RestClient.GetRefreshExecutionDetailsAsync(datasetId, refreshId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns execution details of an [enhanced refresh operation](/power-bi/connect-data/asynchronous-refresh) for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="refreshId"> The refresh ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DatasetRefreshDetail> GetRefreshExecutionDetails(Guid datasetId, Guid refreshId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetRefreshExecutionDetails");
            scope.Start();
            try
            {
                return RestClient.GetRefreshExecutionDetails(datasetId, refreshId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancels the specified refresh operation for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="refreshId"> The refresh ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> CancelRefreshAsync(Guid datasetId, Guid refreshId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.CancelRefresh");
            scope.Start();
            try
            {
                return await RestClient.CancelRefreshAsync(datasetId, refreshId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancels the specified refresh operation for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="refreshId"> The refresh ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response CancelRefresh(Guid datasetId, Guid refreshId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.CancelRefresh");
            scope.Start();
            try
            {
                return RestClient.CancelRefresh(datasetId, refreshId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the refresh schedule for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<RefreshSchedule>> GetRefreshScheduleAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetRefreshSchedule");
            scope.Start();
            try
            {
                return await RestClient.GetRefreshScheduleAsync(datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the refresh schedule for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<RefreshSchedule> GetRefreshSchedule(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetRefreshSchedule");
            scope.Start();
            try
            {
                return RestClient.GetRefreshSchedule(datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the refresh schedule for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetModelRefreshScheduleRequest"> Update Refresh Schedule parameters, by specifying all or some of the parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// A request that disables the refresh schedule should contain no other changes.
        ///
        /// At least one day must be specified. If no times are specified, then Power BI will use a default single time per day.
        ///
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// The limit on the number of time slots per day depends on whether a [Premium](/power-bi/admin/service-premium-what-is) or Shared capacity is used.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateRefreshScheduleAsync(string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateRefreshSchedule");
            scope.Start();
            try
            {
                return await RestClient.UpdateRefreshScheduleAsync(datasetId, datasetModelRefreshScheduleRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the refresh schedule for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetModelRefreshScheduleRequest"> Update Refresh Schedule parameters, by specifying all or some of the parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// A request that disables the refresh schedule should contain no other changes.
        ///
        /// At least one day must be specified. If no times are specified, then Power BI will use a default single time per day.
        ///
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// The limit on the number of time slots per day depends on whether a [Premium](/power-bi/admin/service-premium-what-is) or Shared capacity is used.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateRefreshSchedule(string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateRefreshSchedule");
            scope.Start();
            try
            {
                return RestClient.UpdateRefreshSchedule(datasetId, datasetModelRefreshScheduleRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the refresh schedule for a specified [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections) dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DirectQueryRefreshSchedule>> GetDirectQueryRefreshScheduleAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDirectQueryRefreshSchedule");
            scope.Start();
            try
            {
                return await RestClient.GetDirectQueryRefreshScheduleAsync(datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the refresh schedule for a specified [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections) dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DirectQueryRefreshSchedule> GetDirectQueryRefreshSchedule(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDirectQueryRefreshSchedule");
            scope.Start();
            try
            {
                return RestClient.GetDirectQueryRefreshSchedule(datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the refresh schedule for a specified [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections) dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetDQRefreshScheduleRequest"> Patch DirectQuery or LiveConnection Refresh Schedule parameters, by specifying all or some of the parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// A request should contain either a set of days and times *or* a valid frequency, but not both. If you choose a set of days without specifying any times, then Power BI will use a default single time per day. Setting the frequency will automatically overwrite the days and times setting.
        ///
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateDirectQueryRefreshScheduleAsync(string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateDirectQueryRefreshSchedule");
            scope.Start();
            try
            {
                return await RestClient.UpdateDirectQueryRefreshScheduleAsync(datasetId, datasetDQRefreshScheduleRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the refresh schedule for a specified [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections) dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetDQRefreshScheduleRequest"> Patch DirectQuery or LiveConnection Refresh Schedule parameters, by specifying all or some of the parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// A request should contain either a set of days and times *or* a valid frequency, but not both. If you choose a set of days without specifying any times, then Power BI will use a default single time per day. Setting the frequency will automatically overwrite the days and times setting.
        ///
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateDirectQueryRefreshSchedule(string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateDirectQueryRefreshSchedule");
            scope.Start();
            try
            {
                return RestClient.UpdateDirectQueryRefreshSchedule(datasetId, datasetDQRefreshScheduleRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of parameters for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets with SQL, Oracle, Teradata, and SAP HANA [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections aren't supported.
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<MashupParameters>> GetParametersAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetParameters");
            scope.Start();
            try
            {
                return await RestClient.GetParametersAsync(datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of parameters for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets with SQL, Oracle, Teradata, and SAP HANA [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections aren't supported.
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<MashupParameters> GetParameters(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetParameters");
            scope.Start();
            try
            {
                return RestClient.GetParameters(datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the parameters values for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="updateMashupParametersRequest"> The <see cref="UpdateMashupParametersRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!NOTE]
        /// &gt; We recommend using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with this API call.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset to apply the new parameter values.
        /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes for the update data sources operation to complete, and then refresh the dataset.
        ///
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported. To make changes to those datasets, the admin must use the Azure Analysis Services client library for Tabular Object Model.
        /// - [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections are only supported with [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// - Datasets with Azure Analysis Services live connections aren't supported.
        /// - Maximum of 100 parameters per request.
        /// - All specified parameters must exist in the dataset.
        /// - Parameters values should be of the expected type.
        /// - The parameter list can't be empty or include duplicate parameters.
        /// - Parameters names are case-sensitive.
        /// - Parameter `IsRequired` must have a non-empty value.
        /// - The parameter types `Any` and `Binary` can't be updated.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateParametersAsync(string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateParameters");
            scope.Start();
            try
            {
                return await RestClient.UpdateParametersAsync(datasetId, updateMashupParametersRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the parameters values for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="updateMashupParametersRequest"> The <see cref="UpdateMashupParametersRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!NOTE]
        /// &gt; We recommend using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with this API call.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset to apply the new parameter values.
        /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes for the update data sources operation to complete, and then refresh the dataset.
        ///
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported. To make changes to those datasets, the admin must use the Azure Analysis Services client library for Tabular Object Model.
        /// - [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections are only supported with [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// - Datasets with Azure Analysis Services live connections aren't supported.
        /// - Maximum of 100 parameters per request.
        /// - All specified parameters must exist in the dataset.
        /// - Parameters values should be of the expected type.
        /// - The parameter list can't be empty or include duplicate parameters.
        /// - Parameters names are case-sensitive.
        /// - Parameter `IsRequired` must have a non-empty value.
        /// - The parameter types `Any` and `Binary` can't be updated.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateParameters(string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateParameters");
            scope.Start();
            try
            {
                return RestClient.UpdateParameters(datasetId, updateMashupParametersRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of data sources for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Datasources>> GetDatasourcesAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasources");
            scope.Start();
            try
            {
                return await RestClient.GetDatasourcesAsync(datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of data sources for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Datasources> GetDatasources(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasources");
            scope.Start();
            try
            {
                return RestClient.GetDatasources(datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the data sources of the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="updateDatasourcesRequest"> The <see cref="UpdateDatasourcesRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!NOTE]
        /// &gt; We recommend using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with this API call.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - The original data source and the new data source must have the exact same schema.
        /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset to get data from the new data sources.
        /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes for the update data sources operation to complete, and then refresh the dataset.
        ///
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Limitations
        ///
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported. To make changes to those data sources, the admin must use the Azure Analysis Services client library for Tabular Object Model.
        /// - Only these data sources are supported: SQL Server, Azure SQL Server, Azure Analysis Services, Azure Synapse, OData, SharePoint, Teradata, and SAP HANA. For other data sources, use the [Update Parameters](/rest/api/power-bi/datasets/update-parameters) API call.
        /// - Changing the data source type isn't supported.
        /// - Data sources that contain parameters in the connection string aren't supported.
        /// - Updating data sources that are part of merged or joined tables is only supported if you're using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// - For an Advanced Query that references multiple data sources, only the first data source will be updated. To overcome this limitation, define the data source as a parameter and use the [Update Parameters](/rest/api/power-bi/datasets/update-parameters) API call.
        /// - Datasets with incremental refresh policy are not fully supported, calling this API may not work as expected and result of partial datasources update, to overcome this you can try run a dataset refresh before calling this API.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateDatasourcesAsync(string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateDatasources");
            scope.Start();
            try
            {
                return await RestClient.UpdateDatasourcesAsync(datasetId, updateDatasourcesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the data sources of the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="updateDatasourcesRequest"> The <see cref="UpdateDatasourcesRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!NOTE]
        /// &gt; We recommend using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with this API call.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - The original data source and the new data source must have the exact same schema.
        /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset to get data from the new data sources.
        /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes for the update data sources operation to complete, and then refresh the dataset.
        ///
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Limitations
        ///
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported. To make changes to those data sources, the admin must use the Azure Analysis Services client library for Tabular Object Model.
        /// - Only these data sources are supported: SQL Server, Azure SQL Server, Azure Analysis Services, Azure Synapse, OData, SharePoint, Teradata, and SAP HANA. For other data sources, use the [Update Parameters](/rest/api/power-bi/datasets/update-parameters) API call.
        /// - Changing the data source type isn't supported.
        /// - Data sources that contain parameters in the connection string aren't supported.
        /// - Updating data sources that are part of merged or joined tables is only supported if you're using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// - For an Advanced Query that references multiple data sources, only the first data source will be updated. To overcome this limitation, define the data source as a parameter and use the [Update Parameters](/rest/api/power-bi/datasets/update-parameters) API call.
        /// - Datasets with incremental refresh policy are not fully supported, calling this API may not work as expected and result of partial datasources update, to overcome this you can try run a dataset refresh before calling this API.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateDatasources(string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateDatasources");
            scope.Start();
            try
            {
                return RestClient.UpdateDatasources(datasetId, updateDatasourcesRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates all connections for the specified dataset from **My workspace**. This API call only supports SQL DirectQuery datasets. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="parameters"> The body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is deprecated and no longer supported. This API call isn't compatible with [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// &gt;
        /// &gt; Instead use:
        /// &gt;
        /// &gt; - [Update Parameters](/rest/api/power-bi/datasets/update-parameters) to update connections for SQL, Azure Synapse, OData, and SharePoint data sources.
        /// &gt; - [Update Datasources](/rest/api/power-bi/datasets/update-datasources) to connections for other data sources.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> SetAllDatasetConnectionsAsync(string datasetId, ConnectionDetails parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.SetAllDatasetConnections");
            scope.Start();
            try
            {
                return await RestClient.SetAllDatasetConnectionsAsync(datasetId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates all connections for the specified dataset from **My workspace**. This API call only supports SQL DirectQuery datasets. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="parameters"> The body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is deprecated and no longer supported. This API call isn't compatible with [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// &gt;
        /// &gt; Instead use:
        /// &gt;
        /// &gt; - [Update Parameters](/rest/api/power-bi/datasets/update-parameters) to update connections for SQL, Azure Synapse, OData, and SharePoint data sources.
        /// &gt; - [Update Datasources](/rest/api/power-bi/datasets/update-datasources) to connections for other data sources.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response SetAllDatasetConnections(string datasetId, ConnectionDetails parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.SetAllDatasetConnections");
            scope.Start();
            try
            {
                return RestClient.SetAllDatasetConnections(datasetId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Binds the specified dataset from **My workspace** to the specified gateway, optionally with a given set of data source IDs. If you don't supply a specific data source ID, the dataset will be bound to the first matching data source in the gateway. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="bindToGatewayRequest"> The bind to gateway request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; Add the API caller principal as a data source user on the gateway.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports the on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> BindToGatewayAsync(string datasetId, BindToGatewayRequest bindToGatewayRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.BindToGateway");
            scope.Start();
            try
            {
                return await RestClient.BindToGatewayAsync(datasetId, bindToGatewayRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Binds the specified dataset from **My workspace** to the specified gateway, optionally with a given set of data source IDs. If you don't supply a specific data source ID, the dataset will be bound to the first matching data source in the gateway. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="bindToGatewayRequest"> The bind to gateway request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; Add the API caller principal as a data source user on the gateway.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports the on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response BindToGateway(string datasetId, BindToGatewayRequest bindToGatewayRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.BindToGateway");
            scope.Start();
            try
            {
                return RestClient.BindToGateway(datasetId, bindToGatewayRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of gateway data sources for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is deprecated, use [Get Datasources](/rest/api/power-bi/datasets/get-datasources) instead.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<GatewayDatasources>> GetGatewayDatasourcesAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetGatewayDatasources");
            scope.Start();
            try
            {
                return await RestClient.GetGatewayDatasourcesAsync(datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of gateway data sources for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is deprecated, use [Get Datasources](/rest/api/power-bi/datasets/get-datasources) instead.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<GatewayDatasources> GetGatewayDatasources(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetGatewayDatasources");
            scope.Start();
            try
            {
                return RestClient.GetGatewayDatasources(datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of gateways that the specified dataset from **My workspace** can be bound to. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This API call is only relevant to datasets that have at least one on-premises connection. For datasets with cloud-only connections, this API call returns an empty list.
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Gateways>> DiscoverGatewaysAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.DiscoverGateways");
            scope.Start();
            try
            {
                return await RestClient.DiscoverGatewaysAsync(datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of gateways that the specified dataset from **My workspace** can be bound to. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This API call is only relevant to datasets that have at least one on-premises connection. For datasets with cloud-only connections, this API call returns an empty list.
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Gateways> DiscoverGateways(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.DiscoverGateways");
            scope.Start();
            try
            {
                return RestClient.DiscoverGateways(datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the query scale-out sync status for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DatasetQueryScaleOutSyncStatus>> GetQueryScaleOutSyncStatusAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetQueryScaleOutSyncStatus");
            scope.Start();
            try
            {
                return await RestClient.GetQueryScaleOutSyncStatusAsync(datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the query scale-out sync status for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DatasetQueryScaleOutSyncStatus> GetQueryScaleOutSyncStatus(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetQueryScaleOutSyncStatus");
            scope.Start();
            try
            {
                return RestClient.GetQueryScaleOutSyncStatus(datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a query scale-out sync of read-only replicas for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DatasetQueryScaleOutSyncStatus>> TriggerQueryScaleOutSyncAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.TriggerQueryScaleOutSync");
            scope.Start();
            try
            {
                return await RestClient.TriggerQueryScaleOutSyncAsync(datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a query scale-out sync of read-only replicas for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DatasetQueryScaleOutSyncStatus> TriggerQueryScaleOutSync(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.TriggerQueryScaleOutSync");
            scope.Start();
            try
            {
                return RestClient.TriggerQueryScaleOutSync(datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grants the specified user's permissions to the specified dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        ///
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// ## Limitations
        ///
        /// - Adding permissions to service principals (app principalType) isn't supported
        /// - Caller must have ReadReshare permissions on the dataset.
        /// - This API call can't be used to grant dataset Write permission on the dataset
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> PostDatasetUserInGroupAsync(Guid groupId, string datasetId, PostDatasetUserAccess userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PostDatasetUserInGroup");
            scope.Start();
            try
            {
                return await RestClient.PostDatasetUserInGroupAsync(groupId, datasetId, userDetails, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grants the specified user's permissions to the specified dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        ///
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// ## Limitations
        ///
        /// - Adding permissions to service principals (app principalType) isn't supported
        /// - Caller must have ReadReshare permissions on the dataset.
        /// - This API call can't be used to grant dataset Write permission on the dataset
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response PostDatasetUserInGroup(Guid groupId, string datasetId, PostDatasetUserAccess userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PostDatasetUserInGroup");
            scope.Start();
            try
            {
                return RestClient.PostDatasetUserInGroup(groupId, datasetId, userDetails, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the existing dataset permissions of the specified user to the specified permissions. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// This API call can be used to remove all the dataset permissions of the specified user by using `datasetUserAccessRight: None`
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// ## Permissions
        ///
        /// The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        /// ## Limitations
        ///
        /// - Updating permissions to service principals (app principalType) isn't supported
        /// - Caller must have ReadWriteReshare permissions on the dataset. That is, folder admins, members and contributors with Reshare permissions, or dataset owners.
        /// - This API can't be used to add or remove *write* permission.
        /// - This API can't be used to remove folder-level inherited permissions. For folder admins and members, the ReadWriteReshareExplore permission on the folder's datasets is inherited. For folder contributors, the ReadWriteExplore permission on the folder's datasets is inherited. For folder viewers, the Read permission on the folder's datasets is inherited.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> PutDatasetUserInGroupAsync(Guid groupId, string datasetId, DatasetUserAccess userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PutDatasetUserInGroup");
            scope.Start();
            try
            {
                return await RestClient.PutDatasetUserInGroupAsync(groupId, datasetId, userDetails, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the existing dataset permissions of the specified user to the specified permissions. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// This API call can be used to remove all the dataset permissions of the specified user by using `datasetUserAccessRight: None`
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// ## Permissions
        ///
        /// The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        /// ## Limitations
        ///
        /// - Updating permissions to service principals (app principalType) isn't supported
        /// - Caller must have ReadWriteReshare permissions on the dataset. That is, folder admins, members and contributors with Reshare permissions, or dataset owners.
        /// - This API can't be used to add or remove *write* permission.
        /// - This API can't be used to remove folder-level inherited permissions. For folder admins and members, the ReadWriteReshareExplore permission on the folder's datasets is inherited. For folder contributors, the ReadWriteExplore permission on the folder's datasets is inherited. For folder viewers, the Read permission on the folder's datasets is inherited.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response PutDatasetUserInGroup(Guid groupId, string datasetId, DatasetUserAccess userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PutDatasetUserInGroup");
            scope.Start();
            try
            {
                return RestClient.PutDatasetUserInGroup(groupId, datasetId, userDetails, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of principals that have access to the specified dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        ///
        /// ## Permissions
        ///
        /// The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// ## Limitations
        ///
        /// Caller must have ReadWriteReshare permissions on the dataset. That is, folder admins, members and contributors with Reshare permissions, or dataset owners.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DatasetUsersAccess>> GetDatasetUsersInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetUsersInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetDatasetUsersInGroupAsync(groupId, datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of principals that have access to the specified dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        ///
        /// ## Permissions
        ///
        /// The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// ## Limitations
        ///
        /// Caller must have ReadWriteReshare permissions on the dataset. That is, folder admins, members and contributors with Reshare permissions, or dataset owners.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DatasetUsersAccess> GetDatasetUsersInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetUsersInGroup");
            scope.Start();
            try
            {
                return RestClient.GetDatasetUsersInGroup(groupId, datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grants the specified user's permissions to the specified dataset. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        ///
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// ## Limitations
        ///
        /// - Adding permissions to service principals (app principalType) isn't supported
        /// - Caller must have ReadReshare permissions on the dataset.
        /// - This API call can't be used to grant dataset Write permission on the dataset
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> PostDatasetUserAsync(string datasetId, PostDatasetUserAccess userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PostDatasetUser");
            scope.Start();
            try
            {
                return await RestClient.PostDatasetUserAsync(datasetId, userDetails, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grants the specified user's permissions to the specified dataset. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        ///
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// ## Limitations
        ///
        /// - Adding permissions to service principals (app principalType) isn't supported
        /// - Caller must have ReadReshare permissions on the dataset.
        /// - This API call can't be used to grant dataset Write permission on the dataset
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response PostDatasetUser(string datasetId, PostDatasetUserAccess userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PostDatasetUser");
            scope.Start();
            try
            {
                return RestClient.PostDatasetUser(datasetId, userDetails, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the existing dataset permissions of the specified user to the specified permissions. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// This API call can be used to remove all the dataset permissions of the specified user by using `datasetUserAccessRight: None`
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// ## Permissions
        ///
        /// The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        ///
        /// ## Limitations
        ///
        /// - Updating permissions to service principals (app principalType) isn't supported
        /// - Caller must have ReadWriteReshare permissions on the dataset. That is, folder admins, members and contributors with Reshare permissions, or dataset owners.
        /// - This API can't be used to add or remove *write* permission.
        /// - This API can't be used to remove folder-level inherited permissions. For folder admins and members, the ReadWriteReshareExplore permission on the folder's datasets is inherited. For folder contributors, the ReadWriteExplore permission on the folder's datasets is inherited. For folder viewers, the Read permission on the folder's datasets is inherited.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> PutDatasetUserAsync(string datasetId, DatasetUserAccess userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PutDatasetUser");
            scope.Start();
            try
            {
                return await RestClient.PutDatasetUserAsync(datasetId, userDetails, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the existing dataset permissions of the specified user to the specified permissions. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// This API call can be used to remove all the dataset permissions of the specified user by using `datasetUserAccessRight: None`
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// ## Permissions
        ///
        /// The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        ///
        /// ## Limitations
        ///
        /// - Updating permissions to service principals (app principalType) isn't supported
        /// - Caller must have ReadWriteReshare permissions on the dataset. That is, folder admins, members and contributors with Reshare permissions, or dataset owners.
        /// - This API can't be used to add or remove *write* permission.
        /// - This API can't be used to remove folder-level inherited permissions. For folder admins and members, the ReadWriteReshareExplore permission on the folder's datasets is inherited. For folder contributors, the ReadWriteExplore permission on the folder's datasets is inherited. For folder viewers, the Read permission on the folder's datasets is inherited.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response PutDatasetUser(string datasetId, DatasetUserAccess userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PutDatasetUser");
            scope.Start();
            try
            {
                return RestClient.PutDatasetUser(datasetId, userDetails, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of principals that have access to the specified dataset. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        ///
        /// ## Permissions
        ///
        /// The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// ## Limitations
        ///
        ///  Caller must have ReadWriteReshare permissions on the dataset. That is, folder admins, members and contributors with Reshare permissions, or dataset owners.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DatasetUsersAccess>> GetDatasetUsersAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetUsers");
            scope.Start();
            try
            {
                return await RestClient.GetDatasetUsersAsync(datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of principals that have access to the specified dataset. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        ///
        /// ## Permissions
        ///
        /// The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// ## Limitations
        ///
        ///  Caller must have ReadWriteReshare permissions on the dataset. That is, folder admins, members and contributors with Reshare permissions, or dataset owners.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DatasetUsersAccess> GetDatasetUsers(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetUsers");
            scope.Start();
            try
            {
                return RestClient.GetDatasetUsers(datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of datasets from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Datasets>> GetDatasetsInGroupAsync(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetsInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetDatasetsInGroupAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of datasets from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Datasets> GetDatasetsInGroup(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetsInGroup");
            scope.Start();
            try
            {
                return RestClient.GetDatasetsInGroup(groupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new dataset in the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataset"> Create dataset parameters. </param>
        /// <param name="defaultRetentionPolicy"> The default retention policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Dataset>> PostDatasetInGroupAsync(Guid groupId, CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PostDatasetInGroup");
            scope.Start();
            try
            {
                return await RestClient.PostDatasetInGroupAsync(groupId, dataset, defaultRetentionPolicy, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new dataset in the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataset"> Create dataset parameters. </param>
        /// <param name="defaultRetentionPolicy"> The default retention policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Dataset> PostDatasetInGroup(Guid groupId, CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PostDatasetInGroup");
            scope.Start();
            try
            {
                return RestClient.PostDatasetInGroup(groupId, dataset, defaultRetentionPolicy, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of upstream dataflows for datasets from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DatasetToDataflowLinksResponse>> GetDatasetToDataflowsLinksInGroupAsync(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetToDataflowsLinksInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetDatasetToDataflowsLinksInGroupAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of upstream dataflows for datasets from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DatasetToDataflowLinksResponse> GetDatasetToDataflowsLinksInGroup(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetToDataflowsLinksInGroup");
            scope.Start();
            try
            {
                return RestClient.GetDatasetToDataflowsLinksInGroup(groupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Dataset>> GetDatasetInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetDatasetInGroupAsync(groupId, datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Dataset> GetDatasetInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetInGroup");
            scope.Start();
            try
            {
                return RestClient.GetDatasetInGroup(groupId, datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the properties for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="updateDatasetRequest"> Update dataset request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateDatasetInGroupAsync(Guid groupId, string datasetId, UpdateDatasetRequest updateDatasetRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateDatasetInGroup");
            scope.Start();
            try
            {
                return await RestClient.UpdateDatasetInGroupAsync(groupId, datasetId, updateDatasetRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the properties for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="updateDatasetRequest"> Update dataset request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateDatasetInGroup(Guid groupId, string datasetId, UpdateDatasetRequest updateDatasetRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateDatasetInGroup");
            scope.Start();
            try
            {
                return RestClient.UpdateDatasetInGroup(groupId, datasetId, updateDatasetRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> DeleteDatasetInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.DeleteDatasetInGroup");
            scope.Start();
            try
            {
                return await RestClient.DeleteDatasetInGroupAsync(groupId, datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response DeleteDatasetInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.DeleteDatasetInGroup");
            scope.Start();
            try
            {
                return RestClient.DeleteDatasetInGroup(groupId, datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of tables within the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Tables>> GetTablesInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetTablesInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetTablesInGroupAsync(groupId, datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of tables within the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Tables> GetTablesInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetTablesInGroup");
            scope.Start();
            try
            {
                return RestClient.GetTablesInGroup(groupId, datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the metadata and schema for the specified table within the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Table>> PutTableInGroupAsync(Guid groupId, string datasetId, string tableName, Table requestMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PutTableInGroup");
            scope.Start();
            try
            {
                return await RestClient.PutTableInGroupAsync(groupId, datasetId, tableName, requestMessage, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the metadata and schema for the specified table within the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Table> PutTableInGroup(Guid groupId, string datasetId, string tableName, Table requestMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PutTableInGroup");
            scope.Start();
            try
            {
                return RestClient.PutTableInGroup(groupId, datasetId, tableName, requestMessage, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds new data rows to the specified table within the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - This API call only supports **push datasets**.
        /// - See [Power BI REST API limitations](/power-bi/developer/automation/api-rest-api-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> PostRowsInGroupAsync(Guid groupId, string datasetId, string tableName, PostRowsRequest requestMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PostRowsInGroup");
            scope.Start();
            try
            {
                return await RestClient.PostRowsInGroupAsync(groupId, datasetId, tableName, requestMessage, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds new data rows to the specified table within the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - This API call only supports **push datasets**.
        /// - See [Power BI REST API limitations](/power-bi/developer/automation/api-rest-api-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response PostRowsInGroup(Guid groupId, string datasetId, string tableName, PostRowsRequest requestMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.PostRowsInGroup");
            scope.Start();
            try
            {
                return RestClient.PostRowsInGroup(groupId, datasetId, tableName, requestMessage, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes all rows from the specified table within the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> DeleteRowsInGroupAsync(Guid groupId, string datasetId, string tableName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.DeleteRowsInGroup");
            scope.Start();
            try
            {
                return await RestClient.DeleteRowsInGroupAsync(groupId, datasetId, tableName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes all rows from the specified table within the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response DeleteRowsInGroup(Guid groupId, string datasetId, string tableName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.DeleteRowsInGroup");
            scope.Start();
            try
            {
                return RestClient.DeleteRowsInGroup(groupId, datasetId, tableName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the refresh history for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="top"> The requested number of entries in the refresh history. If not provided, the default is the last available 60 entries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// OneDrive refresh history isn't returned.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Refreshes>> GetRefreshHistoryInGroupAsync(Guid groupId, string datasetId, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetRefreshHistoryInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetRefreshHistoryInGroupAsync(groupId, datasetId, top, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the refresh history for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="top"> The requested number of entries in the refresh history. If not provided, the default is the last available 60 entries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// OneDrive refresh history isn't returned.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Refreshes> GetRefreshHistoryInGroup(Guid groupId, string datasetId, int? top = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetRefreshHistoryInGroup");
            scope.Start();
            try
            {
                return RestClient.GetRefreshHistoryInGroup(groupId, datasetId, top, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a refresh for the specified dataset from the specified workspace. An [enhanced refresh](/power-bi/connect-data/asynchronous-refresh) is triggered only if a request payload other than `notifyOption` is set. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetRefreshRequest"> The <see cref="DatasetRefreshRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - For Shared capacities, a maximum of eight requests per day, including refreshes executed by using scheduled refresh, can be initiated.
        /// - For Shared capacities, only `notifyOption` can be specified in the request body.
        /// - Enhanced refresh is not supported for shared capacities.
        /// - For enhanced refresh, `notifyOption` is not required and must be excluded from the request body. However, one or more parameters other than `notifyOption` are required.
        /// - For Premium capacities, the maximum requests per day is only limited by the available resources in the capacity. If available resources are overloaded, refreshes are throttled until the load is reduced. The refresh will fail if throttling exceeds 1 hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> RefreshDatasetInGroupAsync(Guid groupId, string datasetId, DatasetRefreshRequest datasetRefreshRequest = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.RefreshDatasetInGroup");
            scope.Start();
            try
            {
                return (await RestClient.RefreshDatasetInGroupAsync(groupId, datasetId, datasetRefreshRequest, cancellationToken).ConfigureAwait(false)).GetRawResponse();
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a refresh for the specified dataset from the specified workspace. An [enhanced refresh](/power-bi/connect-data/asynchronous-refresh) is triggered only if a request payload other than `notifyOption` is set. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetRefreshRequest"> The <see cref="DatasetRefreshRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - For Shared capacities, a maximum of eight requests per day, including refreshes executed by using scheduled refresh, can be initiated.
        /// - For Shared capacities, only `notifyOption` can be specified in the request body.
        /// - Enhanced refresh is not supported for shared capacities.
        /// - For enhanced refresh, `notifyOption` is not required and must be excluded from the request body. However, one or more parameters other than `notifyOption` are required.
        /// - For Premium capacities, the maximum requests per day is only limited by the available resources in the capacity. If available resources are overloaded, refreshes are throttled until the load is reduced. The refresh will fail if throttling exceeds 1 hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response RefreshDatasetInGroup(Guid groupId, string datasetId, DatasetRefreshRequest datasetRefreshRequest = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.RefreshDatasetInGroup");
            scope.Start();
            try
            {
                return RestClient.RefreshDatasetInGroup(groupId, datasetId, datasetRefreshRequest, cancellationToken).GetRawResponse();
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns execution details of an [enhanced refresh operation](/power-bi/connect-data/asynchronous-refresh) for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="refreshId"> The refresh ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DatasetRefreshDetail>> GetRefreshExecutionDetailsInGroupAsync(Guid groupId, Guid datasetId, Guid refreshId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetRefreshExecutionDetailsInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetRefreshExecutionDetailsInGroupAsync(groupId, datasetId, refreshId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns execution details of an [enhanced refresh operation](/power-bi/connect-data/asynchronous-refresh) for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="refreshId"> The refresh ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DatasetRefreshDetail> GetRefreshExecutionDetailsInGroup(Guid groupId, Guid datasetId, Guid refreshId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetRefreshExecutionDetailsInGroup");
            scope.Start();
            try
            {
                return RestClient.GetRefreshExecutionDetailsInGroup(groupId, datasetId, refreshId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancels the specified refresh operation for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="refreshId"> The refresh ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> CancelRefreshInGroupAsync(Guid groupId, Guid datasetId, Guid refreshId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.CancelRefreshInGroup");
            scope.Start();
            try
            {
                return await RestClient.CancelRefreshInGroupAsync(groupId, datasetId, refreshId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Cancels the specified refresh operation for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="refreshId"> The refresh ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response CancelRefreshInGroup(Guid groupId, Guid datasetId, Guid refreshId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.CancelRefreshInGroup");
            scope.Start();
            try
            {
                return RestClient.CancelRefreshInGroup(groupId, datasetId, refreshId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the refresh schedule for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<RefreshSchedule>> GetRefreshScheduleInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetRefreshScheduleInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetRefreshScheduleInGroupAsync(groupId, datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the refresh schedule for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<RefreshSchedule> GetRefreshScheduleInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetRefreshScheduleInGroup");
            scope.Start();
            try
            {
                return RestClient.GetRefreshScheduleInGroup(groupId, datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the refresh schedule for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetModelRefreshScheduleRequest"> Update Refresh Schedule parameters, by specifying all or some of the parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// A request that disables the refresh schedule should contain no other changes.
        ///
        /// At least one day must be specified. If no times are specified, then Power BI will use a default single time per day.
        ///
        /// ## Permissions
        ///
        /// - The user must be the dataset owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// The limit on the number of time slots per day depends on whether a [Premium](/power-bi/admin/service-premium-what-is) or Shared capacity is used.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateRefreshScheduleInGroupAsync(Guid groupId, string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateRefreshScheduleInGroup");
            scope.Start();
            try
            {
                return await RestClient.UpdateRefreshScheduleInGroupAsync(groupId, datasetId, datasetModelRefreshScheduleRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the refresh schedule for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetModelRefreshScheduleRequest"> Update Refresh Schedule parameters, by specifying all or some of the parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// A request that disables the refresh schedule should contain no other changes.
        ///
        /// At least one day must be specified. If no times are specified, then Power BI will use a default single time per day.
        ///
        /// ## Permissions
        ///
        /// - The user must be the dataset owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// The limit on the number of time slots per day depends on whether a [Premium](/power-bi/admin/service-premium-what-is) or Shared capacity is used.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateRefreshScheduleInGroup(Guid groupId, string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateRefreshScheduleInGroup");
            scope.Start();
            try
            {
                return RestClient.UpdateRefreshScheduleInGroup(groupId, datasetId, datasetModelRefreshScheduleRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the refresh schedule for a specified [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections) dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DirectQueryRefreshSchedule>> GetDirectQueryRefreshScheduleInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDirectQueryRefreshScheduleInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetDirectQueryRefreshScheduleInGroupAsync(groupId, datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the refresh schedule for a specified [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections) dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DirectQueryRefreshSchedule> GetDirectQueryRefreshScheduleInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDirectQueryRefreshScheduleInGroup");
            scope.Start();
            try
            {
                return RestClient.GetDirectQueryRefreshScheduleInGroup(groupId, datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the refresh schedule for a specified [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections) dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetDQRefreshScheduleRequest"> Patch DirectQuery or LiveConnection Refresh Schedule parameters, by specifying all or some of the parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// A request should contain either a set of days and times *or* a valid frequency, but not both. If you choose a set of days without specifying any times, then Power BI will use a default single time per day. Setting the frequency will automatically overwrite the days and times setting.
        ///
        /// ## Permissions
        ///
        /// - The user must be the dataset owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateDirectQueryRefreshScheduleInGroupAsync(Guid groupId, string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateDirectQueryRefreshScheduleInGroup");
            scope.Start();
            try
            {
                return await RestClient.UpdateDirectQueryRefreshScheduleInGroupAsync(groupId, datasetId, datasetDQRefreshScheduleRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the refresh schedule for a specified [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections) dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetDQRefreshScheduleRequest"> Patch DirectQuery or LiveConnection Refresh Schedule parameters, by specifying all or some of the parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// A request should contain either a set of days and times *or* a valid frequency, but not both. If you choose a set of days without specifying any times, then Power BI will use a default single time per day. Setting the frequency will automatically overwrite the days and times setting.
        ///
        /// ## Permissions
        ///
        /// - The user must be the dataset owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateDirectQueryRefreshScheduleInGroup(Guid groupId, string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateDirectQueryRefreshScheduleInGroup");
            scope.Start();
            try
            {
                return RestClient.UpdateDirectQueryRefreshScheduleInGroup(groupId, datasetId, datasetDQRefreshScheduleRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of parameters for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets with SQL, Oracle, Teradata, and SAP HANA [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections aren't supported.
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<MashupParameters>> GetParametersInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetParametersInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetParametersInGroupAsync(groupId, datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of parameters for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets with SQL, Oracle, Teradata, and SAP HANA [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections aren't supported.
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<MashupParameters> GetParametersInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetParametersInGroup");
            scope.Start();
            try
            {
                return RestClient.GetParametersInGroup(groupId, datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the parameters values for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="updateMashupParametersRequest"> The <see cref="UpdateMashupParametersRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!NOTE]
        /// &gt; We recommend using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with this API call.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset to apply the new parameter values.
        /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes for the update data sources operation to complete, and then refresh the dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must be the dataset owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported. To make changes to those datasets, the admin must use the Azure Analysis Services client library for Tabular Object Model.
        /// - [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections are only supported with [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// - Datasets with Azure Analysis Services live connections aren't supported.
        /// - Maximum of 100 parameters per request.
        /// - All specified parameters must exist in the dataset.
        /// - Parameters values should be of the expected type.
        /// - The parameter list can't be empty or include duplicate parameters.
        /// - Parameters names are case-sensitive.
        /// - Parameter `IsRequired` must have a non-empty value.
        /// - The parameter types `Any` and `Binary` can't be updated.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateParametersInGroupAsync(Guid groupId, string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateParametersInGroup");
            scope.Start();
            try
            {
                return await RestClient.UpdateParametersInGroupAsync(groupId, datasetId, updateMashupParametersRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the parameters values for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="updateMashupParametersRequest"> The <see cref="UpdateMashupParametersRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!NOTE]
        /// &gt; We recommend using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with this API call.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset to apply the new parameter values.
        /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes for the update data sources operation to complete, and then refresh the dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must be the dataset owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported. To make changes to those datasets, the admin must use the Azure Analysis Services client library for Tabular Object Model.
        /// - [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections are only supported with [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// - Datasets with Azure Analysis Services live connections aren't supported.
        /// - Maximum of 100 parameters per request.
        /// - All specified parameters must exist in the dataset.
        /// - Parameters values should be of the expected type.
        /// - The parameter list can't be empty or include duplicate parameters.
        /// - Parameters names are case-sensitive.
        /// - Parameter `IsRequired` must have a non-empty value.
        /// - The parameter types `Any` and `Binary` can't be updated.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateParametersInGroup(Guid groupId, string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateParametersInGroup");
            scope.Start();
            try
            {
                return RestClient.UpdateParametersInGroup(groupId, datasetId, updateMashupParametersRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of data sources for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Datasources>> GetDatasourcesInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasourcesInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetDatasourcesInGroupAsync(groupId, datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of data sources for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Datasources> GetDatasourcesInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasourcesInGroup");
            scope.Start();
            try
            {
                return RestClient.GetDatasourcesInGroup(groupId, datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the data sources of the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="updateDatasourcesRequest"> The <see cref="UpdateDatasourcesRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!NOTE]
        /// &gt; We recommend using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with this API call.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - The original data source and the new data source must have the exact same schema.
        /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset to get data from the new data sources.
        /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes for the update data sources operation to complete, and then refresh the dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must be the dataset owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported. To make changes to those data sources, the admin must use the Azure Analysis Services client library for Tabular Object Model.
        /// - Only these data sources are supported: SQL Server, Azure SQL Server, Azure Analysis Services, Azure Synapse, OData, SharePoint, Teradata, and SAP HANA. For other data sources, use the [Update Parameters In Group](/rest/api/power-bi/datasets/update-parameters-in-group) API call.
        /// - Changing the data source type isn't supported.
        /// - Data sources that contain parameters in the connection string aren't supported.
        /// - Updating data sources that are part of merged or joined tables is only supported if you're using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// - For an Advanced Query that reference multiple data sources, only the first data source will be updated. To overcome this limitation, define the data source as a parameter and use the [Update Parameters In Group](/rest/api/power-bi/datasets/update-parameters-in-group) API call.
        /// - Datasets with incremental refresh policy are not fully supported, calling this API may not work as expected and result of partial datasources update, to overcome this you can try run a dataset refresh before calling this API.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateDatasourcesInGroupAsync(Guid groupId, string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateDatasourcesInGroup");
            scope.Start();
            try
            {
                return await RestClient.UpdateDatasourcesInGroupAsync(groupId, datasetId, updateDatasourcesRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the data sources of the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="updateDatasourcesRequest"> The <see cref="UpdateDatasourcesRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!NOTE]
        /// &gt; We recommend using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with this API call.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - The original data source and the new data source must have the exact same schema.
        /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset to get data from the new data sources.
        /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes for the update data sources operation to complete, and then refresh the dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must be the dataset owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported. To make changes to those data sources, the admin must use the Azure Analysis Services client library for Tabular Object Model.
        /// - Only these data sources are supported: SQL Server, Azure SQL Server, Azure Analysis Services, Azure Synapse, OData, SharePoint, Teradata, and SAP HANA. For other data sources, use the [Update Parameters In Group](/rest/api/power-bi/datasets/update-parameters-in-group) API call.
        /// - Changing the data source type isn't supported.
        /// - Data sources that contain parameters in the connection string aren't supported.
        /// - Updating data sources that are part of merged or joined tables is only supported if you're using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// - For an Advanced Query that reference multiple data sources, only the first data source will be updated. To overcome this limitation, define the data source as a parameter and use the [Update Parameters In Group](/rest/api/power-bi/datasets/update-parameters-in-group) API call.
        /// - Datasets with incremental refresh policy are not fully supported, calling this API may not work as expected and result of partial datasources update, to overcome this you can try run a dataset refresh before calling this API.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateDatasourcesInGroup(Guid groupId, string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.UpdateDatasourcesInGroup");
            scope.Start();
            try
            {
                return RestClient.UpdateDatasourcesInGroup(groupId, datasetId, updateDatasourcesRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates all connections for the specified dataset from the specified workspace. This API call only supports SQL DirectQuery datasets. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="parameters"> The body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is deprecated and no longer supported. This API call isn't compatible with [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// &gt;
        /// &gt; Instead use:
        /// &gt;
        /// &gt; - [Update Parameters In Group](/rest/api/power-bi/datasets/update-parameters-in-group) to update connections for SQL, Azure Synapse, OData, and SharePoint data sources.
        /// &gt; - [Update Datasources In Group](/rest/api/power-bi/datasets/update-datasources-in-group) to connections for other data sources.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Supports SQL DirectQuery datasets.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> SetAllDatasetConnectionsInGroupAsync(Guid groupId, string datasetId, ConnectionDetails parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.SetAllDatasetConnectionsInGroup");
            scope.Start();
            try
            {
                return await RestClient.SetAllDatasetConnectionsInGroupAsync(groupId, datasetId, parameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates all connections for the specified dataset from the specified workspace. This API call only supports SQL DirectQuery datasets. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="parameters"> The body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is deprecated and no longer supported. This API call isn't compatible with [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// &gt;
        /// &gt; Instead use:
        /// &gt;
        /// &gt; - [Update Parameters In Group](/rest/api/power-bi/datasets/update-parameters-in-group) to update connections for SQL, Azure Synapse, OData, and SharePoint data sources.
        /// &gt; - [Update Datasources In Group](/rest/api/power-bi/datasets/update-datasources-in-group) to connections for other data sources.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Supports SQL DirectQuery datasets.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response SetAllDatasetConnectionsInGroup(Guid groupId, string datasetId, ConnectionDetails parameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.SetAllDatasetConnectionsInGroup");
            scope.Start();
            try
            {
                return RestClient.SetAllDatasetConnectionsInGroup(groupId, datasetId, parameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Binds the specified dataset from the specified workspace to the specified gateway, optionally with a given set of data source IDs. If you don't supply a specific data source ID, the dataset will be bound to the first matching data source in the gateway. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="bindToGatewayRequest"> The bind to gateway request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; Add the API caller principal as a data source user on the gateway.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports the on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> BindToGatewayInGroupAsync(Guid groupId, string datasetId, BindToGatewayRequest bindToGatewayRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.BindToGatewayInGroup");
            scope.Start();
            try
            {
                return await RestClient.BindToGatewayInGroupAsync(groupId, datasetId, bindToGatewayRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Binds the specified dataset from the specified workspace to the specified gateway, optionally with a given set of data source IDs. If you don't supply a specific data source ID, the dataset will be bound to the first matching data source in the gateway. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="bindToGatewayRequest"> The bind to gateway request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; Add the API caller principal as a data source user on the gateway.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports the on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response BindToGatewayInGroup(Guid groupId, string datasetId, BindToGatewayRequest bindToGatewayRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.BindToGatewayInGroup");
            scope.Start();
            try
            {
                return RestClient.BindToGatewayInGroup(groupId, datasetId, bindToGatewayRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of gateway data sources for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is deprecated, use [Get Datasources In Group](/rest/api/power-bi/datasets/get-datasources-in-group) instead.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<GatewayDatasources>> GetGatewayDatasourcesInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetGatewayDatasourcesInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetGatewayDatasourcesInGroupAsync(groupId, datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of gateway data sources for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is deprecated, use [Get Datasources In Group](/rest/api/power-bi/datasets/get-datasources-in-group) instead.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<GatewayDatasources> GetGatewayDatasourcesInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetGatewayDatasourcesInGroup");
            scope.Start();
            try
            {
                return RestClient.GetGatewayDatasourcesInGroup(groupId, datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of gateways that the specified dataset from the specified workspace can be bound to. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This API call is only relevant to datasets that have at least one on-premises connection. For datasets with cloud-only connections, this API call returns an empty list.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Gateways>> DiscoverGatewaysInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.DiscoverGatewaysInGroup");
            scope.Start();
            try
            {
                return await RestClient.DiscoverGatewaysInGroupAsync(groupId, datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of gateways that the specified dataset from the specified workspace can be bound to. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This API call is only relevant to datasets that have at least one on-premises connection. For datasets with cloud-only connections, this API call returns an empty list.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Gateways> DiscoverGatewaysInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.DiscoverGatewaysInGroup");
            scope.Start();
            try
            {
                return RestClient.DiscoverGatewaysInGroup(groupId, datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Transfers ownership over the specified dataset to the current authorized user. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> TakeOverInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.TakeOverInGroup");
            scope.Start();
            try
            {
                return await RestClient.TakeOverInGroupAsync(groupId, datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Transfers ownership over the specified dataset to the current authorized user. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response TakeOverInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.TakeOverInGroup");
            scope.Start();
            try
            {
                return RestClient.TakeOverInGroup(groupId, datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Executes Data Analysis Expressions (DAX) queries against the provided dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// DAX query errors will result in:
        ///
        /// - A response error, such as `DAX query failure`.
        /// - A failure HTTP status code (400).
        ///
        /// A query that requests more than one table, or more than the allowed number of table rows, will result in:
        ///
        /// - Limited data being returned.
        /// - A response error, such as `More than one result table in a query` or `More than {allowed number} rows in a query result`.
        /// - A successful HTTP status code (200).
        ///
        /// Columns that are fully qualified in the query will be returned with a fully qualified name, for example, `MyTable[MyColumn]`. Columns that are renamed or created in the query will be returned within square bracket, for example, `[MyNewColumn]`.
        ///
        /// ## Permissions
        ///
        /// The tenant setting **Dataset Execute Queries REST API**, found under **Integration settings**, must be enabled.
        ///
        /// The user must have access to the workspace, and dataset read and build permissions. For more information, see [Manage dataset access permissions](/power-bi/connect-data/service-datasets-manage-access-permissions).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// - Datasets that are hosted in Azure Analysis Services or that have a live connection to an on-premises Azure Analysis Services model aren't supported.
        /// - One query per API call.
        /// - One table request per query.
        /// - Maximum of 100,000 rows or 1,000,000 values per query (whichever is hit first). For example if you query for 5 columns, you can get back max 100,000 rows. If you query for 20 columns, you can get back max 50,000 rows (1 million divided by 20).
        /// - Maximum of 15MB of data per query. Once 15MB is exceeded, the current row will be completed but no additional rows will be written.
        /// - There's a limit of 120 query requests per minute per user, regardless of the dataset that's queried.
        /// - To use Service Principals, make sure the admin tenant setting [_Allow service principals to use Power BI APIs_](/power-bi/admin/service-admin-portal-developer#allow-service-principals-to-use-power-bi-apis) under _Developer settings_ is enabled. However, regardless of the admin tenant setting, Service Principals aren't supported for datasets with RLS per [RLS limitations](/power-bi/admin/service-admin-rls#considerations-and-limitations) or datasets with SSO enabled.
        /// - Only DAX queries are supported at this time. MDX, INFO functions and DMV queries are not supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DatasetExecuteQueriesResponse>> ExecuteQueriesInGroupAsync(Guid groupId, string datasetId, DatasetExecuteQueriesRequest requestMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.ExecuteQueriesInGroup");
            scope.Start();
            try
            {
                return await RestClient.ExecuteQueriesInGroupAsync(groupId, datasetId, requestMessage, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Executes Data Analysis Expressions (DAX) queries against the provided dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// DAX query errors will result in:
        ///
        /// - A response error, such as `DAX query failure`.
        /// - A failure HTTP status code (400).
        ///
        /// A query that requests more than one table, or more than the allowed number of table rows, will result in:
        ///
        /// - Limited data being returned.
        /// - A response error, such as `More than one result table in a query` or `More than {allowed number} rows in a query result`.
        /// - A successful HTTP status code (200).
        ///
        /// Columns that are fully qualified in the query will be returned with a fully qualified name, for example, `MyTable[MyColumn]`. Columns that are renamed or created in the query will be returned within square bracket, for example, `[MyNewColumn]`.
        ///
        /// ## Permissions
        ///
        /// The tenant setting **Dataset Execute Queries REST API**, found under **Integration settings**, must be enabled.
        ///
        /// The user must have access to the workspace, and dataset read and build permissions. For more information, see [Manage dataset access permissions](/power-bi/connect-data/service-datasets-manage-access-permissions).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// - Datasets that are hosted in Azure Analysis Services or that have a live connection to an on-premises Azure Analysis Services model aren't supported.
        /// - One query per API call.
        /// - One table request per query.
        /// - Maximum of 100,000 rows or 1,000,000 values per query (whichever is hit first). For example if you query for 5 columns, you can get back max 100,000 rows. If you query for 20 columns, you can get back max 50,000 rows (1 million divided by 20).
        /// - Maximum of 15MB of data per query. Once 15MB is exceeded, the current row will be completed but no additional rows will be written.
        /// - There's a limit of 120 query requests per minute per user, regardless of the dataset that's queried.
        /// - To use Service Principals, make sure the admin tenant setting [_Allow service principals to use Power BI APIs_](/power-bi/admin/service-admin-portal-developer#allow-service-principals-to-use-power-bi-apis) under _Developer settings_ is enabled. However, regardless of the admin tenant setting, Service Principals aren't supported for datasets with RLS per [RLS limitations](/power-bi/admin/service-admin-rls#considerations-and-limitations) or datasets with SSO enabled.
        /// - Only DAX queries are supported at this time. MDX, INFO functions and DMV queries are not supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DatasetExecuteQueriesResponse> ExecuteQueriesInGroup(Guid groupId, string datasetId, DatasetExecuteQueriesRequest requestMessage, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.ExecuteQueriesInGroup");
            scope.Start();
            try
            {
                return RestClient.ExecuteQueriesInGroup(groupId, datasetId, requestMessage, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the query scale-out sync status for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DatasetQueryScaleOutSyncStatus>> GetQueryScaleOutSyncStatusInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetQueryScaleOutSyncStatusInGroup");
            scope.Start();
            try
            {
                return await RestClient.GetQueryScaleOutSyncStatusInGroupAsync(groupId, datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the query scale-out sync status for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DatasetQueryScaleOutSyncStatus> GetQueryScaleOutSyncStatusInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetQueryScaleOutSyncStatusInGroup");
            scope.Start();
            try
            {
                return RestClient.GetQueryScaleOutSyncStatusInGroup(groupId, datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a query scale-out sync of read-only replicas for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DatasetQueryScaleOutSyncStatus>> TriggerQueryScaleOutSyncInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.TriggerQueryScaleOutSyncInGroup");
            scope.Start();
            try
            {
                return await RestClient.TriggerQueryScaleOutSyncInGroupAsync(groupId, datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers a query scale-out sync of read-only replicas for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DatasetQueryScaleOutSyncStatus> TriggerQueryScaleOutSyncInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.TriggerQueryScaleOutSyncInGroup");
            scope.Start();
            try
            {
                return RestClient.TriggerQueryScaleOutSyncInGroup(groupId, datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generates an embed token based on the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="requestParameters"> Generate token parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!TIP]
        /// &gt; To create embed tokens, it's recommended to use the latest API, [Generate Token](/rest/api/power-bi/embed-token/generate-token). Generate token supports additional functions, such as creating a token for multiple items.
        ///
        /// &gt; [!NOTE]
        /// &gt; An embed token can be used to [embed Q&amp;A](/power-bi/developer/qanda) within your application.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is only relevant to the [embed for your customers](/power-bi/developer/embed-sample-for-customers) scenario. To learn more about using this API, see [Considerations when generating an embed token](/power-bi/developer/embedded/generate-embed-token).
        ///
        /// ## Permissions
        ///
        /// - When using a service principal for authentication, refer to [Embed Power BI content with service principal](/power-bi/developer/embed-service-principal) and [Considerations and limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<EmbedToken>> GenerateTokenInGroupAsync(Guid groupId, string datasetId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GenerateTokenInGroup");
            scope.Start();
            try
            {
                return await RestClient.GenerateTokenInGroupAsync(groupId, datasetId, requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Generates an embed token based on the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="requestParameters"> Generate token parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &gt; [!TIP]
        /// &gt; To create embed tokens, it's recommended to use the latest API, [Generate Token](/rest/api/power-bi/embed-token/generate-token). Generate token supports additional functions, such as creating a token for multiple items.
        ///
        /// &gt; [!NOTE]
        /// &gt; An embed token can be used to [embed Q&amp;A](/power-bi/developer/qanda) within your application.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is only relevant to the [embed for your customers](/power-bi/developer/embed-sample-for-customers) scenario. To learn more about using this API, see [Considerations when generating an embed token](/power-bi/developer/embedded/generate-embed-token).
        ///
        /// ## Permissions
        ///
        /// - When using a service principal for authentication, refer to [Embed Power BI content with service principal](/power-bi/developer/embed-service-principal) and [Considerations and limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<EmbedToken> GenerateTokenInGroup(Guid groupId, string datasetId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GenerateTokenInGroup");
            scope.Start();
            try
            {
                return RestClient.GenerateTokenInGroup(groupId, datasetId, requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of datasets for the organization. </summary>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 50 requests per hour or 5 requests per minute, per tenant.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<AdminDatasets>> GetDatasetsAsAdminAsync(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetsAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetDatasetsAsAdminAsync(filter, top, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of datasets for the organization. </summary>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 50 requests per hour or 5 requests per minute, per tenant.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<AdminDatasets> GetDatasetsAsAdmin(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetsAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetDatasetsAsAdmin(filter, top, skip, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of data sources for the specified dataset. </summary>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 300 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Datasources>> GetDatasourcesAsAdminAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasourcesAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetDatasourcesAsAdminAsync(datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of data sources for the specified dataset. </summary>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 300 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Datasources> GetDatasourcesAsAdmin(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasourcesAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetDatasourcesAsAdmin(datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified dataset. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        /// - The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DatasetUsers>> GetDatasetUsersAsAdminAsync(Guid datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetUsersAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetDatasetUsersAsAdminAsync(datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified dataset. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        /// - The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DatasetUsers> GetDatasetUsersAsAdmin(Guid datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetUsersAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetDatasetUsersAsAdmin(datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of datasets from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="expand"> Expands related entities inline. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<AdminDatasets>> GetDatasetsInGroupAsAdminAsync(Guid groupId, string filter = null, int? top = null, int? skip = null, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetsInGroupAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetDatasetsInGroupAsAdminAsync(groupId, filter, top, skip, expand, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of datasets from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="expand"> Expands related entities inline. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<AdminDatasets> GetDatasetsInGroupAsAdmin(Guid groupId, string filter = null, int? top = null, int? skip = null, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetsInGroupAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetDatasetsInGroupAsAdmin(groupId, filter, top, skip, expand, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of upstream dataflows for datasets from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DatasetToDataflowLinksResponse>> GetDatasetToDataflowsLinksInGroupAsAdminAsync(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetToDataflowsLinksInGroupAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetDatasetToDataflowsLinksInGroupAsAdminAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of upstream dataflows for datasets from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DatasetToDataflowLinksResponse> GetDatasetToDataflowsLinksInGroupAsAdmin(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("DatasetsClient.GetDatasetToDataflowsLinksInGroupAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetDatasetToDataflowsLinksInGroupAsAdmin(groupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
