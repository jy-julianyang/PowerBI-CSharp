// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    /// <summary> The Capacities service client. </summary>
    public partial class CapacitiesClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal CapacitiesRestClient RestClient { get; }

        /// <summary> Initializes a new instance of CapacitiesClient for mocking. </summary>
        protected CapacitiesClient()
        {
        }

        /// <summary> Initializes a new instance of CapacitiesClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public CapacitiesClient(TokenCredential credential, Uri endpoint = null, PowerBIClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("https://api.powerbi.com");

            options ??= new PowerBIClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://analysis.windows.net/powerbi/api/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new CapacitiesRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of CapacitiesClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal CapacitiesClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new CapacitiesRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Returns a list of capacities that the user has access to. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy). The profile creator must have capacity permissions.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Capacities>> GetCapacitiesAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.GetCapacities");
            scope.Start();
            try
            {
                return await RestClient.GetCapacitiesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of capacities that the user has access to. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy). The profile creator must have capacity permissions.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Capacities> GetCapacities(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.GetCapacities");
            scope.Start();
            try
            {
                return RestClient.GetCapacities(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the current state of the specified capacity workloads. If a workload is enabled, the percentage of maximum memory that the workload can consume is also returned. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Workload APIs aren't relevant for [Gen2](/power-bi/developer/embedded/power-bi-embedded-generation-2) capacities.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Workloads>> GetWorkloadsAsync(Guid capacityId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.GetWorkloads");
            scope.Start();
            try
            {
                return await RestClient.GetWorkloadsAsync(capacityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the current state of the specified capacity workloads. If a workload is enabled, the percentage of maximum memory that the workload can consume is also returned. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Workload APIs aren't relevant for [Gen2](/power-bi/developer/embedded/power-bi-embedded-generation-2) capacities.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Workloads> GetWorkloads(Guid capacityId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.GetWorkloads");
            scope.Start();
            try
            {
                return RestClient.GetWorkloads(capacityId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the current state of a workload. If the workload is enabled, the percentage of maximum memory that the workload can consume is also returned. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="workloadName"> The name of the workload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Workload APIs aren't relevant for [Gen2](/power-bi/developer/embedded/power-bi-embedded-generation-2) capacities.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Workload>> GetWorkloadAsync(Guid capacityId, string workloadName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.GetWorkload");
            scope.Start();
            try
            {
                return await RestClient.GetWorkloadAsync(capacityId, workloadName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the current state of a workload. If the workload is enabled, the percentage of maximum memory that the workload can consume is also returned. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="workloadName"> The name of the workload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Workload APIs aren't relevant for [Gen2](/power-bi/developer/embedded/power-bi-embedded-generation-2) capacities.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Workload> GetWorkload(Guid capacityId, string workloadName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.GetWorkload");
            scope.Start();
            try
            {
                return RestClient.GetWorkload(capacityId, workloadName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Changes the state of a specific workload to *Enabled* or *Disabled*. When enabling a workload, specify the percentage of maximum memory that the workload can consume. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="workloadName"> The name of the workload. </param>
        /// <param name="workload"> Patch workload parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Workload APIs aren't relevant for [Gen2](/power-bi/developer/embedded/power-bi-embedded-generation-2) capacities.
        ///
        /// ## Required Scope
        ///
        /// Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> PatchWorkloadAsync(Guid capacityId, string workloadName, PatchWorkloadRequest workload, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.PatchWorkload");
            scope.Start();
            try
            {
                return await RestClient.PatchWorkloadAsync(capacityId, workloadName, workload, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Changes the state of a specific workload to *Enabled* or *Disabled*. When enabling a workload, specify the percentage of maximum memory that the workload can consume. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="workloadName"> The name of the workload. </param>
        /// <param name="workload"> Patch workload parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Workload APIs aren't relevant for [Gen2](/power-bi/developer/embedded/power-bi-embedded-generation-2) capacities.
        ///
        /// ## Required Scope
        ///
        /// Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response PatchWorkload(Guid capacityId, string workloadName, PatchWorkloadRequest workload, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.PatchWorkload");
            scope.Start();
            try
            {
                return RestClient.PatchWorkload(capacityId, workloadName, workload, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of refreshables for all capacities that the user has access to. </summary>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacity` and `group`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Refreshables>> GetRefreshablesAsync(int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.GetRefreshables");
            scope.Start();
            try
            {
                return await RestClient.GetRefreshablesAsync(top, expand, filter, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of refreshables for all capacities that the user has access to. </summary>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacity` and `group`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Refreshables> GetRefreshables(int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.GetRefreshables");
            scope.Start();
            try
            {
                return RestClient.GetRefreshables(top, expand, filter, skip, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of refreshables for the specified capacity that the user has access to. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Refreshables>> GetRefreshablesForCapacityAsync(Guid capacityId, int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.GetRefreshablesForCapacity");
            scope.Start();
            try
            {
                return await RestClient.GetRefreshablesForCapacityAsync(capacityId, top, expand, filter, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of refreshables for the specified capacity that the user has access to. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Refreshables> GetRefreshablesForCapacity(Guid capacityId, int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.GetRefreshablesForCapacity");
            scope.Start();
            try
            {
                return RestClient.GetRefreshablesForCapacity(capacityId, top, expand, filter, skip, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified refreshable for the specified capacity that the user has access to. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="refreshableId"> The refreshable ID. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Refreshables>> GetRefreshableForCapacityAsync(Guid capacityId, string refreshableId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.GetRefreshableForCapacity");
            scope.Start();
            try
            {
                return await RestClient.GetRefreshableForCapacityAsync(capacityId, refreshableId, expand, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified refreshable for the specified capacity that the user has access to. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="refreshableId"> The refreshable ID. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Required Scope
        ///
        /// Capacity.Read.All or Capacity.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Refreshables> GetRefreshableForCapacity(Guid capacityId, string refreshableId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.GetRefreshableForCapacity");
            scope.Start();
            try
            {
                return RestClient.GetRefreshableForCapacity(capacityId, refreshableId, expand, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Assigns the specified workspaces to the specified Premium capacity. </summary>
        /// <param name="requestParameters"> Admin assign workspaces capacity parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual async Task<Response> AssignWorkspacesToCapacityAsync(AssignWorkspacesToCapacityRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.AssignWorkspacesToCapacity");
            scope.Start();
            try
            {
                return await RestClient.AssignWorkspacesToCapacityAsync(requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Assigns the specified workspaces to the specified Premium capacity. </summary>
        /// <param name="requestParameters"> Admin assign workspaces capacity parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual Response AssignWorkspacesToCapacity(AssignWorkspacesToCapacityRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.AssignWorkspacesToCapacity");
            scope.Start();
            try
            {
                return RestClient.AssignWorkspacesToCapacity(requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Unassigns the specified workspaces from capacity. </summary>
        /// <param name="requestParameters"> Admin assign workspaces to shared capacity parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual async Task<Response> UnassignWorkspacesFromCapacityAsync(UnassignWorkspacesCapacityRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.UnassignWorkspacesFromCapacity");
            scope.Start();
            try
            {
                return await RestClient.UnassignWorkspacesFromCapacityAsync(requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Unassigns the specified workspaces from capacity. </summary>
        /// <param name="requestParameters"> Admin assign workspaces to shared capacity parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual Response UnassignWorkspacesFromCapacity(UnassignWorkspacesCapacityRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.UnassignWorkspacesFromCapacity");
            scope.Start();
            try
            {
                return RestClient.UnassignWorkspacesFromCapacity(requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified workspace. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual async Task<Response<CapacityUsers>> GetCapacityUsersAsAdminAsync(Guid capacityId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.GetCapacityUsersAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetCapacityUsersAsAdminAsync(capacityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified workspace. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual Response<CapacityUsers> GetCapacityUsersAsAdmin(Guid capacityId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("CapacitiesClient.GetCapacityUsersAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetCapacityUsersAsAdmin(capacityId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
