// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Microsoft.PowerBI.Api.Models
{
    internal static partial class DatamartStatusExtensions
    {
        public static string ToSerialString(this DatamartStatus value) => value switch
        {
            DatamartStatus.Invalid => "Invalid",
            DatamartStatus.Available => "Available",
            DatamartStatus.SuspendedInCriticalPhase => "SuspendedInCriticalPhase",
            DatamartStatus.InProgress => "InProgress",
            DatamartStatus.Error => "Error",
            DatamartStatus.OutOfRegion => "OutOfRegion",
            DatamartStatus.NoCapacity => "NoCapacity",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DatamartStatus value.")
        };

        public static DatamartStatus ToDatamartStatus(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Invalid")) return DatamartStatus.Invalid;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Available")) return DatamartStatus.Available;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "SuspendedInCriticalPhase")) return DatamartStatus.SuspendedInCriticalPhase;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "InProgress")) return DatamartStatus.InProgress;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Error")) return DatamartStatus.Error;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "OutOfRegion")) return DatamartStatus.OutOfRegion;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "NoCapacity")) return DatamartStatus.NoCapacity;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DatamartStatus value.");
        }
    }
}
