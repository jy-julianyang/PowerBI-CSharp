// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Microsoft.PowerBI.Api.Models
{
    internal static partial class CapacityStateExtensions
    {
        public static string ToSerialString(this CapacityState value) => value switch
        {
            CapacityState.NotActivated => "NotActivated",
            CapacityState.Active => "Active",
            CapacityState.Provisioning => "Provisioning",
            CapacityState.ProvisionFailed => "ProvisionFailed",
            CapacityState.Suspended => "Suspended",
            CapacityState.PreSuspended => "PreSuspended",
            CapacityState.Deleting => "Deleting",
            CapacityState.Deleted => "Deleted",
            CapacityState.Invalid => "Invalid",
            CapacityState.UpdatingSku => "UpdatingSku",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown CapacityState value.")
        };

        public static CapacityState ToCapacityState(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "NotActivated")) return CapacityState.NotActivated;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Active")) return CapacityState.Active;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Provisioning")) return CapacityState.Provisioning;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ProvisionFailed")) return CapacityState.ProvisionFailed;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Suspended")) return CapacityState.Suspended;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "PreSuspended")) return CapacityState.PreSuspended;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Deleting")) return CapacityState.Deleting;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Deleted")) return CapacityState.Deleted;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Invalid")) return CapacityState.Invalid;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "UpdatingSku")) return CapacityState.UpdatingSku;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown CapacityState value.");
        }
    }
}
