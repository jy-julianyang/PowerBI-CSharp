// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.PowerBI.Api.Models
{
    /// <summary> The default dataset storage format in the group. </summary>
    public readonly partial struct DefaultDatasetStorageFormat : IEquatable<DefaultDatasetStorageFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DefaultDatasetStorageFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DefaultDatasetStorageFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SmallValue = "Small";
        private const string LargeValue = "Large";

        /// <summary> Small dataset storage format. </summary>
        public static DefaultDatasetStorageFormat Small { get; } = new DefaultDatasetStorageFormat(SmallValue);
        /// <summary> Large dataset storage format. </summary>
        public static DefaultDatasetStorageFormat Large { get; } = new DefaultDatasetStorageFormat(LargeValue);
        /// <summary> Determines if two <see cref="DefaultDatasetStorageFormat"/> values are the same. </summary>
        public static bool operator ==(DefaultDatasetStorageFormat left, DefaultDatasetStorageFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DefaultDatasetStorageFormat"/> values are not the same. </summary>
        public static bool operator !=(DefaultDatasetStorageFormat left, DefaultDatasetStorageFormat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DefaultDatasetStorageFormat"/>. </summary>
        public static implicit operator DefaultDatasetStorageFormat(string value) => new DefaultDatasetStorageFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DefaultDatasetStorageFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DefaultDatasetStorageFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
