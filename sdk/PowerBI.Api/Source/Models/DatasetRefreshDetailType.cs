// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.PowerBI.Api.Models
{
    /// <summary> The type of processing to perform. </summary>
    public readonly partial struct DatasetRefreshDetailType : IEquatable<DatasetRefreshDetailType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DatasetRefreshDetailType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DatasetRefreshDetailType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FullValue = "Full";
        private const string ClearValuesValue = "ClearValues";
        private const string CalculateValue = "Calculate";
        private const string DataOnlyValue = "DataOnly";
        private const string AutomaticValue = "Automatic";
        private const string DefragmentValue = "Defragment";

        /// <summary> For all partitions in the specified partition, table, or database, refresh data and recalculate all dependents. For a calculation partition, recalculate the partition and all its dependents. </summary>
        public static DatasetRefreshDetailType Full { get; } = new DatasetRefreshDetailType(FullValue);
        /// <summary> Clear values in this object and all its dependents. </summary>
        public static DatasetRefreshDetailType ClearValues { get; } = new DatasetRefreshDetailType(ClearValuesValue);
        /// <summary> Recalculate this object and all its dependents, but only if needed. This value doesn't force recalculation, except for volatile formulas. </summary>
        public static DatasetRefreshDetailType Calculate { get; } = new DatasetRefreshDetailType(CalculateValue);
        /// <summary> Refresh data in this object and clear all dependents. </summary>
        public static DatasetRefreshDetailType DataOnly { get; } = new DatasetRefreshDetailType(DataOnlyValue);
        /// <summary> If the object needs to be refreshed and recalculated, refresh and recalculate the object and all its dependents. Applies if the partition is in a state other than Ready. </summary>
        public static DatasetRefreshDetailType Automatic { get; } = new DatasetRefreshDetailType(AutomaticValue);
        /// <summary> Defragment the data in the specified table. As data is added to or removed from a table, the dictionaries of each column can become polluted with values that no longer exist in the actual column values. The defragment option will clean up the values in the dictionaries that are no longer used. </summary>
        public static DatasetRefreshDetailType Defragment { get; } = new DatasetRefreshDetailType(DefragmentValue);
        /// <summary> Determines if two <see cref="DatasetRefreshDetailType"/> values are the same. </summary>
        public static bool operator ==(DatasetRefreshDetailType left, DatasetRefreshDetailType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DatasetRefreshDetailType"/> values are not the same. </summary>
        public static bool operator !=(DatasetRefreshDetailType left, DatasetRefreshDetailType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DatasetRefreshDetailType"/>. </summary>
        public static implicit operator DatasetRefreshDetailType(string value) => new DatasetRefreshDetailType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DatasetRefreshDetailType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DatasetRefreshDetailType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
