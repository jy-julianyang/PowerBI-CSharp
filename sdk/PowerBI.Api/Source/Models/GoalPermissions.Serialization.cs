// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Microsoft.PowerBI.Api.Models
{
    internal static partial class GoalPermissionsExtensions
    {
        public static string ToSerialString(this GoalPermissions value) => value switch
        {
            GoalPermissions.None => "None",
            GoalPermissions.View => "View",
            GoalPermissions.UpdateCurrentValue => "UpdateCurrentValue",
            GoalPermissions.UpdateTargetValue => "UpdateTargetValue",
            GoalPermissions.UpdateNotes => "UpdateNotes",
            GoalPermissions.UpdateStatus => "UpdateStatus",
            GoalPermissions.UpdateValues => "UpdateValues",
            GoalPermissions.All => "All",
            GoalPermissions.UpdateCurrentValueAndNotes => "11",
            GoalPermissions.UpdateTargetValueAndNotes => "13",
            GoalPermissions.UpdateCurrentValueAndTargetValueAndNotes => "15",
            GoalPermissions.UpdateCurrentValueAndStatus => "19",
            GoalPermissions.UpdateTargetValueAndStatus => "21",
            GoalPermissions.UpdateCurrentValueAndTargetValueAndStatus => "23",
            GoalPermissions.UpdateNotesAndStatus => "25",
            GoalPermissions.UpdateCurrentValueAndNotesAndStatus => "27",
            GoalPermissions.UpdateTargetValueAndNotesAndStatus => "29",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown GoalPermissions value.")
        };

        public static GoalPermissions ToGoalPermissions(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "None")) return GoalPermissions.None;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "View")) return GoalPermissions.View;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "UpdateCurrentValue")) return GoalPermissions.UpdateCurrentValue;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "UpdateTargetValue")) return GoalPermissions.UpdateTargetValue;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "UpdateNotes")) return GoalPermissions.UpdateNotes;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "UpdateStatus")) return GoalPermissions.UpdateStatus;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "UpdateValues")) return GoalPermissions.UpdateValues;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "All")) return GoalPermissions.All;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "11")) return GoalPermissions.UpdateCurrentValueAndNotes;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "13")) return GoalPermissions.UpdateTargetValueAndNotes;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "15")) return GoalPermissions.UpdateCurrentValueAndTargetValueAndNotes;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "19")) return GoalPermissions.UpdateCurrentValueAndStatus;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "21")) return GoalPermissions.UpdateTargetValueAndStatus;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "23")) return GoalPermissions.UpdateCurrentValueAndTargetValueAndStatus;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "25")) return GoalPermissions.UpdateNotesAndStatus;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "27")) return GoalPermissions.UpdateCurrentValueAndNotesAndStatus;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "29")) return GoalPermissions.UpdateTargetValueAndNotesAndStatus;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown GoalPermissions value.");
        }
    }
}
