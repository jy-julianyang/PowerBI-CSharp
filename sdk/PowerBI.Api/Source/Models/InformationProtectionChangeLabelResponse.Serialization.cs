// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;

namespace Microsoft.PowerBI.Api.Models
{
    public partial class InformationProtectionChangeLabelResponse
    {
        internal static InformationProtectionChangeLabelResponse DeserializeInformationProtectionChangeLabelResponse(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IReadOnlyList<ChangeLabelStatus> dashboards = default;
            IReadOnlyList<ChangeLabelStatus> reports = default;
            IReadOnlyList<ChangeLabelStatus> dataflows = default;
            IReadOnlyList<ChangeLabelStatus> datasets = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dashboards"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ChangeLabelStatus> array = new List<ChangeLabelStatus>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ChangeLabelStatus.DeserializeChangeLabelStatus(item));
                    }
                    dashboards = array;
                    continue;
                }
                if (property.NameEquals("reports"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ChangeLabelStatus> array = new List<ChangeLabelStatus>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ChangeLabelStatus.DeserializeChangeLabelStatus(item));
                    }
                    reports = array;
                    continue;
                }
                if (property.NameEquals("dataflows"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ChangeLabelStatus> array = new List<ChangeLabelStatus>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ChangeLabelStatus.DeserializeChangeLabelStatus(item));
                    }
                    dataflows = array;
                    continue;
                }
                if (property.NameEquals("datasets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ChangeLabelStatus> array = new List<ChangeLabelStatus>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ChangeLabelStatus.DeserializeChangeLabelStatus(item));
                    }
                    datasets = array;
                    continue;
                }
            }
            return new InformationProtectionChangeLabelResponse(dashboards ?? new ChangeTrackingList<ChangeLabelStatus>(), reports ?? new ChangeTrackingList<ChangeLabelStatus>(), dataflows ?? new ChangeTrackingList<ChangeLabelStatus>(), datasets ?? new ChangeTrackingList<ChangeLabelStatus>());
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static InformationProtectionChangeLabelResponse FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeInformationProtectionChangeLabelResponse(document.RootElement);
        }
    }
}
