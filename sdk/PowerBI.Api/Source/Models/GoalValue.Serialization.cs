// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Microsoft.PowerBI.Api.Models
{
    public partial class GoalValue : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Timestamp))
            {
                writer.WritePropertyName("timestamp"u8);
                writer.WriteStringValue(Timestamp.Value, "O");
            }
            if (Optional.IsDefined(GoalId))
            {
                writer.WritePropertyName("goalId"u8);
                writer.WriteStringValue(GoalId.Value);
            }
            if (Optional.IsDefined(ScorecardId))
            {
                writer.WritePropertyName("scorecardId"u8);
                writer.WriteStringValue(ScorecardId.Value);
            }
            if (Optional.IsDefined(CreatedTime))
            {
                writer.WritePropertyName("createdTime"u8);
                writer.WriteStringValue(CreatedTime.Value, "O");
            }
            if (Optional.IsDefined(LastModifiedTime))
            {
                writer.WritePropertyName("lastModifiedTime"u8);
                writer.WriteStringValue(LastModifiedTime.Value, "O");
            }
            if (Optional.IsDefined(Value))
            {
                writer.WritePropertyName("value"u8);
                writer.WriteNumberValue(Value.Value);
            }
            if (Optional.IsDefined(Target))
            {
                writer.WritePropertyName("target"u8);
                writer.WriteNumberValue(Target.Value);
            }
            if (Optional.IsDefined(ValueDisplayString))
            {
                writer.WritePropertyName("valueDisplayString"u8);
                writer.WriteStringValue(ValueDisplayString);
            }
            if (Optional.IsDefined(TargetDisplayString))
            {
                writer.WritePropertyName("targetDisplayString"u8);
                writer.WriteStringValue(TargetDisplayString);
            }
            if (Optional.IsDefined(Trend))
            {
                writer.WritePropertyName("trend"u8);
                writer.WriteNumberValue(Trend.Value);
            }
            if (Optional.IsDefined(Forecast))
            {
                writer.WritePropertyName("forecast"u8);
                writer.WriteNumberValue(Forecast.Value);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteNumberValue(Status.Value);
            }
            if (Optional.IsCollectionDefined(Notes))
            {
                writer.WritePropertyName("notes"u8);
                writer.WriteStartArray();
                foreach (var item in Notes)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static GoalValue DeserializeGoalValue(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DateTimeOffset? timestamp = default;
            Guid? goalId = default;
            Guid? scorecardId = default;
            DateTimeOffset? createdTime = default;
            DateTimeOffset? lastModifiedTime = default;
            double? value = default;
            double? target = default;
            string valueDisplayString = default;
            string targetDisplayString = default;
            int? trend = default;
            double? forecast = default;
            int? status = default;
            IList<GoalNote> notes = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("timestamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    timestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("goalId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    goalId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("scorecardId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scorecardId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("createdTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastModifiedTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastModifiedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("value"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    value = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("target"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    target = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("valueDisplayString"u8))
                {
                    valueDisplayString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetDisplayString"u8))
                {
                    targetDisplayString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("trend"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    trend = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("forecast"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    forecast = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("notes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<GoalNote> array = new List<GoalNote>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(GoalNote.DeserializeGoalNote(item));
                    }
                    notes = array;
                    continue;
                }
            }
            return new GoalValue(
                timestamp,
                goalId,
                scorecardId,
                createdTime,
                lastModifiedTime,
                value,
                target,
                valueDisplayString,
                targetDisplayString,
                trend,
                forecast,
                status,
                notes ?? new ChangeTrackingList<GoalNote>());
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static GoalValue FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeGoalValue(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
