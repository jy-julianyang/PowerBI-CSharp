// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Microsoft.PowerBI.Api.Models
{
    public partial class RefreshSchedule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Days))
            {
                writer.WritePropertyName("days"u8);
                writer.WriteStartArray();
                foreach (var item in Days)
                {
                    writer.WriteStringValue(item.ToSerialString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Times))
            {
                writer.WritePropertyName("times"u8);
                writer.WriteStartArray();
                foreach (var item in Times)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(Enabled))
            {
                writer.WritePropertyName("enabled"u8);
                writer.WriteBooleanValue(Enabled.Value);
            }
            if (Optional.IsDefined(LocalTimeZoneId))
            {
                writer.WritePropertyName("localTimeZoneId"u8);
                writer.WriteStringValue(LocalTimeZoneId);
            }
            if (Optional.IsDefined(NotifyOption))
            {
                writer.WritePropertyName("notifyOption"u8);
                writer.WriteStringValue(NotifyOption.Value.ToSerialString());
            }
            writer.WriteEndObject();
        }

        internal static RefreshSchedule DeserializeRefreshSchedule(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<Days> days = default;
            IList<string> times = default;
            bool? enabled = default;
            string localTimeZoneId = default;
            ScheduleNotifyOption? notifyOption = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("days"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Days> array = new List<Days>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString().ToDays());
                    }
                    days = array;
                    continue;
                }
                if (property.NameEquals("times"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    times = array;
                    continue;
                }
                if (property.NameEquals("enabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("localTimeZoneId"u8))
                {
                    localTimeZoneId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("notifyOption"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    notifyOption = property.Value.GetString().ToScheduleNotifyOption();
                    continue;
                }
            }
            return new RefreshSchedule(days ?? new ChangeTrackingList<Days>(), times ?? new ChangeTrackingList<string>(), enabled, localTimeZoneId, notifyOption);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static RefreshSchedule FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeRefreshSchedule(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
