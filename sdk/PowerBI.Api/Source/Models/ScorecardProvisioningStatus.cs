// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.PowerBI.Api.Models
{
    /// <summary> The provisioning status of the scorecard. </summary>
    public readonly partial struct ScorecardProvisioningStatus : IEquatable<ScorecardProvisioningStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ScorecardProvisioningStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ScorecardProvisioningStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InitializedValue = "Initialized";
        private const string CompletedValue = "Completed";
        private const string FailedValue = "Failed";
        private const string DeprovisioningValue = "Deprovisioning";
        private const string DeletedValue = "Deleted";

        /// <summary> Initialized. </summary>
        public static ScorecardProvisioningStatus Initialized { get; } = new ScorecardProvisioningStatus(InitializedValue);
        /// <summary> Completed. </summary>
        public static ScorecardProvisioningStatus Completed { get; } = new ScorecardProvisioningStatus(CompletedValue);
        /// <summary> Failed. </summary>
        public static ScorecardProvisioningStatus Failed { get; } = new ScorecardProvisioningStatus(FailedValue);
        /// <summary> Deprovisioning. </summary>
        public static ScorecardProvisioningStatus Deprovisioning { get; } = new ScorecardProvisioningStatus(DeprovisioningValue);
        /// <summary> Deleted. </summary>
        public static ScorecardProvisioningStatus Deleted { get; } = new ScorecardProvisioningStatus(DeletedValue);
        /// <summary> Determines if two <see cref="ScorecardProvisioningStatus"/> values are the same. </summary>
        public static bool operator ==(ScorecardProvisioningStatus left, ScorecardProvisioningStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ScorecardProvisioningStatus"/> values are not the same. </summary>
        public static bool operator !=(ScorecardProvisioningStatus left, ScorecardProvisioningStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ScorecardProvisioningStatus"/>. </summary>
        public static implicit operator ScorecardProvisioningStatus(string value) => new ScorecardProvisioningStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ScorecardProvisioningStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ScorecardProvisioningStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
