// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;

namespace Microsoft.PowerBI.Api.Models
{
    /// <summary> The export to file configuration for a paginated report. </summary>
    public partial class PaginatedReportExportConfiguration
    {
        /// <summary> Initializes a new instance of <see cref="PaginatedReportExportConfiguration"/>. </summary>
        public PaginatedReportExportConfiguration()
        {
            Identities = new ChangeTrackingList<EffectiveIdentity>();
            FormatSettings = new ChangeTrackingDictionary<string, string>();
            ParameterValues = new ChangeTrackingList<ParameterValue>();
        }

        /// <summary> Initializes a new instance of <see cref="PaginatedReportExportConfiguration"/>. </summary>
        /// <param name="identities"> The single identity to use when exporting a report. Required when a report uses a Power BI dataset or an Azure Analysis Services data source. </param>
        /// <param name="formatSettings"> A dictionary of format settings. The keys are the device information property names for the requested file format. </param>
        /// <param name="parameterValues"> A list of report parameters. </param>
        internal PaginatedReportExportConfiguration(IList<EffectiveIdentity> identities, IDictionary<string, string> formatSettings, IList<ParameterValue> parameterValues)
        {
            Identities = identities;
            FormatSettings = formatSettings;
            ParameterValues = parameterValues;
        }

        /// <summary> The single identity to use when exporting a report. Required when a report uses a Power BI dataset or an Azure Analysis Services data source. </summary>
        public IList<EffectiveIdentity> Identities { get; }
        /// <summary> A dictionary of format settings. The keys are the device information property names for the requested file format. </summary>
        public IDictionary<string, string> FormatSettings { get; }
        /// <summary> A list of report parameters. </summary>
        public IList<ParameterValue> ParameterValues { get; }
    }
}
