// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;

namespace Microsoft.PowerBI.Api.Models
{
    public partial class DatasetRefreshDetail
    {
        internal static DatasetRefreshDetail DeserializeDatasetRefreshDetail(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DateTimeOffset? startTime = default;
            DateTimeOffset? endTime = default;
            DatasetRefreshDetailType? type = default;
            DatasetRefreshDetailCommitMode? commitMode = default;
            DatasetRefreshDetailStatus? status = default;
            DatasetRefreshDetailExtendedStatus? extendedStatus = default;
            DatasetRefreshDetailType? currentRefreshType = default;
            int? numberOfAttempts = default;
            IReadOnlyList<DatasetRefreshObjects> objects = default;
            IReadOnlyList<EngineMessage> messages = default;
            IReadOnlyList<RefreshAttempt> refreshAttempts = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("startTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = new DatasetRefreshDetailType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("commitMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    commitMode = new DatasetRefreshDetailCommitMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new DatasetRefreshDetailStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("extendedStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    extendedStatus = new DatasetRefreshDetailExtendedStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("currentRefreshType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    currentRefreshType = new DatasetRefreshDetailType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("numberOfAttempts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    numberOfAttempts = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("objects"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DatasetRefreshObjects> array = new List<DatasetRefreshObjects>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DatasetRefreshObjects.DeserializeDatasetRefreshObjects(item));
                    }
                    objects = array;
                    continue;
                }
                if (property.NameEquals("messages"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EngineMessage> array = new List<EngineMessage>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EngineMessage.DeserializeEngineMessage(item));
                    }
                    messages = array;
                    continue;
                }
                if (property.NameEquals("refreshAttempts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RefreshAttempt> array = new List<RefreshAttempt>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RefreshAttempt.DeserializeRefreshAttempt(item));
                    }
                    refreshAttempts = array;
                    continue;
                }
            }
            return new DatasetRefreshDetail(
                startTime,
                endTime,
                type,
                commitMode,
                status,
                extendedStatus,
                currentRefreshType,
                numberOfAttempts,
                objects ?? new ChangeTrackingList<DatasetRefreshObjects>(),
                messages ?? new ChangeTrackingList<EngineMessage>(),
                refreshAttempts ?? new ChangeTrackingList<RefreshAttempt>());
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static DatasetRefreshDetail FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeDatasetRefreshDetail(document.RootElement);
        }
    }
}
