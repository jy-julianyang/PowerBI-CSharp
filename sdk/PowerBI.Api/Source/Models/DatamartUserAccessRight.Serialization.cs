// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Microsoft.PowerBI.Api.Models
{
    internal static partial class DatamartUserAccessRightExtensions
    {
        public static string ToSerialString(this DatamartUserAccessRight value) => value switch
        {
            DatamartUserAccessRight.None => "None",
            DatamartUserAccessRight.Read => "Read",
            DatamartUserAccessRight.Write => "Write",
            DatamartUserAccessRight.Reshare => "Reshare",
            DatamartUserAccessRight.Explore => "Explore",
            DatamartUserAccessRight.ReadWrite => "ReadWrite",
            DatamartUserAccessRight.ReadReshare => "ReadReshare",
            DatamartUserAccessRight.ReadWriteReshare => "ReadWriteReshare",
            DatamartUserAccessRight.ReadExplore => "ReadExplore",
            DatamartUserAccessRight.ReadReshareExplore => "ReadReshareExplore",
            DatamartUserAccessRight.ReadWriteExplore => "ReadWriteExplore",
            DatamartUserAccessRight.ReadWriteReshareExplore => "ReadWriteReshareExplore",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DatamartUserAccessRight value.")
        };

        public static DatamartUserAccessRight ToDatamartUserAccessRight(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "None")) return DatamartUserAccessRight.None;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Read")) return DatamartUserAccessRight.Read;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Write")) return DatamartUserAccessRight.Write;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Reshare")) return DatamartUserAccessRight.Reshare;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Explore")) return DatamartUserAccessRight.Explore;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ReadWrite")) return DatamartUserAccessRight.ReadWrite;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ReadReshare")) return DatamartUserAccessRight.ReadReshare;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ReadWriteReshare")) return DatamartUserAccessRight.ReadWriteReshare;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ReadExplore")) return DatamartUserAccessRight.ReadExplore;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ReadReshareExplore")) return DatamartUserAccessRight.ReadReshareExplore;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ReadWriteExplore")) return DatamartUserAccessRight.ReadWriteExplore;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ReadWriteReshareExplore")) return DatamartUserAccessRight.ReadWriteReshareExplore;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DatamartUserAccessRight value.");
        }
    }
}
