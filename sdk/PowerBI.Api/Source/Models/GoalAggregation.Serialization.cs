// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Microsoft.PowerBI.Api.Models
{
    public partial class GoalAggregation : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("id"u8);
            writer.WriteStringValue(Id);
            writer.WritePropertyName("timestamp"u8);
            writer.WriteStringValue(Timestamp, "O");
            writer.WritePropertyName("calculationTime"u8);
            writer.WriteStringValue(CalculationTime, "O");
            writer.WritePropertyName("scorecardId"u8);
            writer.WriteStringValue(ScorecardId);
            writer.WritePropertyName("goalId"u8);
            writer.WriteStringValue(GoalId);
            writer.WritePropertyName("value"u8);
            writer.WriteNumberValue(Value);
            if (Optional.IsDefined(ValueDisplayString))
            {
                writer.WritePropertyName("valueDisplayString"u8);
                writer.WriteStringValue(ValueDisplayString);
            }
            writer.WritePropertyName("type"u8);
            writer.WriteStringValue(Type.ToSerialString());
            writer.WritePropertyName("maxLastModifiedTime"u8);
            writer.WriteStringValue(MaxLastModifiedTime, "O");
            writer.WriteEndObject();
        }

        internal static GoalAggregation DeserializeGoalAggregation(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string id = default;
            DateTimeOffset timestamp = default;
            DateTimeOffset calculationTime = default;
            Guid scorecardId = default;
            Guid goalId = default;
            double value = default;
            string valueDisplayString = default;
            GoalAggregationType type = default;
            DateTimeOffset maxLastModifiedTime = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("timestamp"u8))
                {
                    timestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("calculationTime"u8))
                {
                    calculationTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("scorecardId"u8))
                {
                    scorecardId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("goalId"u8))
                {
                    goalId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("value"u8))
                {
                    value = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("valueDisplayString"u8))
                {
                    valueDisplayString = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString().ToGoalAggregationType();
                    continue;
                }
                if (property.NameEquals("maxLastModifiedTime"u8))
                {
                    maxLastModifiedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new GoalAggregation(
                id,
                timestamp,
                calculationTime,
                scorecardId,
                goalId,
                value,
                valueDisplayString,
                type,
                maxLastModifiedTime);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static GoalAggregation FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeGoalAggregation(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
