// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Microsoft.PowerBI.Api.Models
{
    public partial class Subscription : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("id"u8);
            writer.WriteStringValue(Id);
            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title"u8);
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(ArtifactId))
            {
                writer.WritePropertyName("artifactId"u8);
                writer.WriteStringValue(ArtifactId.Value);
            }
            if (Optional.IsDefined(ArtifactDisplayName))
            {
                writer.WritePropertyName("artifactDisplayName"u8);
                writer.WriteStringValue(ArtifactDisplayName);
            }
            if (Optional.IsDefined(SubArtifactDisplayName))
            {
                writer.WritePropertyName("subArtifactDisplayName"u8);
                writer.WriteStringValue(SubArtifactDisplayName);
            }
            if (Optional.IsDefined(ArtifactType))
            {
                writer.WritePropertyName("artifactType"u8);
                writer.WriteStringValue(ArtifactType);
            }
            if (Optional.IsDefined(IsEnabled))
            {
                writer.WritePropertyName("isEnabled"u8);
                writer.WriteBooleanValue(IsEnabled.Value);
            }
            if (Optional.IsDefined(Frequency))
            {
                writer.WritePropertyName("frequency"u8);
                writer.WriteStringValue(Frequency);
            }
            if (Optional.IsDefined(StartDate))
            {
                writer.WritePropertyName("startDate"u8);
                writer.WriteStringValue(StartDate.Value, "O");
            }
            if (Optional.IsDefined(EndDate))
            {
                writer.WritePropertyName("endDate"u8);
                writer.WriteStringValue(EndDate.Value, "O");
            }
            if (Optional.IsDefined(LinkToContent))
            {
                writer.WritePropertyName("linkToContent"u8);
                writer.WriteBooleanValue(LinkToContent.Value);
            }
            if (Optional.IsDefined(PreviewImage))
            {
                writer.WritePropertyName("previewImage"u8);
                writer.WriteBooleanValue(PreviewImage.Value);
            }
            if (Optional.IsDefined(AttachmentFormat))
            {
                writer.WritePropertyName("attachmentFormat"u8);
                writer.WriteStringValue(AttachmentFormat);
            }
            if (Optional.IsCollectionDefined(Users))
            {
                writer.WritePropertyName("users"u8);
                writer.WriteStartArray();
                foreach (var item in Users)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static Subscription DeserializeSubscription(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Guid id = default;
            string title = default;
            Guid? artifactId = default;
            string artifactDisplayName = default;
            string subArtifactDisplayName = default;
            string artifactType = default;
            bool? isEnabled = default;
            string frequency = default;
            DateTimeOffset? startDate = default;
            DateTimeOffset? endDate = default;
            bool? linkToContent = default;
            bool? previewImage = default;
            string attachmentFormat = default;
            IList<SubscriptionUser> users = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("title"u8))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("artifactId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    artifactId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("artifactDisplayName"u8))
                {
                    artifactDisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subArtifactDisplayName"u8))
                {
                    subArtifactDisplayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("artifactType"u8))
                {
                    artifactType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("frequency"u8))
                {
                    frequency = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("startDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("linkToContent"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    linkToContent = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("previewImage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    previewImage = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("attachmentFormat"u8))
                {
                    attachmentFormat = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("users"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SubscriptionUser> array = new List<SubscriptionUser>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SubscriptionUser.DeserializeSubscriptionUser(item));
                    }
                    users = array;
                    continue;
                }
            }
            return new Subscription(
                id,
                title,
                artifactId,
                artifactDisplayName,
                subArtifactDisplayName,
                artifactType,
                isEnabled,
                frequency,
                startDate,
                endDate,
                linkToContent,
                previewImage,
                attachmentFormat,
                users ?? new ChangeTrackingList<SubscriptionUser>());
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static Subscription FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeSubscription(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
