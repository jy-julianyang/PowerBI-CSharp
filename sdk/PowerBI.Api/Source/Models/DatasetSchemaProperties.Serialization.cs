// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Microsoft.PowerBI.Api.Models
{
    public partial class DatasetSchemaProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Tables))
            {
                writer.WritePropertyName("tables"u8);
                writer.WriteStartArray();
                foreach (var item in Tables)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(SchemaRetrievalError))
            {
                writer.WritePropertyName("schemaRetrievalError"u8);
                writer.WriteStringValue(SchemaRetrievalError);
            }
            if (Optional.IsDefined(SchemaMayNotBeUpToDate))
            {
                writer.WritePropertyName("schemaMayNotBeUpToDate"u8);
                writer.WriteBooleanValue(SchemaMayNotBeUpToDate.Value);
            }
            if (Optional.IsCollectionDefined(Expressions))
            {
                writer.WritePropertyName("expressions"u8);
                writer.WriteStartArray();
                foreach (var item in Expressions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Roles))
            {
                writer.WritePropertyName("roles"u8);
                writer.WriteStartArray();
                foreach (var item in Roles)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static DatasetSchemaProperties DeserializeDatasetSchemaProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<Table> tables = default;
            string schemaRetrievalError = default;
            bool? schemaMayNotBeUpToDate = default;
            IList<Expression> expressions = default;
            IList<Role> roles = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tables"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Table> array = new List<Table>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Table.DeserializeTable(item));
                    }
                    tables = array;
                    continue;
                }
                if (property.NameEquals("schemaRetrievalError"u8))
                {
                    schemaRetrievalError = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("schemaMayNotBeUpToDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    schemaMayNotBeUpToDate = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("expressions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Expression> array = new List<Expression>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Expression.DeserializeExpression(item));
                    }
                    expressions = array;
                    continue;
                }
                if (property.NameEquals("roles"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Role> array = new List<Role>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Role.DeserializeRole(item));
                    }
                    roles = array;
                    continue;
                }
            }
            return new DatasetSchemaProperties(tables ?? new ChangeTrackingList<Table>(), schemaRetrievalError, schemaMayNotBeUpToDate, expressions ?? new ChangeTrackingList<Expression>(), roles ?? new ChangeTrackingList<Role>());
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static DatasetSchemaProperties FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeDatasetSchemaProperties(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
