// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure;

namespace Microsoft.PowerBI.Api.Models
{
    public partial class DatasetQueryScaleOutSyncStatus
    {
        internal static DatasetQueryScaleOutSyncStatus DeserializeDatasetQueryScaleOutSyncStatus(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            long? commitVersion = default;
            DateTimeOffset? commitTimestamp = default;
            long? targetSyncVersion = default;
            DateTimeOffset? targetSyncTimestamp = default;
            QueryScaleOutSyncTriggerReason? triggerReason = default;
            DateTimeOffset? syncStartTime = default;
            DateTimeOffset? syncEndTime = default;
            long? minActiveReadVersion = default;
            DateTimeOffset? minActiveReadTimestamp = default;
            QueryScaleOutStatus? scaleOutStatus = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("commitVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    commitVersion = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("commitTimestamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    commitTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("targetSyncVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetSyncVersion = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("targetSyncTimestamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetSyncTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("triggerReason"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    triggerReason = new QueryScaleOutSyncTriggerReason(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("syncStartTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    syncStartTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("syncEndTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    syncEndTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("minActiveReadVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minActiveReadVersion = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("minActiveReadTimestamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    minActiveReadTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("scaleOutStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    scaleOutStatus = new QueryScaleOutStatus(property.Value.GetString());
                    continue;
                }
            }
            return new DatasetQueryScaleOutSyncStatus(
                commitVersion,
                commitTimestamp,
                targetSyncVersion,
                targetSyncTimestamp,
                triggerReason,
                syncStartTime,
                syncEndTime,
                minActiveReadVersion,
                minActiveReadTimestamp,
                scaleOutStatus);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static DatasetQueryScaleOutSyncStatus FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeDatasetQueryScaleOutSyncStatus(document.RootElement);
        }
    }
}
