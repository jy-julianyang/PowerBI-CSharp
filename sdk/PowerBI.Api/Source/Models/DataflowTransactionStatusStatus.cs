// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.PowerBI.Api.Models
{
    /// <summary> The transaction status. </summary>
    public readonly partial struct DataflowTransactionStatusStatus : IEquatable<DataflowTransactionStatusStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataflowTransactionStatusStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataflowTransactionStatusStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvalidValue = "invalid";
        private const string SuccessfullyMarkedValue = "successfullyMarked";
        private const string AlreadyConcludedValue = "alreadyConcluded";
        private const string NotFoundValue = "notFound";

        /// <summary> invalid. </summary>
        public static DataflowTransactionStatusStatus Invalid { get; } = new DataflowTransactionStatusStatus(InvalidValue);
        /// <summary> successfullyMarked. </summary>
        public static DataflowTransactionStatusStatus SuccessfullyMarked { get; } = new DataflowTransactionStatusStatus(SuccessfullyMarkedValue);
        /// <summary> alreadyConcluded. </summary>
        public static DataflowTransactionStatusStatus AlreadyConcluded { get; } = new DataflowTransactionStatusStatus(AlreadyConcludedValue);
        /// <summary> notFound. </summary>
        public static DataflowTransactionStatusStatus NotFound { get; } = new DataflowTransactionStatusStatus(NotFoundValue);
        /// <summary> Determines if two <see cref="DataflowTransactionStatusStatus"/> values are the same. </summary>
        public static bool operator ==(DataflowTransactionStatusStatus left, DataflowTransactionStatusStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataflowTransactionStatusStatus"/> values are not the same. </summary>
        public static bool operator !=(DataflowTransactionStatusStatus left, DataflowTransactionStatusStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DataflowTransactionStatusStatus"/>. </summary>
        public static implicit operator DataflowTransactionStatusStatus(string value) => new DataflowTransactionStatusStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataflowTransactionStatusStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataflowTransactionStatusStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
