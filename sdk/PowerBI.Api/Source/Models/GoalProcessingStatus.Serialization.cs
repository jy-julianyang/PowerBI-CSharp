// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Microsoft.PowerBI.Api.Models
{
    internal static partial class GoalProcessingStatusExtensions
    {
        public static string ToSerialString(this GoalProcessingStatus value) => value switch
        {
            GoalProcessingStatus.NotProcessed => "NotProcessed",
            GoalProcessingStatus.Succeeded => "Succeeded",
            GoalProcessingStatus.Failed => "Failed",
            GoalProcessingStatus.UserNotFound => "UserNotFound",
            GoalProcessingStatus.QueryExecutionError => "QueryExecutionError",
            GoalProcessingStatus.QueryResultError => "QueryResultError",
            GoalProcessingStatus.BadQueryResultMetadata => "BadQueryResultMetadata",
            GoalProcessingStatus.EmptyGoalValues => "EmptyGoalValues",
            GoalProcessingStatus.ConnectedDatasetDeleted => "ConnectedDatasetDeleted",
            GoalProcessingStatus.UserNotAuthorized => "UserNotAuthorized",
            GoalProcessingStatus.ModelNotFound => "ModelNotFound",
            GoalProcessingStatus.ScorecardNotFound => "ScorecardNotFound",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown GoalProcessingStatus value.")
        };

        public static GoalProcessingStatus ToGoalProcessingStatus(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "NotProcessed")) return GoalProcessingStatus.NotProcessed;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Succeeded")) return GoalProcessingStatus.Succeeded;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Failed")) return GoalProcessingStatus.Failed;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "UserNotFound")) return GoalProcessingStatus.UserNotFound;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "QueryExecutionError")) return GoalProcessingStatus.QueryExecutionError;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "QueryResultError")) return GoalProcessingStatus.QueryResultError;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "BadQueryResultMetadata")) return GoalProcessingStatus.BadQueryResultMetadata;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "EmptyGoalValues")) return GoalProcessingStatus.EmptyGoalValues;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ConnectedDatasetDeleted")) return GoalProcessingStatus.ConnectedDatasetDeleted;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "UserNotAuthorized")) return GoalProcessingStatus.UserNotAuthorized;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ModelNotFound")) return GoalProcessingStatus.ModelNotFound;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ScorecardNotFound")) return GoalProcessingStatus.ScorecardNotFound;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown GoalProcessingStatus value.");
        }
    }
}
