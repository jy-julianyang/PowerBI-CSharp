// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.PowerBI.Api.Models
{
    /// <summary> Query scale-out status. </summary>
    public readonly partial struct QueryScaleOutStatus : IEquatable<QueryScaleOutStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="QueryScaleOutStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public QueryScaleOutStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnabledValue = "Enabled";
        private const string TenantSettingDisabledValue = "TenantSettingDisabled";
        private const string StorageModeNotSupportedValue = "StorageModeNotSupported";
        private const string ReadOnlyReplicasDisabledValue = "ReadOnlyReplicasDisabled";

        /// <summary> Query scale-out is enabled. </summary>
        public static QueryScaleOutStatus Enabled { get; } = new QueryScaleOutStatus(EnabledValue);
        /// <summary> Query scale-out tenant setting is disabled. </summary>
        public static QueryScaleOutStatus TenantSettingDisabled { get; } = new QueryScaleOutStatus(TenantSettingDisabledValue);
        /// <summary> Query scale-out is not supported for dataset's storage mode. </summary>
        public static QueryScaleOutStatus StorageModeNotSupported { get; } = new QueryScaleOutStatus(StorageModeNotSupportedValue);
        /// <summary> Query scale-out max read-only replicas is set to 0. </summary>
        public static QueryScaleOutStatus ReadOnlyReplicasDisabled { get; } = new QueryScaleOutStatus(ReadOnlyReplicasDisabledValue);
        /// <summary> Determines if two <see cref="QueryScaleOutStatus"/> values are the same. </summary>
        public static bool operator ==(QueryScaleOutStatus left, QueryScaleOutStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="QueryScaleOutStatus"/> values are not the same. </summary>
        public static bool operator !=(QueryScaleOutStatus left, QueryScaleOutStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="QueryScaleOutStatus"/>. </summary>
        public static implicit operator QueryScaleOutStatus(string value) => new QueryScaleOutStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is QueryScaleOutStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(QueryScaleOutStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
