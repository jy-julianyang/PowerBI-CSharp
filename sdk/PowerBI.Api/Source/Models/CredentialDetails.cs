// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Microsoft.PowerBI.Api.Models
{
    /// <summary> The credential details. </summary>
    public partial class CredentialDetails
    {
        /// <summary> Initializes a new instance of <see cref="CredentialDetails"/>. </summary>
        /// <param name="credentials"> The credentials, which depend on the 'credentialType' value. For more information, see [Update Datasource](/rest/api/power-bi/gateways/update-datasource#examples) examples. </param>
        /// <param name="credentialType"> The credential type. </param>
        /// <param name="encryptedConnection"> Whether to encrypt the data source connection. The API call will fail if you select encryption and Power BI is unable to establish an encrypted connection with the data source. </param>
        /// <param name="encryptionAlgorithm"> The encryption algorithm. For a cloud data source, specify `None`. For an on-premises data source, specify `RSA-OAEP` and use the gateway public key to encrypt the credentials. </param>
        /// <param name="privacyLevel"> The privacy level, which is relevant when combining data from multiple sources. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credentials"/> is null. </exception>
        public CredentialDetails(string credentials, CredentialType credentialType, EncryptedConnection encryptedConnection, EncryptionAlgorithm encryptionAlgorithm, PrivacyLevel privacyLevel)
        {
            Argument.AssertNotNull(credentials, nameof(credentials));

            Credentials = credentials;
            CredentialType = credentialType;
            EncryptedConnection = encryptedConnection;
            EncryptionAlgorithm = encryptionAlgorithm;
            PrivacyLevel = privacyLevel;
        }

        /// <summary> Initializes a new instance of <see cref="CredentialDetails"/>. </summary>
        /// <param name="credentials"> The credentials, which depend on the 'credentialType' value. For more information, see [Update Datasource](/rest/api/power-bi/gateways/update-datasource#examples) examples. </param>
        /// <param name="credentialType"> The credential type. </param>
        /// <param name="encryptedConnection"> Whether to encrypt the data source connection. The API call will fail if you select encryption and Power BI is unable to establish an encrypted connection with the data source. </param>
        /// <param name="encryptionAlgorithm"> The encryption algorithm. For a cloud data source, specify `None`. For an on-premises data source, specify `RSA-OAEP` and use the gateway public key to encrypt the credentials. </param>
        /// <param name="privacyLevel"> The privacy level, which is relevant when combining data from multiple sources. </param>
        /// <param name="useCallerAADIdentity"> Whether the Azure AD identity (OAuth 2.0 credentials) of the API caller (which must be the data source owner) will be used to configure data source credentials (the owner OAuth access token). Typically, you would either use this flag or `useEndUserOAuth2Credentials`. </param>
        /// <param name="useEndUserOAuth2Credentials"> Whether the end-user Azure AD identity (OAuth 2.0 credentials) is used when connecting to the data source in DirectQuery mode. Use with data sources that support [single sign-on (SSO)](/power-bi/connect-data/power-bi-data-sources#single-sign-on-sso-for-directquery-sources). Typically, you would either use this flag or `useCallerAADIdentity`. </param>
        internal CredentialDetails(string credentials, CredentialType credentialType, EncryptedConnection encryptedConnection, EncryptionAlgorithm encryptionAlgorithm, PrivacyLevel privacyLevel, bool? useCallerAADIdentity, bool? useEndUserOAuth2Credentials)
        {
            Credentials = credentials;
            CredentialType = credentialType;
            EncryptedConnection = encryptedConnection;
            EncryptionAlgorithm = encryptionAlgorithm;
            PrivacyLevel = privacyLevel;
            UseCallerAADIdentity = useCallerAADIdentity;
            UseEndUserOAuth2Credentials = useEndUserOAuth2Credentials;
        }

        /// <summary> The credentials, which depend on the 'credentialType' value. For more information, see [Update Datasource](/rest/api/power-bi/gateways/update-datasource#examples) examples. </summary>
        public string Credentials { get; }
        /// <summary> The credential type. </summary>
        public CredentialType CredentialType { get; }
        /// <summary> Whether to encrypt the data source connection. The API call will fail if you select encryption and Power BI is unable to establish an encrypted connection with the data source. </summary>
        public EncryptedConnection EncryptedConnection { get; }
        /// <summary> The encryption algorithm. For a cloud data source, specify `None`. For an on-premises data source, specify `RSA-OAEP` and use the gateway public key to encrypt the credentials. </summary>
        public EncryptionAlgorithm EncryptionAlgorithm { get; }
        /// <summary> The privacy level, which is relevant when combining data from multiple sources. </summary>
        public PrivacyLevel PrivacyLevel { get; }
        /// <summary> Whether the Azure AD identity (OAuth 2.0 credentials) of the API caller (which must be the data source owner) will be used to configure data source credentials (the owner OAuth access token). Typically, you would either use this flag or `useEndUserOAuth2Credentials`. </summary>
        public bool? UseCallerAADIdentity { get; set; }
        /// <summary> Whether the end-user Azure AD identity (OAuth 2.0 credentials) is used when connecting to the data source in DirectQuery mode. Use with data sources that support [single sign-on (SSO)](/power-bi/connect-data/power-bi-data-sources#single-sign-on-sso-for-directquery-sources). Typically, you would either use this flag or `useCallerAADIdentity`. </summary>
        public bool? UseEndUserOAuth2Credentials { get; set; }
    }
}
