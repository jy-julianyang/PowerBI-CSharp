// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Microsoft.PowerBI.Api.Models
{
    /// <summary> A request object to be used with the [Move Goals](/rest/api/power-bi/scorecards_(preview)/move-goals) API request. </summary>
    public partial class GoalsMoveRequest
    {
        /// <summary> Initializes a new instance of <see cref="GoalsMoveRequest"/>. </summary>
        /// <param name="goalToMove"> The rank validation information for the goal to be moved. The caller provides validation information to confirm that they know the existing position of a goal within the hierarchy of goals. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="goalToMove"/> is null. </exception>
        public GoalsMoveRequest(GoalRankValidationInfo goalToMove)
        {
            Argument.AssertNotNull(goalToMove, nameof(goalToMove));

            GoalToMove = goalToMove;
        }

        /// <summary> Initializes a new instance of <see cref="GoalsMoveRequest"/>. </summary>
        /// <param name="goalToMove"> The rank validation information for the goal to be moved. The caller provides validation information to confirm that they know the existing position of a goal within the hierarchy of goals. </param>
        /// <param name="newParent"> Optional. The rank validation information for the new parent of the goal to be moved. The caller provides validation information to confirm that they know the existing position of a goal within the hierarchy of goals. </param>
        /// <param name="newPrevious"> Optional. The rank validation information for the new previous-sibling of the goal to be moved. The caller provides validation information to confirm that they know the existing position of a goal within the hierarchy of goals. </param>
        /// <param name="newNext"> Optional. The rank validation information for the new next-sibling of the goal to be moved. The caller provides validation information to confirm that they know the existing position of a goal within the hierarchy of goals. </param>
        internal GoalsMoveRequest(GoalRankValidationInfo goalToMove, GoalRankValidationInfo newParent, GoalRankValidationInfo newPrevious, GoalRankValidationInfo newNext)
        {
            GoalToMove = goalToMove;
            NewParent = newParent;
            NewPrevious = newPrevious;
            NewNext = newNext;
        }

        /// <summary> The rank validation information for the goal to be moved. The caller provides validation information to confirm that they know the existing position of a goal within the hierarchy of goals. </summary>
        public GoalRankValidationInfo GoalToMove { get; }
        /// <summary> Optional. The rank validation information for the new parent of the goal to be moved. The caller provides validation information to confirm that they know the existing position of a goal within the hierarchy of goals. </summary>
        public GoalRankValidationInfo NewParent { get; set; }
        /// <summary> Optional. The rank validation information for the new previous-sibling of the goal to be moved. The caller provides validation information to confirm that they know the existing position of a goal within the hierarchy of goals. </summary>
        public GoalRankValidationInfo NewPrevious { get; set; }
        /// <summary> Optional. The rank validation information for the new next-sibling of the goal to be moved. The caller provides validation information to confirm that they know the existing position of a goal within the hierarchy of goals. </summary>
        public GoalRankValidationInfo NewNext { get; set; }
    }
}
