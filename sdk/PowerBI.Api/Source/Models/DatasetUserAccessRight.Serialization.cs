// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Microsoft.PowerBI.Api.Models
{
    internal static partial class DatasetUserAccessRightExtensions
    {
        public static string ToSerialString(this DatasetUserAccessRight value) => value switch
        {
            DatasetUserAccessRight.None => "None",
            DatasetUserAccessRight.Read => "Read",
            DatasetUserAccessRight.ReadWrite => "ReadWrite",
            DatasetUserAccessRight.ReadReshare => "ReadReshare",
            DatasetUserAccessRight.ReadWriteReshare => "ReadWriteReshare",
            DatasetUserAccessRight.ReadExplore => "ReadExplore",
            DatasetUserAccessRight.ReadReshareExplore => "ReadReshareExplore",
            DatasetUserAccessRight.ReadWriteExplore => "ReadWriteExplore",
            DatasetUserAccessRight.ReadWriteReshareExplore => "ReadWriteReshareExplore",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DatasetUserAccessRight value.")
        };

        public static DatasetUserAccessRight ToDatasetUserAccessRight(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "None")) return DatasetUserAccessRight.None;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Read")) return DatasetUserAccessRight.Read;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ReadWrite")) return DatasetUserAccessRight.ReadWrite;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ReadReshare")) return DatasetUserAccessRight.ReadReshare;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ReadWriteReshare")) return DatasetUserAccessRight.ReadWriteReshare;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ReadExplore")) return DatasetUserAccessRight.ReadExplore;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ReadReshareExplore")) return DatasetUserAccessRight.ReadReshareExplore;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ReadWriteExplore")) return DatasetUserAccessRight.ReadWriteExplore;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ReadWriteReshareExplore")) return DatasetUserAccessRight.ReadWriteReshareExplore;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown DatasetUserAccessRight value.");
        }
    }
}
