// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Microsoft.PowerBI.Api.Models
{
    public partial class WorkspaceInfoDataset : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Tables))
            {
                writer.WritePropertyName("tables"u8);
                writer.WriteStartArray();
                foreach (var item in Tables)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(SchemaRetrievalError))
            {
                writer.WritePropertyName("schemaRetrievalError"u8);
                writer.WriteStringValue(SchemaRetrievalError);
            }
            if (Optional.IsDefined(SchemaMayNotBeUpToDate))
            {
                writer.WritePropertyName("schemaMayNotBeUpToDate"u8);
                writer.WriteBooleanValue(SchemaMayNotBeUpToDate.Value);
            }
            if (Optional.IsCollectionDefined(Expressions))
            {
                writer.WritePropertyName("expressions"u8);
                writer.WriteStartArray();
                foreach (var item in Expressions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Roles))
            {
                writer.WritePropertyName("roles"u8);
                writer.WriteStartArray();
                foreach (var item in Roles)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(EndorsementDetails))
            {
                writer.WritePropertyName("endorsementDetails"u8);
                writer.WriteObjectValue(EndorsementDetails);
            }
            if (Optional.IsDefined(SensitivityLabel))
            {
                writer.WritePropertyName("sensitivityLabel"u8);
                writer.WriteObjectValue(SensitivityLabel);
            }
            if (Optional.IsDefined(TargetStorageMode))
            {
                writer.WritePropertyName("targetStorageMode"u8);
                writer.WriteStringValue(TargetStorageMode);
            }
            if (Optional.IsCollectionDefined(DatasourceUsages))
            {
                writer.WritePropertyName("datasourceUsages"u8);
                writer.WriteStartArray();
                foreach (var item in DatasourceUsages)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(MisconfiguredDatasourceUsages))
            {
                writer.WritePropertyName("misconfiguredDatasourceUsages"u8);
                writer.WriteStartArray();
                foreach (var item in MisconfiguredDatasourceUsages)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(UpstreamDatamarts))
            {
                writer.WritePropertyName("upstreamDatamarts"u8);
                writer.WriteStartArray();
                foreach (var item in UpstreamDatamarts)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(UpstreamDatasets))
            {
                writer.WritePropertyName("upstreamDatasets"u8);
                writer.WriteStartArray();
                foreach (var item in UpstreamDatasets)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Users))
            {
                writer.WritePropertyName("users"u8);
                writer.WriteStartArray();
                foreach (var item in Users)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("id"u8);
            writer.WriteStringValue(Id);
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(ConfiguredBy))
            {
                writer.WritePropertyName("configuredBy"u8);
                writer.WriteStringValue(ConfiguredBy);
            }
            if (Optional.IsDefined(CreatedDate))
            {
                writer.WritePropertyName("createdDate"u8);
                writer.WriteStringValue(CreatedDate.Value, "O");
            }
            if (Optional.IsDefined(ContentProviderType))
            {
                writer.WritePropertyName("ContentProviderType"u8);
                writer.WriteStringValue(ContentProviderType);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(UpstreamDataflows))
            {
                writer.WritePropertyName("upstreamDataflows"u8);
                writer.WriteStartArray();
                foreach (var item in UpstreamDataflows)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static WorkspaceInfoDataset DeserializeWorkspaceInfoDataset(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<Table> tables = default;
            string schemaRetrievalError = default;
            bool? schemaMayNotBeUpToDate = default;
            IList<Expression> expressions = default;
            IList<Role> roles = default;
            EndorsementDetails endorsementDetails = default;
            SensitivityLabel sensitivityLabel = default;
            string targetStorageMode = default;
            IList<DatasourceUsage> datasourceUsages = default;
            IList<DatasourceUsage> misconfiguredDatasourceUsages = default;
            IList<DependentDatamart> upstreamDatamarts = default;
            IList<DependentDataset> upstreamDatasets = default;
            IList<DatasetUser> users = default;
            string id = default;
            string name = default;
            string configuredBy = default;
            DateTimeOffset? createdDate = default;
            string contentProviderType = default;
            string description = default;
            IList<DependentDataflow> upstreamDataflows = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tables"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Table> array = new List<Table>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Table.DeserializeTable(item));
                    }
                    tables = array;
                    continue;
                }
                if (property.NameEquals("schemaRetrievalError"u8))
                {
                    schemaRetrievalError = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("schemaMayNotBeUpToDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    schemaMayNotBeUpToDate = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("expressions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Expression> array = new List<Expression>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Expression.DeserializeExpression(item));
                    }
                    expressions = array;
                    continue;
                }
                if (property.NameEquals("roles"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<Role> array = new List<Role>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Role.DeserializeRole(item));
                    }
                    roles = array;
                    continue;
                }
                if (property.NameEquals("endorsementDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endorsementDetails = EndorsementDetails.DeserializeEndorsementDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("sensitivityLabel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sensitivityLabel = SensitivityLabel.DeserializeSensitivityLabel(property.Value);
                    continue;
                }
                if (property.NameEquals("targetStorageMode"u8))
                {
                    targetStorageMode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("datasourceUsages"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DatasourceUsage> array = new List<DatasourceUsage>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DatasourceUsage.DeserializeDatasourceUsage(item));
                    }
                    datasourceUsages = array;
                    continue;
                }
                if (property.NameEquals("misconfiguredDatasourceUsages"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DatasourceUsage> array = new List<DatasourceUsage>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DatasourceUsage.DeserializeDatasourceUsage(item));
                    }
                    misconfiguredDatasourceUsages = array;
                    continue;
                }
                if (property.NameEquals("upstreamDatamarts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DependentDatamart> array = new List<DependentDatamart>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DependentDatamart.DeserializeDependentDatamart(item));
                    }
                    upstreamDatamarts = array;
                    continue;
                }
                if (property.NameEquals("upstreamDatasets"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DependentDataset> array = new List<DependentDataset>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DependentDataset.DeserializeDependentDataset(item));
                    }
                    upstreamDatasets = array;
                    continue;
                }
                if (property.NameEquals("users"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DatasetUser> array = new List<DatasetUser>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DatasetUser.DeserializeDatasetUser(item));
                    }
                    users = array;
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("configuredBy"u8))
                {
                    configuredBy = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("ContentProviderType"u8))
                {
                    contentProviderType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("upstreamDataflows"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DependentDataflow> array = new List<DependentDataflow>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DependentDataflow.DeserializeDependentDataflow(item));
                    }
                    upstreamDataflows = array;
                    continue;
                }
            }
            return new WorkspaceInfoDataset(
                id,
                name,
                configuredBy,
                createdDate,
                contentProviderType,
                description,
                upstreamDataflows ?? new ChangeTrackingList<DependentDataflow>(),
                tables ?? new ChangeTrackingList<Table>(),
                schemaRetrievalError,
                schemaMayNotBeUpToDate,
                expressions ?? new ChangeTrackingList<Expression>(),
                roles ?? new ChangeTrackingList<Role>(),
                endorsementDetails,
                sensitivityLabel,
                targetStorageMode,
                datasourceUsages ?? new ChangeTrackingList<DatasourceUsage>(),
                misconfiguredDatasourceUsages ?? new ChangeTrackingList<DatasourceUsage>(),
                upstreamDatamarts ?? new ChangeTrackingList<DependentDatamart>(),
                upstreamDatasets ?? new ChangeTrackingList<DependentDataset>(),
                users ?? new ChangeTrackingList<DatasetUser>());
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static new WorkspaceInfoDataset FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeWorkspaceInfoDataset(document.RootElement);
        }

        /// <summary> Convert into a <see cref="RequestContent"/>. </summary>
        internal override RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
