// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    /// <summary> The Users service client. </summary>
    public partial class UsersClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal UsersRestClient RestClient { get; }

        /// <summary> Initializes a new instance of UsersClient for mocking. </summary>
        protected UsersClient()
        {
        }

        /// <summary> Initializes a new instance of UsersClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public UsersClient(TokenCredential credential, Uri endpoint = null, PowerBIClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("https://api.powerbi.com");

            options ??= new PowerBIClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://analysis.windows.net/powerbi/api/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new UsersRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of UsersClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal UsersClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new UsersRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Refreshes user permissions in Power BI. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When a user is granted permissions to a workspace, app, or Power BI item (such as a report or a dashboard), the new permissions might not be immediately available through API calls. This operation refreshes user permissions to ensure they're fully updated.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - Call **Refresh User Permissions** before making other API calls.
        /// &gt; - Since it takes about two minutes for the permissions to get refreshed, wait for two minutes before making other API calls.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.Read.All or Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum one call per user per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> RefreshUserPermissionsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("UsersClient.RefreshUserPermissions");
            scope.Start();
            try
            {
                return await RestClient.RefreshUserPermissionsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Refreshes user permissions in Power BI. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When a user is granted permissions to a workspace, app, or Power BI item (such as a report or a dashboard), the new permissions might not be immediately available through API calls. This operation refreshes user permissions to ensure they're fully updated.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - Call **Refresh User Permissions** before making other API calls.
        /// &gt; - Since it takes about two minutes for the permissions to get refreshed, wait for two minutes before making other API calls.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.Read.All or Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum one call per user per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response RefreshUserPermissions(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("UsersClient.RefreshUserPermissions");
            scope.Start();
            try
            {
                return RestClient.RefreshUserPermissions(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of Power BI items (such as reports or dashboards) that the specified user has access to. </summary>
        /// <param name="userId"> The graph ID or user principal name (UPN) of the user. </param>
        /// <param name="continuationToken"> Token required to get the next chunk of the result set. </param>
        /// <param name="artifactTypes"> Comma separated list of artifact types. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<ArtifactAccessResponse>> GetUserArtifactAccessAsAdminAsync(string userId, string continuationToken = null, string artifactTypes = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("UsersClient.GetUserArtifactAccessAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetUserArtifactAccessAsAdminAsync(userId, continuationToken, artifactTypes, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of Power BI items (such as reports or dashboards) that the specified user has access to. </summary>
        /// <param name="userId"> The graph ID or user principal name (UPN) of the user. </param>
        /// <param name="continuationToken"> Token required to get the next chunk of the result set. </param>
        /// <param name="artifactTypes"> Comma separated list of artifact types. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<ArtifactAccessResponse> GetUserArtifactAccessAsAdmin(string userId, string continuationToken = null, string artifactTypes = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("UsersClient.GetUserArtifactAccessAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetUserArtifactAccessAsAdmin(userId, continuationToken, artifactTypes, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of subscriptions for the specified user. This is a preview API call. </summary>
        /// <param name="userId"> The graph ID or user principal name (UPN) of the user. </param>
        /// <param name="continuationToken"> Token required to get the next chunk of the result set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ### Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<SubscriptionsByUserResponse>> GetUserSubscriptionsAsAdminAsync(string userId, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("UsersClient.GetUserSubscriptionsAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetUserSubscriptionsAsAdminAsync(userId, continuationToken, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of subscriptions for the specified user. This is a preview API call. </summary>
        /// <param name="userId"> The graph ID or user principal name (UPN) of the user. </param>
        /// <param name="continuationToken"> Token required to get the next chunk of the result set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ### Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<SubscriptionsByUserResponse> GetUserSubscriptionsAsAdmin(string userId, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("UsersClient.GetUserSubscriptionsAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetUserSubscriptionsAsAdmin(userId, continuationToken, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
