// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    internal partial class GatewaysRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of GatewaysRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public GatewaysRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://api.powerbi.com");
        }

        internal HttpMessage CreateGetGatewaysRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/gateways", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of gateways for which the user is an admin. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Gateways>> GetGatewaysAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetGatewaysRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Gateways value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Gateways.DeserializeGateways(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of gateways for which the user is an admin. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Gateways> GetGateways(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetGatewaysRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Gateways value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Gateways.DeserializeGateways(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetGatewayRequest(Guid gatewayId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/gateways/", false);
            uri.AppendPath(gatewayId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Gateway>> GetGatewayAsync(Guid gatewayId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetGatewayRequest(gatewayId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Gateway value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Gateway.DeserializeGateway(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Gateway> GetGateway(Guid gatewayId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetGatewayRequest(gatewayId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Gateway value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Gateway.DeserializeGateway(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasourcesRequest(Guid gatewayId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/gateways/", false);
            uri.AppendPath(gatewayId, true);
            uri.AppendPath("/datasources", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of data sources from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<GatewayDatasources>> GetDatasourcesAsync(Guid gatewayId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasourcesRequest(gatewayId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GatewayDatasources value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GatewayDatasources.DeserializeGatewayDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of data sources from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<GatewayDatasources> GetDatasources(Guid gatewayId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasourcesRequest(gatewayId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GatewayDatasources value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GatewayDatasources.DeserializeGatewayDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateDatasourceRequest(Guid gatewayId, PublishDatasourceToGatewayRequest datasourceToGatewayRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/gateways/", false);
            uri.AppendPath(gatewayId, true);
            uri.AppendPath("/datasources", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(datasourceToGatewayRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Creates a new data source on the specified on-premises gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceToGatewayRequest"> A request to create a new data source on a gateway. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasourceToGatewayRequest"/> is null. </exception>
        /// <remarks>
        /// &lt;br&gt;On premises data source credentials must be encrypted. The `encryptedConnection` parameter must be set to `Encrypted` and the credentials should be encrypted using the gateway public key.
        ///
        /// See the [Create Gateway DataSource](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/CreateDatasource.ps1) PowerShell script for an example of using this API, this script uses the PowerShell script mentioned in the note below for encrypting the credentials.
        ///
        /// &gt; [!NOTE]
        /// &gt; To encrypt credentials, see [Configure credentials programmatically](/power-bi/developer/embedded/configure-credentials) for Power BI and review the EncryptCredentials [.NET Core](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/.NET%20Core/EncryptCredentials), [Java](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/Java/EncryptCredentials), [Python](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/Python/Encrypt%20credentials) and [PowerShell](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/EncryptGatewayCredentials.ps1) examples.
        ///
        /// ## Permissions
        ///
        /// Supports only on-premises gateways and the user must have gateway admin permissions
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Virtual network (VNet) and Cloud gateways aren't supported.
        /// - OAuth2 as a credential type isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<GatewayDatasource>> CreateDatasourceAsync(Guid gatewayId, PublishDatasourceToGatewayRequest datasourceToGatewayRequest, CancellationToken cancellationToken = default)
        {
            if (datasourceToGatewayRequest == null)
            {
                throw new ArgumentNullException(nameof(datasourceToGatewayRequest));
            }

            using var message = CreateCreateDatasourceRequest(gatewayId, datasourceToGatewayRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        GatewayDatasource value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GatewayDatasource.DeserializeGatewayDatasource(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Creates a new data source on the specified on-premises gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceToGatewayRequest"> A request to create a new data source on a gateway. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasourceToGatewayRequest"/> is null. </exception>
        /// <remarks>
        /// &lt;br&gt;On premises data source credentials must be encrypted. The `encryptedConnection` parameter must be set to `Encrypted` and the credentials should be encrypted using the gateway public key.
        ///
        /// See the [Create Gateway DataSource](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/CreateDatasource.ps1) PowerShell script for an example of using this API, this script uses the PowerShell script mentioned in the note below for encrypting the credentials.
        ///
        /// &gt; [!NOTE]
        /// &gt; To encrypt credentials, see [Configure credentials programmatically](/power-bi/developer/embedded/configure-credentials) for Power BI and review the EncryptCredentials [.NET Core](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/.NET%20Core/EncryptCredentials), [Java](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/Java/EncryptCredentials), [Python](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/Python/Encrypt%20credentials) and [PowerShell](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/EncryptGatewayCredentials.ps1) examples.
        ///
        /// ## Permissions
        ///
        /// Supports only on-premises gateways and the user must have gateway admin permissions
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Virtual network (VNet) and Cloud gateways aren't supported.
        /// - OAuth2 as a credential type isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<GatewayDatasource> CreateDatasource(Guid gatewayId, PublishDatasourceToGatewayRequest datasourceToGatewayRequest, CancellationToken cancellationToken = default)
        {
            if (datasourceToGatewayRequest == null)
            {
                throw new ArgumentNullException(nameof(datasourceToGatewayRequest));
            }

            using var message = CreateCreateDatasourceRequest(gatewayId, datasourceToGatewayRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        GatewayDatasource value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GatewayDatasource.DeserializeGatewayDatasource(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasourceRequest(Guid gatewayId, Guid datasourceId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/gateways/", false);
            uri.AppendPath(gatewayId, true);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(datasourceId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the specified data source from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<GatewayDatasource>> GetDatasourceAsync(Guid gatewayId, Guid datasourceId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasourceRequest(gatewayId, datasourceId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GatewayDatasource value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GatewayDatasource.DeserializeGatewayDatasource(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the specified data source from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<GatewayDatasource> GetDatasource(Guid gatewayId, Guid datasourceId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasourceRequest(gatewayId, datasourceId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GatewayDatasource value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GatewayDatasource.DeserializeGatewayDatasource(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteDatasourceRequest(Guid gatewayId, Guid datasourceId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/gateways/", false);
            uri.AppendPath(gatewayId, true);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(datasourceId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Deletes the specified data source from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> DeleteDatasourceAsync(Guid gatewayId, Guid datasourceId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteDatasourceRequest(gatewayId, datasourceId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deletes the specified data source from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response DeleteDatasource(Guid gatewayId, Guid datasourceId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeleteDatasourceRequest(gatewayId, datasourceId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateDatasourceRequest(Guid gatewayId, Guid datasourceId, UpdateDatasourceRequest updateDatasourceRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/gateways/", false);
            uri.AppendPath(gatewayId, true);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(datasourceId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(updateDatasourceRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the credentials of the specified data source from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="updateDatasourceRequest"> The update data source request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="updateDatasourceRequest"/> is null. </exception>
        /// <remarks>
        /// On Premises data source credentials must be encrypted, as described in the [On-premise encrypted credentials example](/rest/api/power-bi/gateways/update-datasource#on-premise-encrypted-credentials-example).
        ///
        ///  See the [Patch Datasource Credentials](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/PatchDatasourceCredentials.ps1) PowerShell script for an example of using this API, this script uses the PowerShell script mentioned in the note below for encrypting the credentials.
        ///
        /// &gt; [!NOTE]
        /// &gt; - To encrypt credentials, see [Configure credentials programmatically](/power-bi/developer/embedded/configure-credentials) for Power BI and review the EncryptCredentials [.NET Core](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/.NET%20Core/EncryptCredentials), [Java](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/Java/EncryptCredentials), [Python](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/Python/Encrypt%20credentials) and [PowerShell](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/EncryptGatewayCredentials.ps1) examples.
        /// &gt; - Windows credentials before encryption look like the credentials in the credentials of [Basic credentials example](/rest/api/power-bi/gateways/update-datasource#basic-credentials-example).
        ///
        /// When changing from single sign-on to other credential types, such as `Basic` or `OAuth2`, set the parameter `useEndUserOAuth2Credentials` to `false` as described in the [Basic credentials example](/rest/api/power-bi/gateways/update-datasource#basic-credentials-example).
        ///
        /// OAuth 2.0 credentials are valid as long as the provided token is valid. When using the OAuth 2.0 credential type, do the following:
        /// - Set the OAuth 2.0 token audience correctly, according to the data source type.
        /// - Send the OAuth 2.0 token in the payload as shown in the [OAuth 2.0 credentials example](/rest/api/power-bi/gateways/update-datasource#oauth-2.0-credentials-example).
        /// - If you're using **Extension** data sources, don't set `useCallerAADIdentity` to `true`.
        ///
        /// ## Permissions
        ///
        /// - With on-premises gateways, the user must have gateway admin permissions.
        /// - With cloud data sources, user must be the data source owner. Use [Datasets - Take Over API](/rest/api/power-bi/datasets/take-over-in-group) to transfer ownership over the specified dataset or [Paginated reports - Take Over API](/rest/api/power-bi/reports/take-over-in-group) to transfer ownership of the data sources over the specified paginated report.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - When setting OAuth credentials, a refresh token isn't incorporated as it is when setting credentials through the UI in Power BI service. Therefore, credentials can only be used for one hour.
        /// - Virtual network (VNet) gateways aren't supported.
        /// - SAS Token credentials are supported only with AzureBlobStorage and AzureDataLakeStorage.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UpdateDatasourceAsync(Guid gatewayId, Guid datasourceId, UpdateDatasourceRequest updateDatasourceRequest, CancellationToken cancellationToken = default)
        {
            if (updateDatasourceRequest == null)
            {
                throw new ArgumentNullException(nameof(updateDatasourceRequest));
            }

            using var message = CreateUpdateDatasourceRequest(gatewayId, datasourceId, updateDatasourceRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the credentials of the specified data source from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="updateDatasourceRequest"> The update data source request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="updateDatasourceRequest"/> is null. </exception>
        /// <remarks>
        /// On Premises data source credentials must be encrypted, as described in the [On-premise encrypted credentials example](/rest/api/power-bi/gateways/update-datasource#on-premise-encrypted-credentials-example).
        ///
        ///  See the [Patch Datasource Credentials](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/PatchDatasourceCredentials.ps1) PowerShell script for an example of using this API, this script uses the PowerShell script mentioned in the note below for encrypting the credentials.
        ///
        /// &gt; [!NOTE]
        /// &gt; - To encrypt credentials, see [Configure credentials programmatically](/power-bi/developer/embedded/configure-credentials) for Power BI and review the EncryptCredentials [.NET Core](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/.NET%20Core/EncryptCredentials), [Java](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/Java/EncryptCredentials), [Python](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/Python/Encrypt%20credentials) and [PowerShell](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/EncryptGatewayCredentials.ps1) examples.
        /// &gt; - Windows credentials before encryption look like the credentials in the credentials of [Basic credentials example](/rest/api/power-bi/gateways/update-datasource#basic-credentials-example).
        ///
        /// When changing from single sign-on to other credential types, such as `Basic` or `OAuth2`, set the parameter `useEndUserOAuth2Credentials` to `false` as described in the [Basic credentials example](/rest/api/power-bi/gateways/update-datasource#basic-credentials-example).
        ///
        /// OAuth 2.0 credentials are valid as long as the provided token is valid. When using the OAuth 2.0 credential type, do the following:
        /// - Set the OAuth 2.0 token audience correctly, according to the data source type.
        /// - Send the OAuth 2.0 token in the payload as shown in the [OAuth 2.0 credentials example](/rest/api/power-bi/gateways/update-datasource#oauth-2.0-credentials-example).
        /// - If you're using **Extension** data sources, don't set `useCallerAADIdentity` to `true`.
        ///
        /// ## Permissions
        ///
        /// - With on-premises gateways, the user must have gateway admin permissions.
        /// - With cloud data sources, user must be the data source owner. Use [Datasets - Take Over API](/rest/api/power-bi/datasets/take-over-in-group) to transfer ownership over the specified dataset or [Paginated reports - Take Over API](/rest/api/power-bi/reports/take-over-in-group) to transfer ownership of the data sources over the specified paginated report.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - When setting OAuth credentials, a refresh token isn't incorporated as it is when setting credentials through the UI in Power BI service. Therefore, credentials can only be used for one hour.
        /// - Virtual network (VNet) gateways aren't supported.
        /// - SAS Token credentials are supported only with AzureBlobStorage and AzureDataLakeStorage.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UpdateDatasource(Guid gatewayId, Guid datasourceId, UpdateDatasourceRequest updateDatasourceRequest, CancellationToken cancellationToken = default)
        {
            if (updateDatasourceRequest == null)
            {
                throw new ArgumentNullException(nameof(updateDatasourceRequest));
            }

            using var message = CreateUpdateDatasourceRequest(gatewayId, datasourceId, updateDatasourceRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasourceStatusRequest(Guid gatewayId, Guid datasourceId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/gateways/", false);
            uri.AppendPath(gatewayId, true);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(datasourceId, true);
            uri.AppendPath("/status", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Checks the connectivity status of the specified data source from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> GetDatasourceStatusAsync(Guid gatewayId, Guid datasourceId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasourceStatusRequest(gatewayId, datasourceId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Checks the connectivity status of the specified data source from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response GetDatasourceStatus(Guid gatewayId, Guid datasourceId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasourceStatusRequest(gatewayId, datasourceId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasourceUsersRequest(Guid gatewayId, Guid datasourceId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/gateways/", false);
            uri.AppendPath(gatewayId, true);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(datasourceId, true);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of users who have access to the specified data source. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DatasourceUsers>> GetDatasourceUsersAsync(Guid gatewayId, Guid datasourceId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasourceUsersRequest(gatewayId, datasourceId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasourceUsers value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatasourceUsers.DeserializeDatasourceUsers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of users who have access to the specified data source. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DatasourceUsers> GetDatasourceUsers(Guid gatewayId, Guid datasourceId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasourceUsersRequest(gatewayId, datasourceId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasourceUsers value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatasourceUsers.DeserializeDatasourceUsers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAddDatasourceUserRequest(Guid gatewayId, Guid datasourceId, DatasourceUser addUserToDatasourceRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/gateways/", false);
            uri.AppendPath(gatewayId, true);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(datasourceId, true);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(addUserToDatasourceRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Grants or updates the permissions required to use the specified data source for the specified user. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="addUserToDatasourceRequest"> The add user to data source request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="addUserToDatasourceRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// Adding groups through the API is not supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> AddDatasourceUserAsync(Guid gatewayId, Guid datasourceId, DatasourceUser addUserToDatasourceRequest, CancellationToken cancellationToken = default)
        {
            if (addUserToDatasourceRequest == null)
            {
                throw new ArgumentNullException(nameof(addUserToDatasourceRequest));
            }

            using var message = CreateAddDatasourceUserRequest(gatewayId, datasourceId, addUserToDatasourceRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Grants or updates the permissions required to use the specified data source for the specified user. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="addUserToDatasourceRequest"> The add user to data source request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="addUserToDatasourceRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// Adding groups through the API is not supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response AddDatasourceUser(Guid gatewayId, Guid datasourceId, DatasourceUser addUserToDatasourceRequest, CancellationToken cancellationToken = default)
        {
            if (addUserToDatasourceRequest == null)
            {
                throw new ArgumentNullException(nameof(addUserToDatasourceRequest));
            }

            using var message = CreateAddDatasourceUserRequest(gatewayId, datasourceId, addUserToDatasourceRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteDatasourceUserRequest(Guid gatewayId, Guid datasourceId, string emailAdress, Guid? profileId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/gateways/", false);
            uri.AppendPath(gatewayId, true);
            uri.AppendPath("/datasources/", false);
            uri.AppendPath(datasourceId, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(emailAdress, true);
            if (profileId != null)
            {
                uri.AppendQuery("profileId", profileId.Value, true);
            }
            request.Uri = uri;
            return message;
        }

        /// <summary> Removes the specified user from the specified data source. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="emailAdress"> The user's email address or the object ID of the service principal. </param>
        /// <param name="profileId"> The service principal profile ID to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="emailAdress"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> DeleteDatasourceUserAsync(Guid gatewayId, Guid datasourceId, string emailAdress, Guid? profileId = null, CancellationToken cancellationToken = default)
        {
            if (emailAdress == null)
            {
                throw new ArgumentNullException(nameof(emailAdress));
            }

            using var message = CreateDeleteDatasourceUserRequest(gatewayId, datasourceId, emailAdress, profileId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Removes the specified user from the specified data source. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="emailAdress"> The user's email address or the object ID of the service principal. </param>
        /// <param name="profileId"> The service principal profile ID to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="emailAdress"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response DeleteDatasourceUser(Guid gatewayId, Guid datasourceId, string emailAdress, Guid? profileId = null, CancellationToken cancellationToken = default)
        {
            if (emailAdress == null)
            {
                throw new ArgumentNullException(nameof(emailAdress));
            }

            using var message = CreateDeleteDatasourceUserRequest(gatewayId, datasourceId, emailAdress, profileId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
