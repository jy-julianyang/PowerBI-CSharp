// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    internal partial class AppsRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of AppsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public AppsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://api.powerbi.com");
        }

        internal HttpMessage CreateGetAppsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/apps", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of installed apps. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// App.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Apps>> GetAppsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAppsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Apps value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Apps.DeserializeApps(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of installed apps. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// App.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Apps> GetApps(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAppsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Apps value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Apps.DeserializeApps(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAppRequest(Guid appId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/apps/", false);
            uri.AppendPath(appId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the specified installed app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// App.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<App>> GetAppAsync(Guid appId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAppRequest(appId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        App value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = App.DeserializeApp(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the specified installed app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// App.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<App> GetApp(Guid appId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAppRequest(appId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        App value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = App.DeserializeApp(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetReportsRequest(Guid appId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/apps/", false);
            uri.AppendPath(appId, true);
            uri.AppendPath("/reports", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of reports from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Reports>> GetReportsAsync(Guid appId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportsRequest(appId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Reports value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Reports.DeserializeReports(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of reports from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Reports> GetReports(Guid appId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportsRequest(appId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Reports value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Reports.DeserializeReports(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetReportRequest(Guid appId, Guid reportId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/apps/", false);
            uri.AppendPath(appId, true);
            uri.AppendPath("/reports/", false);
            uri.AppendPath(reportId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the specified report from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Report>> GetReportAsync(Guid appId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportRequest(appId, reportId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Report value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Report.DeserializeReport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the specified report from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Report> GetReport(Guid appId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetReportRequest(appId, reportId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Report value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Report.DeserializeReport(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDashboardsRequest(Guid appId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/apps/", false);
            uri.AppendPath(appId, true);
            uri.AppendPath("/dashboards", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of dashboards from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Dashboards>> GetDashboardsAsync(Guid appId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDashboardsRequest(appId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Dashboards value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Dashboards.DeserializeDashboards(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of dashboards from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Dashboards> GetDashboards(Guid appId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDashboardsRequest(appId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Dashboards value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Dashboards.DeserializeDashboards(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDashboardRequest(Guid appId, Guid dashboardId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/apps/", false);
            uri.AppendPath(appId, true);
            uri.AppendPath("/dashboards/", false);
            uri.AppendPath(dashboardId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the specified dashboard from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Dashboard>> GetDashboardAsync(Guid appId, Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDashboardRequest(appId, dashboardId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Dashboard value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Dashboard.DeserializeDashboard(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the specified dashboard from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Dashboard> GetDashboard(Guid appId, Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDashboardRequest(appId, dashboardId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Dashboard value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Dashboard.DeserializeDashboard(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetTilesRequest(Guid appId, Guid dashboardId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/apps/", false);
            uri.AppendPath(appId, true);
            uri.AppendPath("/dashboards/", false);
            uri.AppendPath(dashboardId, true);
            uri.AppendPath("/tiles", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of tiles within the specified dashboard from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Tiles>> GetTilesAsync(Guid appId, Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetTilesRequest(appId, dashboardId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Tiles value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Tiles.DeserializeTiles(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of tiles within the specified dashboard from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Tiles> GetTiles(Guid appId, Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetTilesRequest(appId, dashboardId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Tiles value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Tiles.DeserializeTiles(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetTileRequest(Guid appId, Guid dashboardId, Guid tileId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/apps/", false);
            uri.AppendPath(appId, true);
            uri.AppendPath("/dashboards/", false);
            uri.AppendPath(dashboardId, true);
            uri.AppendPath("/tiles/", false);
            uri.AppendPath(tileId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the specified tile within the specified dashboard from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="tileId"> The tile ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Supported tiles include datasets and live tiles that contain an entire report page.
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Tile>> GetTileAsync(Guid appId, Guid dashboardId, Guid tileId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetTileRequest(appId, dashboardId, tileId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Tile value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Tile.DeserializeTile(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the specified tile within the specified dashboard from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="tileId"> The tile ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Supported tiles include datasets and live tiles that contain an entire report page.
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Tile> GetTile(Guid appId, Guid dashboardId, Guid tileId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetTileRequest(appId, dashboardId, tileId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Tile value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Tile.DeserializeTile(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAppsAsAdminRequest(int top, int? skip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/apps", false);
            uri.AppendQuery("$top", top, true);
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of apps in the organization. </summary>
        /// <param name="top"> The requested number of apps. </param>
        /// <param name="skip"> The number entries to be skipped. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// The query parameter $top is required.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<AdminApps>> GetAppsAsAdminAsync(int top, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAppsAsAdminRequest(top, skip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminApps value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AdminApps.DeserializeAdminApps(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of apps in the organization. </summary>
        /// <param name="top"> The requested number of apps. </param>
        /// <param name="skip"> The number entries to be skipped. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// The query parameter $top is required.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<AdminApps> GetAppsAsAdmin(int top, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAppsAsAdminRequest(top, skip);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminApps value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AdminApps.DeserializeAdminApps(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetAppUsersAsAdminRequest(Guid appId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/apps/", false);
            uri.AppendPath(appId, true);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of users that have access to the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<AppUsers>> GetAppUsersAsAdminAsync(Guid appId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAppUsersAsAdminRequest(appId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AppUsers value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AppUsers.DeserializeAppUsers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of users that have access to the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<AppUsers> GetAppUsersAsAdmin(Guid appId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetAppUsersAsAdminRequest(appId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AppUsers value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AppUsers.DeserializeAppUsers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
