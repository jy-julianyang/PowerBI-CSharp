// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    /// <summary> The Admin service client. </summary>
    public partial class AdminClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal AdminRestClient RestClient { get; }

        /// <summary> Initializes a new instance of AdminClient for mocking. </summary>
        protected AdminClient()
        {
        }

        /// <summary> Initializes a new instance of AdminClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public AdminClient(TokenCredential credential, Uri endpoint = null, PowerBIClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("https://api.powerbi.com");

            options ??= new PowerBIClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://analysis.windows.net/powerbi/api/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new AdminRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of AdminClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal AdminClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new AdminRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Adds an encryption key for Power BI workspaces assigned to a capacity. </summary>
        /// <param name="tenantKeyCreationRequest"> Tenant key information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 600 requests per hour.
        /// </remarks>
        public virtual async Task<Response<TenantKey>> AddPowerBIEncryptionKeyAsync(TenantKeyCreationRequest tenantKeyCreationRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.AddPowerBIEncryptionKey");
            scope.Start();
            try
            {
                return await RestClient.AddPowerBIEncryptionKeyAsync(tenantKeyCreationRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Adds an encryption key for Power BI workspaces assigned to a capacity. </summary>
        /// <param name="tenantKeyCreationRequest"> Tenant key information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 600 requests per hour.
        /// </remarks>
        public virtual Response<TenantKey> AddPowerBIEncryptionKey(TenantKeyCreationRequest tenantKeyCreationRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.AddPowerBIEncryptionKey");
            scope.Start();
            try
            {
                return RestClient.AddPowerBIEncryptionKey(tenantKeyCreationRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the encryption keys for the tenant. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual async Task<Response<TenantKeys>> GetPowerBIEncryptionKeysAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.GetPowerBIEncryptionKeys");
            scope.Start();
            try
            {
                return await RestClient.GetPowerBIEncryptionKeysAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the encryption keys for the tenant. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual Response<TenantKeys> GetPowerBIEncryptionKeys(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.GetPowerBIEncryptionKeys");
            scope.Start();
            try
            {
                return RestClient.GetPowerBIEncryptionKeys(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Rotate the encryption key for Power BI workspaces assigned to a capacity. </summary>
        /// <param name="tenantKeyId"> The tenant key ID. </param>
        /// <param name="tenantKeyRotationRequest"> Tenant key information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 600 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<TenantKey>> RotatePowerBIEncryptionKeyAsync(Guid tenantKeyId, TenantKeyRotationRequest tenantKeyRotationRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.RotatePowerBIEncryptionKey");
            scope.Start();
            try
            {
                return await RestClient.RotatePowerBIEncryptionKeyAsync(tenantKeyId, tenantKeyRotationRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Rotate the encryption key for Power BI workspaces assigned to a capacity. </summary>
        /// <param name="tenantKeyId"> The tenant key ID. </param>
        /// <param name="tenantKeyRotationRequest"> Tenant key information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 600 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<TenantKey> RotatePowerBIEncryptionKey(Guid tenantKeyId, TenantKeyRotationRequest tenantKeyRotationRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.RotatePowerBIEncryptionKey");
            scope.Start();
            try
            {
                return RestClient.RotatePowerBIEncryptionKey(tenantKeyId, tenantKeyRotationRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of capacities for the organization. </summary>
        /// <param name="expand"> Expands related entities inline. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual async Task<Response<Capacities>> GetCapacitiesAsAdminAsync(string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.GetCapacitiesAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetCapacitiesAsAdminAsync(expand, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of capacities for the organization. </summary>
        /// <param name="expand"> Expands related entities inline. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual Response<Capacities> GetCapacitiesAsAdmin(string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.GetCapacitiesAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetCapacitiesAsAdmin(expand, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Changes specific capacity information. Currently, this API call only supports changing the capacity's encryption key. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="capacityPatchRequest"> Patch capacity information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual async Task<Response> PatchCapacityAsAdminAsync(Guid capacityId, CapacityPatchRequest capacityPatchRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.PatchCapacityAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.PatchCapacityAsAdminAsync(capacityId, capacityPatchRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Changes specific capacity information. Currently, this API call only supports changing the capacity's encryption key. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="capacityPatchRequest"> Patch capacity information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual Response PatchCapacityAsAdmin(Guid capacityId, CapacityPatchRequest capacityPatchRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.PatchCapacityAsAdmin");
            scope.Start();
            try
            {
                return RestClient.PatchCapacityAsAdmin(capacityId, capacityPatchRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of refreshables for the organization within a capacity. </summary>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual async Task<Response<Refreshables>> GetRefreshablesAsync(int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.GetRefreshables");
            scope.Start();
            try
            {
                return await RestClient.GetRefreshablesAsync(top, expand, filter, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of refreshables for the organization within a capacity. </summary>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual Response<Refreshables> GetRefreshables(int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.GetRefreshables");
            scope.Start();
            try
            {
                return RestClient.GetRefreshables(top, expand, filter, skip, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of refreshables for the specified capacity that the user has access to. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual async Task<Response<Refreshables>> GetRefreshablesForCapacityAsync(Guid capacityId, int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.GetRefreshablesForCapacity");
            scope.Start();
            try
            {
                return await RestClient.GetRefreshablesForCapacityAsync(capacityId, top, expand, filter, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of refreshables for the specified capacity that the user has access to. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual Response<Refreshables> GetRefreshablesForCapacity(Guid capacityId, int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.GetRefreshablesForCapacity");
            scope.Start();
            try
            {
                return RestClient.GetRefreshablesForCapacity(capacityId, top, expand, filter, skip, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified refreshable for the specified capacity that the user has access to. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="refreshableId"> The refreshable ID. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual async Task<Response<Refreshables>> GetRefreshableForCapacityAsync(Guid capacityId, string refreshableId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.GetRefreshableForCapacity");
            scope.Start();
            try
            {
                return await RestClient.GetRefreshableForCapacityAsync(capacityId, refreshableId, expand, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified refreshable for the specified capacity that the user has access to. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="refreshableId"> The refreshable ID. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public virtual Response<Refreshables> GetRefreshableForCapacity(Guid capacityId, string refreshableId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.GetRefreshableForCapacity");
            scope.Start();
            try
            {
                return RestClient.GetRefreshableForCapacity(capacityId, refreshableId, expand, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of audit activity events for a tenant. </summary>
        /// <param name="startDateTime"> Start date and time of the window for audit event results. Must be in ISO 8601 compliant UTC format. </param>
        /// <param name="endDateTime"> End date and time of the window for audit event results. Must be in ISO 8601 compliant UTC format. </param>
        /// <param name="continuationToken"> Token required to get the next chunk of the result set. </param>
        /// <param name="filter"> Filters the results based on a boolean condition, using 'Activity', 'UserId', or both properties. Supports only 'eq' and 'and' operators. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Provide either a continuation token or both a start and end date time. `StartDateTime` and `EndDateTime` must be in the same UTC day and should be wrapped in single quotes.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// - Maximum 200 requests per hour.
        /// - Activity logging isn't supported for Microsoft Cloud Deutschland.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<ActivityEventResponse>> GetActivityEventsAsync(string startDateTime = null, string endDateTime = null, string continuationToken = null, string filter = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.GetActivityEvents");
            scope.Start();
            try
            {
                return await RestClient.GetActivityEventsAsync(startDateTime, endDateTime, continuationToken, filter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of audit activity events for a tenant. </summary>
        /// <param name="startDateTime"> Start date and time of the window for audit event results. Must be in ISO 8601 compliant UTC format. </param>
        /// <param name="endDateTime"> End date and time of the window for audit event results. Must be in ISO 8601 compliant UTC format. </param>
        /// <param name="continuationToken"> Token required to get the next chunk of the result set. </param>
        /// <param name="filter"> Filters the results based on a boolean condition, using 'Activity', 'UserId', or both properties. Supports only 'eq' and 'and' operators. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Provide either a continuation token or both a start and end date time. `StartDateTime` and `EndDateTime` must be in the same UTC day and should be wrapped in single quotes.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// - Maximum 200 requests per hour.
        /// - Activity logging isn't supported for Microsoft Cloud Deutschland.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<ActivityEventResponse> GetActivityEvents(string startDateTime = null, string endDateTime = null, string continuationToken = null, string filter = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AdminClient.GetActivityEvents");
            scope.Start();
            try
            {
                return RestClient.GetActivityEvents(startDateTime, endDateTime, continuationToken, filter, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
