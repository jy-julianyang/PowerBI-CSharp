// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    internal partial class PipelinesRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of PipelinesRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public PipelinesRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://api.powerbi.com");
        }

        internal HttpMessage CreateGetPipelinesRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/pipelines", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of deployment pipelines that the user has access to. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.Read.All or Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Pipelines>> GetPipelinesAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelinesRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Pipelines value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Pipelines.DeserializePipelines(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of deployment pipelines that the user has access to. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.Read.All or Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Pipelines> GetPipelines(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelinesRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Pipelines value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Pipelines.DeserializePipelines(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreatePipelineRequest(CreatePipelineRequest createPipelineRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/pipelines", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(createPipelineRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Creates a new deployment pipeline. </summary>
        /// <param name="createPipelineRequest"> The create pipeline request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="createPipelineRequest"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Pipeline>> CreatePipelineAsync(CreatePipelineRequest createPipelineRequest, CancellationToken cancellationToken = default)
        {
            if (createPipelineRequest == null)
            {
                throw new ArgumentNullException(nameof(createPipelineRequest));
            }

            using var message = CreateCreatePipelineRequest(createPipelineRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Pipeline value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Pipeline.DeserializePipeline(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Creates a new deployment pipeline. </summary>
        /// <param name="createPipelineRequest"> The create pipeline request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="createPipelineRequest"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Pipeline> CreatePipeline(CreatePipelineRequest createPipelineRequest, CancellationToken cancellationToken = default)
        {
            if (createPipelineRequest == null)
            {
                throw new ArgumentNullException(nameof(createPipelineRequest));
            }

            using var message = CreateCreatePipelineRequest(createPipelineRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        Pipeline value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Pipeline.DeserializePipeline(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPipelineRequest(Guid pipelineId, string expand)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/pipelines/", false);
            uri.AppendPath(pipelineId, true);
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `stages`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Pipeline>> GetPipelineAsync(Guid pipelineId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelineRequest(pipelineId, expand);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Pipeline value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Pipeline.DeserializePipeline(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `stages`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Pipeline> GetPipeline(Guid pipelineId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelineRequest(pipelineId, expand);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Pipeline value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Pipeline.DeserializePipeline(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdatePipelineRequest(Guid pipelineId, UpdatePipelineRequest updatePipelineRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/pipelines/", false);
            uri.AppendPath(pipelineId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(updatePipelineRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="updatePipelineRequest"> The update pipeline request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="updatePipelineRequest"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Pipeline>> UpdatePipelineAsync(Guid pipelineId, UpdatePipelineRequest updatePipelineRequest, CancellationToken cancellationToken = default)
        {
            if (updatePipelineRequest == null)
            {
                throw new ArgumentNullException(nameof(updatePipelineRequest));
            }

            using var message = CreateUpdatePipelineRequest(pipelineId, updatePipelineRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Pipeline value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Pipeline.DeserializePipeline(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="updatePipelineRequest"> The update pipeline request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="updatePipelineRequest"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Pipeline> UpdatePipeline(Guid pipelineId, UpdatePipelineRequest updatePipelineRequest, CancellationToken cancellationToken = default)
        {
            if (updatePipelineRequest == null)
            {
                throw new ArgumentNullException(nameof(updatePipelineRequest));
            }

            using var message = CreateUpdatePipelineRequest(pipelineId, updatePipelineRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Pipeline value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Pipeline.DeserializePipeline(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeletePipelineRequest(Guid pipelineId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/pipelines/", false);
            uri.AppendPath(pipelineId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Deletes the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This operation will fail if there's an active deployment operation.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> DeletePipelineAsync(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeletePipelineRequest(pipelineId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deletes the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This operation will fail if there's an active deployment operation.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response DeletePipeline(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var message = CreateDeletePipelineRequest(pipelineId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPipelineUsersRequest(Guid pipelineId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/pipelines/", false);
            uri.AppendPath(pipelineId, true);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of users that have access to the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<PipelineUsers>> GetPipelineUsersAsync(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelineUsersRequest(pipelineId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PipelineUsers value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PipelineUsers.DeserializePipelineUsers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of users that have access to the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<PipelineUsers> GetPipelineUsers(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelineUsersRequest(pipelineId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PipelineUsers value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PipelineUsers.DeserializePipelineUsers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdatePipelineUserRequest(Guid pipelineId, PipelineUser userDetails)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/pipelines/", false);
            uri.AppendPath(pipelineId, true);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(userDetails);
            request.Content = content;
            return message;
        }

        /// <summary> Grants user permissions to the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userDetails"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UpdatePipelineUserAsync(Guid pipelineId, PipelineUser userDetails, CancellationToken cancellationToken = default)
        {
            if (userDetails == null)
            {
                throw new ArgumentNullException(nameof(userDetails));
            }

            using var message = CreateUpdatePipelineUserRequest(pipelineId, userDetails);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Grants user permissions to the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userDetails"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UpdatePipelineUser(Guid pipelineId, PipelineUser userDetails, CancellationToken cancellationToken = default)
        {
            if (userDetails == null)
            {
                throw new ArgumentNullException(nameof(userDetails));
            }

            using var message = CreateUpdatePipelineUserRequest(pipelineId, userDetails);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeletePipelineUserRequest(Guid pipelineId, string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/pipelines/", false);
            uri.AppendPath(pipelineId, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Removes user permissions from the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="identifier"> To delete user pipeline permissions, provide the user principal name (UPN) of the user. To delete a service principal or a security group's pipeline permissions, provide the Object ID of the service principal or security group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> DeletePipelineUserAsync(Guid pipelineId, string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeletePipelineUserRequest(pipelineId, identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Removes user permissions from the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="identifier"> To delete user pipeline permissions, provide the user principal name (UPN) of the user. To delete a service principal or a security group's pipeline permissions, provide the Object ID of the service principal or security group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response DeletePipelineUser(Guid pipelineId, string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeletePipelineUserRequest(pipelineId, identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPipelineStagesRequest(Guid pipelineId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/pipelines/", false);
            uri.AppendPath(pipelineId, true);
            uri.AppendPath("/stages", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the stages of the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<PipelineStages>> GetPipelineStagesAsync(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelineStagesRequest(pipelineId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PipelineStages value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PipelineStages.DeserializePipelineStages(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the stages of the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<PipelineStages> GetPipelineStages(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelineStagesRequest(pipelineId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PipelineStages value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PipelineStages.DeserializePipelineStages(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAssignWorkspaceRequest(Guid pipelineId, int stageOrder, AssignWorkspaceRequest assignWorkspaceRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/pipelines/", false);
            uri.AppendPath(pipelineId, true);
            uri.AppendPath("/stages/", false);
            uri.AppendPath(stageOrder, true);
            uri.AppendPath("/assignWorkspace", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(assignWorkspaceRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Assigns the specified workspace to the specified deployment pipeline stage. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="stageOrder"> The deployment pipeline stage order. Development (0), Test (1), Production (2). </param>
        /// <param name="assignWorkspaceRequest"> The assign workspace request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assignWorkspaceRequest"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All and Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - The specified deployment pipeline stage isn't already assigned.
        /// - You must be an admin of the specified workspace.
        /// - The specified workspace isn't assigned to any other deployment pipeline.
        /// - This operation will fail if there's an active deployment operation.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> AssignWorkspaceAsync(Guid pipelineId, int stageOrder, AssignWorkspaceRequest assignWorkspaceRequest, CancellationToken cancellationToken = default)
        {
            if (assignWorkspaceRequest == null)
            {
                throw new ArgumentNullException(nameof(assignWorkspaceRequest));
            }

            using var message = CreateAssignWorkspaceRequest(pipelineId, stageOrder, assignWorkspaceRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Assigns the specified workspace to the specified deployment pipeline stage. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="stageOrder"> The deployment pipeline stage order. Development (0), Test (1), Production (2). </param>
        /// <param name="assignWorkspaceRequest"> The assign workspace request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="assignWorkspaceRequest"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All and Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - The specified deployment pipeline stage isn't already assigned.
        /// - You must be an admin of the specified workspace.
        /// - The specified workspace isn't assigned to any other deployment pipeline.
        /// - This operation will fail if there's an active deployment operation.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response AssignWorkspace(Guid pipelineId, int stageOrder, AssignWorkspaceRequest assignWorkspaceRequest, CancellationToken cancellationToken = default)
        {
            if (assignWorkspaceRequest == null)
            {
                throw new ArgumentNullException(nameof(assignWorkspaceRequest));
            }

            using var message = CreateAssignWorkspaceRequest(pipelineId, stageOrder, assignWorkspaceRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUnassignWorkspaceRequest(Guid pipelineId, int stageOrder)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/pipelines/", false);
            uri.AppendPath(pipelineId, true);
            uri.AppendPath("/stages/", false);
            uri.AppendPath(stageOrder, true);
            uri.AppendPath("/unassignWorkspace", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Unassigns the workspace from the specified stage in the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="stageOrder"> The deployment pipeline stage order. Development (0), Test (1), Production (2). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This operation will fail if there's an active deployment operation.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UnassignWorkspaceAsync(Guid pipelineId, int stageOrder, CancellationToken cancellationToken = default)
        {
            using var message = CreateUnassignWorkspaceRequest(pipelineId, stageOrder);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Unassigns the workspace from the specified stage in the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="stageOrder"> The deployment pipeline stage order. Development (0), Test (1), Production (2). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This operation will fail if there's an active deployment operation.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UnassignWorkspace(Guid pipelineId, int stageOrder, CancellationToken cancellationToken = default)
        {
            using var message = CreateUnassignWorkspaceRequest(pipelineId, stageOrder);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPipelineStageArtifactsRequest(Guid pipelineId, int stageOrder)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/pipelines/", false);
            uri.AppendPath(pipelineId, true);
            uri.AppendPath("/stages/", false);
            uri.AppendPath(stageOrder, true);
            uri.AppendPath("/artifacts", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the supported items from the workspace assigned to the specified stage of the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="stageOrder"> The deployment pipeline stage order. Development (0), Test (1), Production (2). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// To learn about items that aren't supported in deployment pipelines, see [Unsupported items](/power-bi/create-reports/deployment-pipelines-process#unsupported-items).
        ///
        /// ## Permissions
        ///
        /// The user must at least be a contributor on the workspace assigned to the specified stage. For more information, see [Permissions](/power-bi/create-reports/deployment-pipelines-process#permissions).
        ///
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<PipelineStageArtifacts>> GetPipelineStageArtifactsAsync(Guid pipelineId, int stageOrder, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelineStageArtifactsRequest(pipelineId, stageOrder);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PipelineStageArtifacts value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PipelineStageArtifacts.DeserializePipelineStageArtifacts(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the supported items from the workspace assigned to the specified stage of the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="stageOrder"> The deployment pipeline stage order. Development (0), Test (1), Production (2). </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// To learn about items that aren't supported in deployment pipelines, see [Unsupported items](/power-bi/create-reports/deployment-pipelines-process#unsupported-items).
        ///
        /// ## Permissions
        ///
        /// The user must at least be a contributor on the workspace assigned to the specified stage. For more information, see [Permissions](/power-bi/create-reports/deployment-pipelines-process#permissions).
        ///
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<PipelineStageArtifacts> GetPipelineStageArtifacts(Guid pipelineId, int stageOrder, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelineStageArtifactsRequest(pipelineId, stageOrder);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PipelineStageArtifacts value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PipelineStageArtifacts.DeserializePipelineStageArtifacts(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPipelineOperationsRequest(Guid pipelineId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/pipelines/", false);
            uri.AppendPath(pipelineId, true);
            uri.AppendPath("/operations", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of the up-to-20 most recent deploy operations performed on the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<PipelineOperations>> GetPipelineOperationsAsync(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelineOperationsRequest(pipelineId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PipelineOperations value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PipelineOperations.DeserializePipelineOperations(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of the up-to-20 most recent deploy operations performed on the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<PipelineOperations> GetPipelineOperations(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelineOperationsRequest(pipelineId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PipelineOperations value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PipelineOperations.DeserializePipelineOperations(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPipelineOperationRequest(Guid pipelineId, Guid operationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/pipelines/", false);
            uri.AppendPath(pipelineId, true);
            uri.AppendPath("/operations/", false);
            uri.AppendPath(operationId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the details of the specified deploy operation performed on the specified deployment pipeline, including the deployment execution plan. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="operationId"> The operation ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Use to track the status of a deploy operation.
        ///
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<PipelineOperation>> GetPipelineOperationAsync(Guid pipelineId, Guid operationId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelineOperationRequest(pipelineId, operationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PipelineOperation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PipelineOperation.DeserializePipelineOperation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the details of the specified deploy operation performed on the specified deployment pipeline, including the deployment execution plan. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="operationId"> The operation ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Use to track the status of a deploy operation.
        ///
        /// ## Required Scope
        ///
        /// Pipeline.ReadWrite.All or Pipeline.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<PipelineOperation> GetPipelineOperation(Guid pipelineId, Guid operationId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelineOperationRequest(pipelineId, operationId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PipelineOperation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PipelineOperation.DeserializePipelineOperation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeployAllRequest(Guid pipelineId, DeployAllRequest deployRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/pipelines/", false);
            uri.AppendPath(pipelineId, true);
            uri.AppendPath("/deployAll", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(deployRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Deploys all supported items from the source stage of the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="deployRequest"> The deploy request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deployRequest"/> is null. </exception>
        /// <remarks>
        /// To learn about items that aren't supported in deployment pipelines, see [Unsupported items](/power-bi/create-reports/deployment-pipelines-process#unsupported-items).
        ///
        /// ## Permissions
        ///
        /// The user must at least be a contributor on both source and target deployment workspaces. For more information, see [Permissions](/power-bi/create-reports/deployment-pipelines-process#permissions).
        ///
        /// ## Required Scope
        ///
        /// Pipeline.Deploy
        ///
        /// ## Limitations
        ///
        /// Maximum 300 deployed items per request.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<PipelineOperation>> DeployAllAsync(Guid pipelineId, DeployAllRequest deployRequest, CancellationToken cancellationToken = default)
        {
            if (deployRequest == null)
            {
                throw new ArgumentNullException(nameof(deployRequest));
            }

            using var message = CreateDeployAllRequest(pipelineId, deployRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        PipelineOperation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PipelineOperation.DeserializePipelineOperation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deploys all supported items from the source stage of the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="deployRequest"> The deploy request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deployRequest"/> is null. </exception>
        /// <remarks>
        /// To learn about items that aren't supported in deployment pipelines, see [Unsupported items](/power-bi/create-reports/deployment-pipelines-process#unsupported-items).
        ///
        /// ## Permissions
        ///
        /// The user must at least be a contributor on both source and target deployment workspaces. For more information, see [Permissions](/power-bi/create-reports/deployment-pipelines-process#permissions).
        ///
        /// ## Required Scope
        ///
        /// Pipeline.Deploy
        ///
        /// ## Limitations
        ///
        /// Maximum 300 deployed items per request.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<PipelineOperation> DeployAll(Guid pipelineId, DeployAllRequest deployRequest, CancellationToken cancellationToken = default)
        {
            if (deployRequest == null)
            {
                throw new ArgumentNullException(nameof(deployRequest));
            }

            using var message = CreateDeployAllRequest(pipelineId, deployRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        PipelineOperation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PipelineOperation.DeserializePipelineOperation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSelectiveDeployRequest(Guid pipelineId, SelectiveDeployRequest deployRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/pipelines/", false);
            uri.AppendPath(pipelineId, true);
            uri.AppendPath("/deploy", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(deployRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Deploys the specified items from the source stage of the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="deployRequest"> The selective deploy request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deployRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must at least be a contributor on both source and target deployment workspaces. For more information, see [Permissions](/power-bi/create-reports/deployment-pipelines-process#permissions).
        ///
        /// ## Required Scope
        ///
        /// Pipeline.Deploy
        ///
        /// ## Limitations
        ///
        /// Maximum 300 deployed items per request.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<PipelineOperation>> SelectiveDeployAsync(Guid pipelineId, SelectiveDeployRequest deployRequest, CancellationToken cancellationToken = default)
        {
            if (deployRequest == null)
            {
                throw new ArgumentNullException(nameof(deployRequest));
            }

            using var message = CreateSelectiveDeployRequest(pipelineId, deployRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        PipelineOperation value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PipelineOperation.DeserializePipelineOperation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deploys the specified items from the source stage of the specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="deployRequest"> The selective deploy request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="deployRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must at least be a contributor on both source and target deployment workspaces. For more information, see [Permissions](/power-bi/create-reports/deployment-pipelines-process#permissions).
        ///
        /// ## Required Scope
        ///
        /// Pipeline.Deploy
        ///
        /// ## Limitations
        ///
        /// Maximum 300 deployed items per request.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<PipelineOperation> SelectiveDeploy(Guid pipelineId, SelectiveDeployRequest deployRequest, CancellationToken cancellationToken = default)
        {
            if (deployRequest == null)
            {
                throw new ArgumentNullException(nameof(deployRequest));
            }

            using var message = CreateSelectiveDeployRequest(pipelineId, deployRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    {
                        PipelineOperation value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PipelineOperation.DeserializePipelineOperation(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPipelinesAsAdminRequest(string expand, string filter, int? top, int? skip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/pipelines", false);
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of deployment pipelines for the organization. </summary>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `users` and `stages`. </param>
        /// <param name="filter"> Filters the results based on a boolean condition. This API only supports filtering for [orphaned deployment pipelines](#get-orphaned-deployment-pipelines-example). Unsupported filters will return unfiltered results. </param>
        /// <param name="top"> Returns only the first n results. This parameter must be in the range of 1-5000. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 5000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have administrator rights or authenticate using a service principal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<AdminPipelines>> GetPipelinesAsAdminAsync(string expand = null, string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelinesAsAdminRequest(expand, filter, top, skip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminPipelines value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AdminPipelines.DeserializeAdminPipelines(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of deployment pipelines for the organization. </summary>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `users` and `stages`. </param>
        /// <param name="filter"> Filters the results based on a boolean condition. This API only supports filtering for [orphaned deployment pipelines](#get-orphaned-deployment-pipelines-example). Unsupported filters will return unfiltered results. </param>
        /// <param name="top"> Returns only the first n results. This parameter must be in the range of 1-5000. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 5000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have administrator rights or authenticate using a service principal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<AdminPipelines> GetPipelinesAsAdmin(string expand = null, string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelinesAsAdminRequest(expand, filter, top, skip);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminPipelines value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AdminPipelines.DeserializeAdminPipelines(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPipelineUsersAsAdminRequest(Guid pipelineId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/pipelines/", false);
            uri.AppendPath(pipelineId, true);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of users that have access to a specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have administrator rights or authenticate using a service principal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<PipelineUsers>> GetPipelineUsersAsAdminAsync(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelineUsersAsAdminRequest(pipelineId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PipelineUsers value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PipelineUsers.DeserializePipelineUsers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of users that have access to a specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have administrator rights or authenticate using a service principal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<PipelineUsers> GetPipelineUsersAsAdmin(Guid pipelineId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPipelineUsersAsAdminRequest(pipelineId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PipelineUsers value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PipelineUsers.DeserializePipelineUsers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateUserAsAdminRequest(Guid pipelineId, PipelineUser userDetails)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/pipelines/", false);
            uri.AppendPath(pipelineId, true);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(userDetails);
            request.Content = content;
            return message;
        }

        /// <summary> Grants user permissions to a specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userDetails"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have administrator rights.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UpdateUserAsAdminAsync(Guid pipelineId, PipelineUser userDetails, CancellationToken cancellationToken = default)
        {
            if (userDetails == null)
            {
                throw new ArgumentNullException(nameof(userDetails));
            }

            using var message = CreateUpdateUserAsAdminRequest(pipelineId, userDetails);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Grants user permissions to a specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userDetails"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have administrator rights.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UpdateUserAsAdmin(Guid pipelineId, PipelineUser userDetails, CancellationToken cancellationToken = default)
        {
            if (userDetails == null)
            {
                throw new ArgumentNullException(nameof(userDetails));
            }

            using var message = CreateUpdateUserAsAdminRequest(pipelineId, userDetails);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteUserAsAdminRequest(Guid pipelineId, string identifier)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/pipelines/", false);
            uri.AppendPath(pipelineId, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(identifier, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Removes user permissions from a specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="identifier"> For the principal type `User`, provide the user principal name (UPN). Otherwise, provide the [Object ID](/power-bi/developer/embedded/embedded-troubleshoot#what-is-the-difference-between-application-object-id-and-principal-object-id) of the principal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have administrator rights.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> DeleteUserAsAdminAsync(Guid pipelineId, string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteUserAsAdminRequest(pipelineId, identifier);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Removes user permissions from a specified deployment pipeline. </summary>
        /// <param name="pipelineId"> The deployment pipeline ID. </param>
        /// <param name="identifier"> For the principal type `User`, provide the user principal name (UPN). Otherwise, provide the [Object ID](/power-bi/developer/embedded/embedded-troubleshoot#what-is-the-difference-between-application-object-id-and-principal-object-id) of the principal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have administrator rights.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response DeleteUserAsAdmin(Guid pipelineId, string identifier, CancellationToken cancellationToken = default)
        {
            if (identifier == null)
            {
                throw new ArgumentNullException(nameof(identifier));
            }

            using var message = CreateDeleteUserAsAdminRequest(pipelineId, identifier);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
