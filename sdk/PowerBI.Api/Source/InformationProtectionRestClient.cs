// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    internal partial class InformationProtectionRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of InformationProtectionRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public InformationProtectionRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://api.powerbi.com");
        }

        internal HttpMessage CreateRemoveLabelsAsAdminRequest(InformationProtectionArtifactsChangeLabel artifacts)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/informationprotection/removeLabels", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(artifacts);
            request.Content = content;
            return message;
        }

        /// <summary> Remove sensitivity labels from Power BI items (such as reports or dashboards) by item ID. </summary>
        /// <param name="artifacts"> A composite of artifact ID lists for each type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="artifacts"/> is null. </exception>
        /// <remarks>
        /// For a usage example, see [Set or remove sensitivity labels](/power-bi/admin/service-security-sensitivity-label-inheritance-set-remove-api).
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator.
        /// - The admin user must have sufficient [usage rights](/azure/information-protection/configure-usage-rights) to delete labels.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Maximum 25 requests per hour.
        /// - Each request can update up to 2,000 Power BI items.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<InformationProtectionChangeLabelResponse>> RemoveLabelsAsAdminAsync(InformationProtectionArtifactsChangeLabel artifacts, CancellationToken cancellationToken = default)
        {
            if (artifacts == null)
            {
                throw new ArgumentNullException(nameof(artifacts));
            }

            using var message = CreateRemoveLabelsAsAdminRequest(artifacts);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InformationProtectionChangeLabelResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = InformationProtectionChangeLabelResponse.DeserializeInformationProtectionChangeLabelResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Remove sensitivity labels from Power BI items (such as reports or dashboards) by item ID. </summary>
        /// <param name="artifacts"> A composite of artifact ID lists for each type. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="artifacts"/> is null. </exception>
        /// <remarks>
        /// For a usage example, see [Set or remove sensitivity labels](/power-bi/admin/service-security-sensitivity-label-inheritance-set-remove-api).
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator.
        /// - The admin user must have sufficient [usage rights](/azure/information-protection/configure-usage-rights) to delete labels.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Maximum 25 requests per hour.
        /// - Each request can update up to 2,000 Power BI items.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<InformationProtectionChangeLabelResponse> RemoveLabelsAsAdmin(InformationProtectionArtifactsChangeLabel artifacts, CancellationToken cancellationToken = default)
        {
            if (artifacts == null)
            {
                throw new ArgumentNullException(nameof(artifacts));
            }

            using var message = CreateRemoveLabelsAsAdminRequest(artifacts);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InformationProtectionChangeLabelResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = InformationProtectionChangeLabelResponse.DeserializeInformationProtectionChangeLabelResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSetLabelsAsAdminRequest(InformationProtectionChangeLabelDetails informationProtectionChangeLabelDetails)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/informationprotection/setLabels", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(informationProtectionChangeLabelDetails);
            request.Content = content;
            return message;
        }

        /// <summary> Set sensitivity labels on Power BI items (such as reports or dashboards) by item ID. </summary>
        /// <param name="informationProtectionChangeLabelDetails"> Set label details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="informationProtectionChangeLabelDetails"/> is null. </exception>
        /// <remarks>
        /// To set a sensitivity label using this API, the admin user or the delegated user (if provided) must have the label included in their [label policy](/microsoft-365/compliance/create-sensitivity-labels?view=o365-worldwide). For a usage example, see [Set or remove sensitivity labels](/power-bi/admin/service-security-sensitivity-label-inheritance-set-remove-api).
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator.
        /// - The admin user and the delegated user (if provided) must have sufficient [usage rights](/azure/information-protection/configure-usage-rights) to set labels.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Maximum 25 requests per hour.
        /// - Each request can update up to 2,000 Power BI items.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<InformationProtectionChangeLabelResponse>> SetLabelsAsAdminAsync(InformationProtectionChangeLabelDetails informationProtectionChangeLabelDetails, CancellationToken cancellationToken = default)
        {
            if (informationProtectionChangeLabelDetails == null)
            {
                throw new ArgumentNullException(nameof(informationProtectionChangeLabelDetails));
            }

            using var message = CreateSetLabelsAsAdminRequest(informationProtectionChangeLabelDetails);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InformationProtectionChangeLabelResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = InformationProtectionChangeLabelResponse.DeserializeInformationProtectionChangeLabelResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Set sensitivity labels on Power BI items (such as reports or dashboards) by item ID. </summary>
        /// <param name="informationProtectionChangeLabelDetails"> Set label details. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="informationProtectionChangeLabelDetails"/> is null. </exception>
        /// <remarks>
        /// To set a sensitivity label using this API, the admin user or the delegated user (if provided) must have the label included in their [label policy](/microsoft-365/compliance/create-sensitivity-labels?view=o365-worldwide). For a usage example, see [Set or remove sensitivity labels](/power-bi/admin/service-security-sensitivity-label-inheritance-set-remove-api).
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator.
        /// - The admin user and the delegated user (if provided) must have sufficient [usage rights](/azure/information-protection/configure-usage-rights) to set labels.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Maximum 25 requests per hour.
        /// - Each request can update up to 2,000 Power BI items.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<InformationProtectionChangeLabelResponse> SetLabelsAsAdmin(InformationProtectionChangeLabelDetails informationProtectionChangeLabelDetails, CancellationToken cancellationToken = default)
        {
            if (informationProtectionChangeLabelDetails == null)
            {
                throw new ArgumentNullException(nameof(informationProtectionChangeLabelDetails));
            }

            using var message = CreateSetLabelsAsAdminRequest(informationProtectionChangeLabelDetails);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        InformationProtectionChangeLabelResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = InformationProtectionChangeLabelResponse.DeserializeInformationProtectionChangeLabelResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
