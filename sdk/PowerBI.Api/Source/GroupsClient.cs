// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    /// <summary> The Groups service client. </summary>
    public partial class GroupsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal GroupsRestClient RestClient { get; }

        /// <summary> Initializes a new instance of GroupsClient for mocking. </summary>
        protected GroupsClient()
        {
        }

        /// <summary> Initializes a new instance of GroupsClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public GroupsClient(TokenCredential credential, Uri endpoint = null, PowerBIClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("https://api.powerbi.com");

            options ??= new PowerBIClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://analysis.windows.net/powerbi/api/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new GroupsRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of GroupsClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal GroupsClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new GroupsRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Returns a list of workspaces the user has access to. </summary>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.Read.All or Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - User permissions for workspaces take time to get updated and may not be immediately available when using API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Groups>> GetGroupsAsync(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.GetGroups");
            scope.Start();
            try
            {
                return await RestClient.GetGroupsAsync(filter, top, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of workspaces the user has access to. </summary>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.Read.All or Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - User permissions for workspaces take time to get updated and may not be immediately available when using API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Groups> GetGroups(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.GetGroups");
            scope.Start();
            try
            {
                return RestClient.GetGroups(filter, top, skip, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new workspace. </summary>
        /// <param name="requestParameters"> Create group request parameters. </param>
        /// <param name="workspaceV2"> (Preview feature) Whether to create a workspace. The only supported value is `true`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Group>> CreateGroupAsync(GroupCreationRequest requestParameters, bool? workspaceV2 = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.CreateGroup");
            scope.Start();
            try
            {
                return await RestClient.CreateGroupAsync(requestParameters, workspaceV2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new workspace. </summary>
        /// <param name="requestParameters"> Create group request parameters. </param>
        /// <param name="workspaceV2"> (Preview feature) Whether to create a workspace. The only supported value is `true`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Group> CreateGroup(GroupCreationRequest requestParameters, bool? workspaceV2 = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.CreateGroup");
            scope.Start();
            try
            {
                return RestClient.CreateGroup(requestParameters, workspaceV2, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.Read.All or Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - User permissions for workspaces take time to get updated and may not be immediately available when using API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Group>> GetGroupAsync(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.GetGroup");
            scope.Start();
            try
            {
                return await RestClient.GetGroupAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.Read.All or Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - User permissions for workspaces take time to get updated and may not be immediately available when using API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Group> GetGroup(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.GetGroup");
            scope.Start();
            try
            {
                return RestClient.GetGroup(groupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> DeleteGroupAsync(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.DeleteGroup");
            scope.Start();
            try
            {
                return await RestClient.DeleteGroupAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response DeleteGroup(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.DeleteGroup");
            scope.Start();
            try
            {
                return RestClient.DeleteGroup(groupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="groupProperties"> The properties to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - For Shared capacities, only the name can be updated.
        /// - For Premium capacities, only the name and defaultDatasetStorageFormat can be updated.
        /// - The name must be unique inside an organization.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateGroupAsync(Guid groupId, UpdateGroupRequest groupProperties, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.UpdateGroup");
            scope.Start();
            try
            {
                return await RestClient.UpdateGroupAsync(groupId, groupProperties, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="groupProperties"> The properties to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - For Shared capacities, only the name can be updated.
        /// - For Premium capacities, only the name and defaultDatasetStorageFormat can be updated.
        /// - The name must be unique inside an organization.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateGroup(Guid groupId, UpdateGroupRequest groupProperties, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.UpdateGroup");
            scope.Start();
            try
            {
                return RestClient.UpdateGroup(groupId, groupProperties, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.Read.All or Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - User permissions for workspaces take time to get updated and may not be immediately available when using API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<GroupUsers>> GetGroupUsersAsync(Guid groupId, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.GetGroupUsers");
            scope.Start();
            try
            {
                return await RestClient.GetGroupUsersAsync(groupId, top, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.Read.All or Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - User permissions for workspaces take time to get updated and may not be immediately available when using API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<GroupUsers> GetGroupUsers(Guid groupId, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.GetGroupUsers");
            scope.Start();
            try
            {
                return RestClient.GetGroupUsers(groupId, top, skip, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grants the specified user the specified permissions to the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - User permissions for workspaces take time to get updated and may not be immediately available when using API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> AddGroupUserAsync(Guid groupId, GroupUser userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.AddGroupUser");
            scope.Start();
            try
            {
                return await RestClient.AddGroupUserAsync(groupId, userDetails, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grants the specified user the specified permissions to the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - User permissions for workspaces take time to get updated and may not be immediately available when using API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response AddGroupUser(Guid groupId, GroupUser userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.AddGroupUser");
            scope.Start();
            try
            {
                return RestClient.AddGroupUser(groupId, userDetails, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the specified user permissions to the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - User permissions for workspaces take time to get updated and may not be immediately available when using API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateGroupUserAsync(Guid groupId, GroupUser userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.UpdateGroupUser");
            scope.Start();
            try
            {
                return await RestClient.UpdateGroupUserAsync(groupId, userDetails, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the specified user permissions to the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - User permissions for workspaces take time to get updated and may not be immediately available when using API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateGroupUser(Guid groupId, GroupUser userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.UpdateGroupUser");
            scope.Start();
            try
            {
                return RestClient.UpdateGroupUser(groupId, userDetails, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified user permissions from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="user"> The email address of the user or object ID of the service principal to delete. </param>
        /// <param name="profileId"> The service principal profile ID to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> DeleteUserInGroupAsync(Guid groupId, string user, Guid? profileId = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.DeleteUserInGroup");
            scope.Start();
            try
            {
                return await RestClient.DeleteUserInGroupAsync(groupId, user, profileId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified user permissions from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="user"> The email address of the user or object ID of the service principal to delete. </param>
        /// <param name="profileId"> The service principal profile ID to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response DeleteUserInGroup(Guid groupId, string user, Guid? profileId = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.DeleteUserInGroup");
            scope.Start();
            try
            {
                return RestClient.DeleteUserInGroup(groupId, user, profileId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Assigns **My workspace** to the specified capacity. </summary>
        /// <param name="requestParameters"> Assign to capacity parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// To unassign **My workspace** from a capacity, provide an empty GUID (`00000000-0000-0000-0000-000000000000`) as the `capacityId`.
        ///
        /// ## Permissions
        ///
        /// The user must have administrator rights or Assign permission on the capacity.
        ///
        /// ## Required Scope
        ///
        /// Capacity.ReadWrite.All and Workspace.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> AssignMyWorkspaceToCapacityAsync(AssignToCapacityRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.AssignMyWorkspaceToCapacity");
            scope.Start();
            try
            {
                return await RestClient.AssignMyWorkspaceToCapacityAsync(requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Assigns **My workspace** to the specified capacity. </summary>
        /// <param name="requestParameters"> Assign to capacity parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// To unassign **My workspace** from a capacity, provide an empty GUID (`00000000-0000-0000-0000-000000000000`) as the `capacityId`.
        ///
        /// ## Permissions
        ///
        /// The user must have administrator rights or Assign permission on the capacity.
        ///
        /// ## Required Scope
        ///
        /// Capacity.ReadWrite.All and Workspace.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response AssignMyWorkspaceToCapacity(AssignToCapacityRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.AssignMyWorkspaceToCapacity");
            scope.Start();
            try
            {
                return RestClient.AssignMyWorkspaceToCapacity(requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Assigns the specified workspace to the specified capacity. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="requestParameters"> Assign to capacity parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// To unassign **My workspace** from a capacity, provide an empty GUID (`00000000-0000-0000-0000-000000000000`) as the `capacityId`.
        ///
        /// ## Permissions
        ///
        /// - The user must have administrator rights or assign permissions on the capacity.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Capacity.ReadWrite.All and Workspace.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> AssignToCapacityAsync(Guid groupId, AssignToCapacityRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.AssignToCapacity");
            scope.Start();
            try
            {
                return await RestClient.AssignToCapacityAsync(groupId, requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Assigns the specified workspace to the specified capacity. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="requestParameters"> Assign to capacity parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// To unassign **My workspace** from a capacity, provide an empty GUID (`00000000-0000-0000-0000-000000000000`) as the `capacityId`.
        ///
        /// ## Permissions
        ///
        /// - The user must have administrator rights or assign permissions on the capacity.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Capacity.ReadWrite.All and Workspace.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response AssignToCapacity(Guid groupId, AssignToCapacityRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.AssignToCapacity");
            scope.Start();
            try
            {
                return RestClient.AssignToCapacity(groupId, requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of the **My workspace** assignment-to-capacity operation. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Workspace.Read.All and Workspace.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<WorkspaceCapacityAssignmentStatus>> CapacityAssignmentStatusMyWorkspaceAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.CapacityAssignmentStatusMyWorkspace");
            scope.Start();
            try
            {
                return await RestClient.CapacityAssignmentStatusMyWorkspaceAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of the **My workspace** assignment-to-capacity operation. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Workspace.Read.All and Workspace.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<WorkspaceCapacityAssignmentStatus> CapacityAssignmentStatusMyWorkspace(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.CapacityAssignmentStatusMyWorkspace");
            scope.Start();
            try
            {
                return RestClient.CapacityAssignmentStatusMyWorkspace(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of the assignment-to-capacity operation for the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must have administrator rights or assign permissions on the capacity.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.Read.All and Workspace.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<WorkspaceCapacityAssignmentStatus>> CapacityAssignmentStatusAsync(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.CapacityAssignmentStatus");
            scope.Start();
            try
            {
                return await RestClient.CapacityAssignmentStatusAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the status of the assignment-to-capacity operation for the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must have administrator rights or assign permissions on the capacity.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.Read.All and Workspace.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<WorkspaceCapacityAssignmentStatus> CapacityAssignmentStatus(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.CapacityAssignmentStatus");
            scope.Start();
            try
            {
                return RestClient.CapacityAssignmentStatus(groupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Assigns the specified workspace to the specified dataflow storage account. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="requestParameters"> Assign to Power BI dataflow storage account parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// To perform this operation, the user must be an admin on the specified workspace and the Power BI dataflow storage account must be enabled.
        ///
        /// To unassign the specified workspace from a Power BI dataflow storage account, provide an empty GUID (`00000000-0000-0000-0000-000000000000`) as the `dataflowStorageId`.
        ///
        /// ## Required Scope
        ///
        /// StorageAccount.ReadWrite.All and Workspace.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> AssignToDataflowStorageAsync(Guid groupId, AssignToDataflowStorageRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.AssignToDataflowStorage");
            scope.Start();
            try
            {
                return await RestClient.AssignToDataflowStorageAsync(groupId, requestParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Assigns the specified workspace to the specified dataflow storage account. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="requestParameters"> Assign to Power BI dataflow storage account parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// To perform this operation, the user must be an admin on the specified workspace and the Power BI dataflow storage account must be enabled.
        ///
        /// To unassign the specified workspace from a Power BI dataflow storage account, provide an empty GUID (`00000000-0000-0000-0000-000000000000`) as the `dataflowStorageId`.
        ///
        /// ## Required Scope
        ///
        /// StorageAccount.ReadWrite.All and Workspace.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response AssignToDataflowStorage(Guid groupId, AssignToDataflowStorageRequest requestParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.AssignToDataflowStorage");
            scope.Start();
            try
            {
                return RestClient.AssignToDataflowStorage(groupId, requestParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of workspaces for the organization. </summary>
        /// <param name="top"> Returns only the first n results. This parameter is mandatory and must be in the range of 1-5000. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `users`, `reports`, `dashboards`, `datasets`, `dataflows`, and `workbooks`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 5000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 50 requests per hour or 15 requests per minute, per tenant. This call will also time out after 30 seconds to prevent adverse effect on the Power BI service.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<AdminGroups>> GetGroupsAsAdminAsync(int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.GetGroupsAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetGroupsAsAdminAsync(top, expand, filter, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of workspaces for the organization. </summary>
        /// <param name="top"> Returns only the first n results. This parameter is mandatory and must be in the range of 1-5000. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `users`, `reports`, `dashboards`, `datasets`, `dataflows`, and `workbooks`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 5000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 50 requests per hour or 15 requests per minute, per tenant. This call will also time out after 30 seconds to prevent adverse effect on the Power BI service.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<AdminGroups> GetGroupsAsAdmin(int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.GetGroupsAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetGroupsAsAdmin(top, expand, filter, skip, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a workspace for the organization. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `users`, `reports`, `dashboards`, `datasets`, `dataflows`, and `workbooks`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<AdminGroup>> GetGroupAsAdminAsync(Guid groupId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.GetGroupAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetGroupAsAdminAsync(groupId, expand, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a workspace for the organization. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `users`, `reports`, `dashboards`, `datasets`, `dataflows`, and `workbooks`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<AdminGroup> GetGroupAsAdmin(Guid groupId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.GetGroupAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetGroupAsAdmin(groupId, expand, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the properties of the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="groupProperties"> The properties to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// To unassign a Log Analytics workspace, explicitly set the value to null.
        ///
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Maximum 200 requests per hour.
        /// - For Shared capacities, only the name and description can be updated.
        /// - For Premium capacities, only the name, description, defaultDatasetStorageFormat and Log Analytics workspace can be updated.
        /// - The name must be unique inside an organization.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateGroupAsAdminAsync(Guid groupId, AdminGroup groupProperties, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.UpdateGroupAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.UpdateGroupAsAdminAsync(groupId, groupProperties, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the properties of the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="groupProperties"> The properties to update. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// To unassign a Log Analytics workspace, explicitly set the value to null.
        ///
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Maximum 200 requests per hour.
        /// - For Shared capacities, only the name and description can be updated.
        /// - For Premium capacities, only the name, description, defaultDatasetStorageFormat and Log Analytics workspace can be updated.
        /// - The name must be unique inside an organization.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateGroupAsAdmin(Guid groupId, AdminGroup groupProperties, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.UpdateGroupAsAdmin");
            scope.Start();
            try
            {
                return RestClient.UpdateGroupAsAdmin(groupId, groupProperties, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<GroupUsers>> GetGroupUsersAsAdminAsync(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.GetGroupUsersAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetGroupUsersAsAdminAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<GroupUsers> GetGroupUsersAsAdmin(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.GetGroupUsersAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetGroupUsersAsAdmin(groupId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grants user permissions to the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This API call only supports adding a user, security group, M365 group and service principal.
        ///
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> AddUserAsAdminAsync(Guid groupId, GroupUser userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.AddUserAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.AddUserAsAdminAsync(groupId, userDetails, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grants user permissions to the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This API call only supports adding a user, security group, M365 group and service principal.
        ///
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response AddUserAsAdmin(Guid groupId, GroupUser userDetails, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.AddUserAsAdmin");
            scope.Start();
            try
            {
                return RestClient.AddUserAsAdmin(groupId, userDetails, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes user permissions from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="user"> The user principal name (UPN) of the user or group object Id of the group or app object Id of the service principal to delete. </param>
        /// <param name="profileId"> The service principal profile ID to delete. </param>
        /// <param name="isGroup"> Whether a given user is a group or not. This parameter is required when user to delete is group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This API call supports removing a user, security group, M365 group and service principal.Please use email address or UPN for user, group object Id for group and app object Id for service principal to delete.
        ///
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> DeleteUserAsAdminAsync(Guid groupId, string user, Guid? profileId = null, bool? isGroup = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.DeleteUserAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.DeleteUserAsAdminAsync(groupId, user, profileId, isGroup, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes user permissions from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="user"> The user principal name (UPN) of the user or group object Id of the group or app object Id of the service principal to delete. </param>
        /// <param name="profileId"> The service principal profile ID to delete. </param>
        /// <param name="isGroup"> Whether a given user is a group or not. This parameter is required when user to delete is group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This API call supports removing a user, security group, M365 group and service principal.Please use email address or UPN for user, group object Id for group and app object Id for service principal to delete.
        ///
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response DeleteUserAsAdmin(Guid groupId, string user, Guid? profileId = null, bool? isGroup = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.DeleteUserAsAdmin");
            scope.Start();
            try
            {
                return RestClient.DeleteUserAsAdmin(groupId, user, profileId, isGroup, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Restores a deleted workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="groupRestoreRequest"> Details of the group restore request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Use this API call to restore workspaces.
        ///
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> RestoreDeletedGroupAsAdminAsync(Guid groupId, GroupRestoreRequest groupRestoreRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.RestoreDeletedGroupAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.RestoreDeletedGroupAsAdminAsync(groupId, groupRestoreRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Restores a deleted workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="groupRestoreRequest"> Details of the group restore request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Use this API call to restore workspaces.
        ///
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response RestoreDeletedGroupAsAdmin(Guid groupId, GroupRestoreRequest groupRestoreRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.RestoreDeletedGroupAsAdmin");
            scope.Start();
            try
            {
                return RestClient.RestoreDeletedGroupAsAdmin(groupId, groupRestoreRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of datasets, reports, and dashboards that have not been used within 30 days for the specified workspace. This is a preview API call. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="continuationToken"> Token required to get the next chunk of the result set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<UnusedArtifactsResponse>> GetUnusedArtifactsAsAdminAsync(Guid groupId, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.GetUnusedArtifactsAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetUnusedArtifactsAsAdminAsync(groupId, continuationToken, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of datasets, reports, and dashboards that have not been used within 30 days for the specified workspace. This is a preview API call. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="continuationToken"> Token required to get the next chunk of the result set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<UnusedArtifactsResponse> GetUnusedArtifactsAsAdmin(Guid groupId, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GroupsClient.GetUnusedArtifactsAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetUnusedArtifactsAsAdmin(groupId, continuationToken, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
