// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    internal partial class DatasetsRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of DatasetsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public DatasetsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://api.powerbi.com");
        }

        internal HttpMessage CreateGetDatasetsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of datasets from **My workspace**. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Datasets>> GetDatasetsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasetsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasets value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Datasets.DeserializeDatasets(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of datasets from **My workspace**. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Datasets> GetDatasets(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasetsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasets value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Datasets.DeserializeDatasets(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostDatasetRequest(CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets", false);
            if (defaultRetentionPolicy != null)
            {
                uri.AppendQuery("defaultRetentionPolicy", defaultRetentionPolicy.Value.ToSerialString(), true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(dataset);
            request.Content = content;
            return message;
        }

        /// <summary> Creates a new dataset on **My workspace**. </summary>
        /// <param name="dataset"> Dataset definition to create. </param>
        /// <param name="defaultRetentionPolicy"> The default retention policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataset"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Dataset>> PostDatasetAsync(CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy = null, CancellationToken cancellationToken = default)
        {
            if (dataset == null)
            {
                throw new ArgumentNullException(nameof(dataset));
            }

            using var message = CreatePostDatasetRequest(dataset, defaultRetentionPolicy);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                case 202:
                    {
                        Dataset value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Dataset.DeserializeDataset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Creates a new dataset on **My workspace**. </summary>
        /// <param name="dataset"> Dataset definition to create. </param>
        /// <param name="defaultRetentionPolicy"> The default retention policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataset"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Dataset> PostDataset(CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy = null, CancellationToken cancellationToken = default)
        {
            if (dataset == null)
            {
                throw new ArgumentNullException(nameof(dataset));
            }

            using var message = CreatePostDatasetRequest(dataset, defaultRetentionPolicy);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                case 202:
                    {
                        Dataset value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Dataset.DeserializeDataset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasetRequest(string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Dataset>> GetDatasetAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDatasetRequest(datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Dataset value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Dataset.DeserializeDataset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Dataset> GetDataset(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDatasetRequest(datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Dataset value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Dataset.DeserializeDataset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateDatasetRequest(string datasetId, UpdateDatasetRequest updateDatasetRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(updateDatasetRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the properties for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="updateDatasetRequest"> Update dataset request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="updateDatasetRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UpdateDatasetAsync(string datasetId, UpdateDatasetRequest updateDatasetRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (updateDatasetRequest == null)
            {
                throw new ArgumentNullException(nameof(updateDatasetRequest));
            }

            using var message = CreateUpdateDatasetRequest(datasetId, updateDatasetRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the properties for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="updateDatasetRequest"> Update dataset request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="updateDatasetRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UpdateDataset(string datasetId, UpdateDatasetRequest updateDatasetRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (updateDatasetRequest == null)
            {
                throw new ArgumentNullException(nameof(updateDatasetRequest));
            }

            using var message = CreateUpdateDatasetRequest(datasetId, updateDatasetRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteDatasetRequest(string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Deletes the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> DeleteDatasetAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateDeleteDatasetRequest(datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deletes the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response DeleteDataset(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateDeleteDatasetRequest(datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateExecuteQueriesRequest(string datasetId, DatasetExecuteQueriesRequest requestMessage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/executeQueries", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestMessage);
            request.Content = content;
            return message;
        }

        /// <summary> Executes Data Analysis Expressions (DAX) queries against the provided dataset. The dataset must reside in **My workspace** or another workspace. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="requestMessage"/> is null. </exception>
        /// <remarks>
        /// DAX query errors will result in:
        ///
        /// - A response error, such as `DAX query failure`.
        /// - A failure HTTP status code (400).
        ///
        /// A query that requests more than one table, or more than the allowed number of table rows, will result in:
        ///
        /// - Limited data being returned.
        /// - A response error, such as `More than one result table in a query` or `More than {allowed number} rows in a query result`.
        /// - A successful HTTP status code (200).
        ///
        /// Columns that are fully qualified in the query will be returned with a fully qualified name, for example, `MyTable[MyColumn]`. Columns that are renamed or created in the query will be returned within square bracket, for example, `[MyNewColumn]`.
        ///
        /// ## Permissions
        ///
        /// The tenant setting **Dataset Execute Queries REST API**, found under **Integration settings**, must be enabled.
        ///
        /// The user must have dataset read and build permissions. For more information, see [Manage dataset access permissions](/power-bi/connect-data/service-datasets-manage-access-permissions).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// - Datasets that are hosted in Azure Analysis Services or that have a live connection to an on-premises Azure Analysis Services model aren't supported.
        /// - One query per API call.
        /// - One table request per query.
        /// - Maximum of 100,000 rows or 1,000,000 values per query (whichever is hit first). For example if you query for 5 columns, you can get back max 100,000 rows. If you query for 20 columns, you can get back max 50,000 rows (1 million divided by 20).
        /// - Maximum of 15MB of data per query. Once 15MB is exceeded, the current row will be completed but no additional rows will be written.
        /// - There's a limit of 120 query requests per minute per user, regardless of the dataset that's queried.
        /// - To use Service Principals, make sure the admin tenant setting [_Allow service principals to use Power BI APIs_](/power-bi/admin/service-admin-portal-developer#allow-service-principals-to-use-power-bi-apis) under _Developer settings_ is enabled. However, regardless of the admin tenant setting, Service Principals aren't supported for datasets with RLS per [RLS limitations](/power-bi/admin/service-admin-rls#considerations-and-limitations) or datasets with SSO enabled.
        /// - Only DAX queries are supported at this time. MDX, INFO functions and DMV queries are not supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DatasetExecuteQueriesResponse>> ExecuteQueriesAsync(string datasetId, DatasetExecuteQueriesRequest requestMessage, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (requestMessage == null)
            {
                throw new ArgumentNullException(nameof(requestMessage));
            }

            using var message = CreateExecuteQueriesRequest(datasetId, requestMessage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetExecuteQueriesResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatasetExecuteQueriesResponse.DeserializeDatasetExecuteQueriesResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Executes Data Analysis Expressions (DAX) queries against the provided dataset. The dataset must reside in **My workspace** or another workspace. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="requestMessage"/> is null. </exception>
        /// <remarks>
        /// DAX query errors will result in:
        ///
        /// - A response error, such as `DAX query failure`.
        /// - A failure HTTP status code (400).
        ///
        /// A query that requests more than one table, or more than the allowed number of table rows, will result in:
        ///
        /// - Limited data being returned.
        /// - A response error, such as `More than one result table in a query` or `More than {allowed number} rows in a query result`.
        /// - A successful HTTP status code (200).
        ///
        /// Columns that are fully qualified in the query will be returned with a fully qualified name, for example, `MyTable[MyColumn]`. Columns that are renamed or created in the query will be returned within square bracket, for example, `[MyNewColumn]`.
        ///
        /// ## Permissions
        ///
        /// The tenant setting **Dataset Execute Queries REST API**, found under **Integration settings**, must be enabled.
        ///
        /// The user must have dataset read and build permissions. For more information, see [Manage dataset access permissions](/power-bi/connect-data/service-datasets-manage-access-permissions).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// - Datasets that are hosted in Azure Analysis Services or that have a live connection to an on-premises Azure Analysis Services model aren't supported.
        /// - One query per API call.
        /// - One table request per query.
        /// - Maximum of 100,000 rows or 1,000,000 values per query (whichever is hit first). For example if you query for 5 columns, you can get back max 100,000 rows. If you query for 20 columns, you can get back max 50,000 rows (1 million divided by 20).
        /// - Maximum of 15MB of data per query. Once 15MB is exceeded, the current row will be completed but no additional rows will be written.
        /// - There's a limit of 120 query requests per minute per user, regardless of the dataset that's queried.
        /// - To use Service Principals, make sure the admin tenant setting [_Allow service principals to use Power BI APIs_](/power-bi/admin/service-admin-portal-developer#allow-service-principals-to-use-power-bi-apis) under _Developer settings_ is enabled. However, regardless of the admin tenant setting, Service Principals aren't supported for datasets with RLS per [RLS limitations](/power-bi/admin/service-admin-rls#considerations-and-limitations) or datasets with SSO enabled.
        /// - Only DAX queries are supported at this time. MDX, INFO functions and DMV queries are not supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DatasetExecuteQueriesResponse> ExecuteQueries(string datasetId, DatasetExecuteQueriesRequest requestMessage, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (requestMessage == null)
            {
                throw new ArgumentNullException(nameof(requestMessage));
            }

            using var message = CreateExecuteQueriesRequest(datasetId, requestMessage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetExecuteQueriesResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatasetExecuteQueriesResponse.DeserializeDatasetExecuteQueriesResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetTablesRequest(string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/tables", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of tables within the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Tables>> GetTablesAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetTablesRequest(datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Tables value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Tables.DeserializeTables(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of tables within the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Tables> GetTables(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetTablesRequest(datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Tables value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Tables.DeserializeTables(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutTableRequest(string datasetId, string tableName, Table requestMessage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/tables/", false);
            uri.AppendPath(tableName, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestMessage);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the metadata and schema for the specified table within the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="requestMessage"> Table name and columns to update existing table. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/>, <paramref name="tableName"/> or <paramref name="requestMessage"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Table>> PutTableAsync(string datasetId, string tableName, Table requestMessage, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }
            if (requestMessage == null)
            {
                throw new ArgumentNullException(nameof(requestMessage));
            }

            using var message = CreatePutTableRequest(datasetId, tableName, requestMessage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Table value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Table.DeserializeTable(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the metadata and schema for the specified table within the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="requestMessage"> Table name and columns to update existing table. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/>, <paramref name="tableName"/> or <paramref name="requestMessage"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Table> PutTable(string datasetId, string tableName, Table requestMessage, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }
            if (requestMessage == null)
            {
                throw new ArgumentNullException(nameof(requestMessage));
            }

            using var message = CreatePutTableRequest(datasetId, tableName, requestMessage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Table value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Table.DeserializeTable(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostRowsRequest(string datasetId, string tableName, PostRowsRequest requestMessage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/tables/", false);
            uri.AppendPath(tableName, true);
            uri.AppendPath("/rows", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestMessage);
            request.Content = content;
            return message;
        }

        /// <summary> Adds new data rows to the specified table within the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/>, <paramref name="tableName"/> or <paramref name="requestMessage"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - This API call only supports **push datasets**.
        /// - See [Power BI REST API limitations](/power-bi/developer/automation/api-rest-api-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> PostRowsAsync(string datasetId, string tableName, PostRowsRequest requestMessage, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }
            if (requestMessage == null)
            {
                throw new ArgumentNullException(nameof(requestMessage));
            }

            using var message = CreatePostRowsRequest(datasetId, tableName, requestMessage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Adds new data rows to the specified table within the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/>, <paramref name="tableName"/> or <paramref name="requestMessage"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - This API call only supports **push datasets**.
        /// - See [Power BI REST API limitations](/power-bi/developer/automation/api-rest-api-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response PostRows(string datasetId, string tableName, PostRowsRequest requestMessage, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }
            if (requestMessage == null)
            {
                throw new ArgumentNullException(nameof(requestMessage));
            }

            using var message = CreatePostRowsRequest(datasetId, tableName, requestMessage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRowsRequest(string datasetId, string tableName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/tables/", false);
            uri.AppendPath(tableName, true);
            uri.AppendPath("/rows", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Deletes all rows from the specified table within the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="tableName"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> DeleteRowsAsync(string datasetId, string tableName, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var message = CreateDeleteRowsRequest(datasetId, tableName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deletes all rows from the specified table within the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="tableName"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response DeleteRows(string datasetId, string tableName, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var message = CreateDeleteRowsRequest(datasetId, tableName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRefreshHistoryRequest(string datasetId, int? top)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/refreshes", false);
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the refresh history for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="top"> The requested number of entries in the refresh history. If not provided, the default is the last available 60 entries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// OneDrive refresh history isn't returned.
        ///
        /// There are always between 20–60 available refresh history entries for each dataset, depending on the number of refreshes in the last 3 days.
        /// The most recent 60 are kept if they are all less than 3 days old.
        /// Entries more than 3 days old are deleted when there are more than 20 entries.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Refreshes>> GetRefreshHistoryAsync(string datasetId, int? top = null, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetRefreshHistoryRequest(datasetId, top);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Refreshes value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Refreshes.DeserializeRefreshes(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the refresh history for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="top"> The requested number of entries in the refresh history. If not provided, the default is the last available 60 entries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// OneDrive refresh history isn't returned.
        ///
        /// There are always between 20–60 available refresh history entries for each dataset, depending on the number of refreshes in the last 3 days.
        /// The most recent 60 are kept if they are all less than 3 days old.
        /// Entries more than 3 days old are deleted when there are more than 20 entries.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Refreshes> GetRefreshHistory(string datasetId, int? top = null, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetRefreshHistoryRequest(datasetId, top);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Refreshes value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Refreshes.DeserializeRefreshes(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRefreshDatasetRequest(string datasetId, DatasetRefreshRequest datasetRefreshRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/refreshes", false);
            request.Uri = uri;
            if (datasetRefreshRequest != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(datasetRefreshRequest);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Triggers a refresh for the specified dataset from **My workspace**. An [enhanced refresh](/power-bi/connect-data/asynchronous-refresh) is triggered only if a request payload other than `notifyOption` is set. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetRefreshRequest"> The <see cref="DatasetRefreshRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - For Shared capacities, a maximum of eight requests per day, including refreshes executed by using scheduled refresh, can be initiated.
        /// - For Shared capacities, only `notifyOption` can be specified in the request body.
        /// - Enhanced refresh is not supported for shared capacities.
        /// - For enhanced refresh, `notifyOption` is not required and must be excluded from the request body. However, one or more parameters other than `notifyOption` are required.
        /// - For Premium capacities, the maximum requests per day is only limited by the available resources in the capacity. If available resources are overloaded, refreshes are throttled until the load is reduced. The refresh will fail if throttling exceeds 1 hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<ResponseWithHeaders<DatasetsRefreshDatasetHeaders>> RefreshDatasetAsync(string datasetId, DatasetRefreshRequest datasetRefreshRequest = null, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateRefreshDatasetRequest(datasetId, datasetRefreshRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DatasetsRefreshDatasetHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Triggers a refresh for the specified dataset from **My workspace**. An [enhanced refresh](/power-bi/connect-data/asynchronous-refresh) is triggered only if a request payload other than `notifyOption` is set. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetRefreshRequest"> The <see cref="DatasetRefreshRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - For Shared capacities, a maximum of eight requests per day, including refreshes executed by using scheduled refresh, can be initiated.
        /// - For Shared capacities, only `notifyOption` can be specified in the request body.
        /// - Enhanced refresh is not supported for shared capacities.
        /// - For enhanced refresh, `notifyOption` is not required and must be excluded from the request body. However, one or more parameters other than `notifyOption` are required.
        /// - For Premium capacities, the maximum requests per day is only limited by the available resources in the capacity. If available resources are overloaded, refreshes are throttled until the load is reduced. The refresh will fail if throttling exceeds 1 hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public ResponseWithHeaders<DatasetsRefreshDatasetHeaders> RefreshDataset(string datasetId, DatasetRefreshRequest datasetRefreshRequest = null, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateRefreshDatasetRequest(datasetId, datasetRefreshRequest);
            _pipeline.Send(message, cancellationToken);
            var headers = new DatasetsRefreshDatasetHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRefreshExecutionDetailsRequest(Guid datasetId, Guid refreshId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/refreshes/", false);
            uri.AppendPath(refreshId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns execution details of an [enhanced refresh operation](/power-bi/connect-data/asynchronous-refresh) for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="refreshId"> The refresh ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DatasetRefreshDetail>> GetRefreshExecutionDetailsAsync(Guid datasetId, Guid refreshId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetRefreshExecutionDetailsRequest(datasetId, refreshId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    {
                        DatasetRefreshDetail value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatasetRefreshDetail.DeserializeDatasetRefreshDetail(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns execution details of an [enhanced refresh operation](/power-bi/connect-data/asynchronous-refresh) for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="refreshId"> The refresh ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DatasetRefreshDetail> GetRefreshExecutionDetails(Guid datasetId, Guid refreshId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetRefreshExecutionDetailsRequest(datasetId, refreshId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    {
                        DatasetRefreshDetail value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatasetRefreshDetail.DeserializeDatasetRefreshDetail(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCancelRefreshRequest(Guid datasetId, Guid refreshId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/refreshes/", false);
            uri.AppendPath(refreshId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Cancels the specified refresh operation for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="refreshId"> The refresh ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> CancelRefreshAsync(Guid datasetId, Guid refreshId, CancellationToken cancellationToken = default)
        {
            using var message = CreateCancelRefreshRequest(datasetId, refreshId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Cancels the specified refresh operation for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="refreshId"> The refresh ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response CancelRefresh(Guid datasetId, Guid refreshId, CancellationToken cancellationToken = default)
        {
            using var message = CreateCancelRefreshRequest(datasetId, refreshId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRefreshScheduleRequest(string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/refreshSchedule", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the refresh schedule for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<RefreshSchedule>> GetRefreshScheduleAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetRefreshScheduleRequest(datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RefreshSchedule value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RefreshSchedule.DeserializeRefreshSchedule(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the refresh schedule for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<RefreshSchedule> GetRefreshSchedule(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetRefreshScheduleRequest(datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RefreshSchedule value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RefreshSchedule.DeserializeRefreshSchedule(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRefreshScheduleRequest(string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/refreshSchedule", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(datasetModelRefreshScheduleRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the refresh schedule for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetModelRefreshScheduleRequest"> Update Refresh Schedule parameters, by specifying all or some of the parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="datasetModelRefreshScheduleRequest"/> is null. </exception>
        /// <remarks>
        /// A request that disables the refresh schedule should contain no other changes.
        ///
        /// At least one day must be specified. If no times are specified, then Power BI will use a default single time per day.
        ///
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// The limit on the number of time slots per day depends on whether a [Premium](/power-bi/admin/service-premium-what-is) or Shared capacity is used.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UpdateRefreshScheduleAsync(string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (datasetModelRefreshScheduleRequest == null)
            {
                throw new ArgumentNullException(nameof(datasetModelRefreshScheduleRequest));
            }

            using var message = CreateUpdateRefreshScheduleRequest(datasetId, datasetModelRefreshScheduleRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the refresh schedule for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetModelRefreshScheduleRequest"> Update Refresh Schedule parameters, by specifying all or some of the parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="datasetModelRefreshScheduleRequest"/> is null. </exception>
        /// <remarks>
        /// A request that disables the refresh schedule should contain no other changes.
        ///
        /// At least one day must be specified. If no times are specified, then Power BI will use a default single time per day.
        ///
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// The limit on the number of time slots per day depends on whether a [Premium](/power-bi/admin/service-premium-what-is) or Shared capacity is used.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UpdateRefreshSchedule(string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (datasetModelRefreshScheduleRequest == null)
            {
                throw new ArgumentNullException(nameof(datasetModelRefreshScheduleRequest));
            }

            using var message = CreateUpdateRefreshScheduleRequest(datasetId, datasetModelRefreshScheduleRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDirectQueryRefreshScheduleRequest(string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/directQueryRefreshSchedule", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the refresh schedule for a specified [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections) dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DirectQueryRefreshSchedule>> GetDirectQueryRefreshScheduleAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDirectQueryRefreshScheduleRequest(datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DirectQueryRefreshSchedule value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DirectQueryRefreshSchedule.DeserializeDirectQueryRefreshSchedule(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the refresh schedule for a specified [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections) dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DirectQueryRefreshSchedule> GetDirectQueryRefreshSchedule(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDirectQueryRefreshScheduleRequest(datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DirectQueryRefreshSchedule value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DirectQueryRefreshSchedule.DeserializeDirectQueryRefreshSchedule(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateDirectQueryRefreshScheduleRequest(string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/directQueryRefreshSchedule", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(datasetDQRefreshScheduleRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the refresh schedule for a specified [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections) dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetDQRefreshScheduleRequest"> Patch DirectQuery or LiveConnection Refresh Schedule parameters, by specifying all or some of the parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="datasetDQRefreshScheduleRequest"/> is null. </exception>
        /// <remarks>
        /// A request should contain either a set of days and times *or* a valid frequency, but not both. If you choose a set of days without specifying any times, then Power BI will use a default single time per day. Setting the frequency will automatically overwrite the days and times setting.
        ///
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UpdateDirectQueryRefreshScheduleAsync(string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (datasetDQRefreshScheduleRequest == null)
            {
                throw new ArgumentNullException(nameof(datasetDQRefreshScheduleRequest));
            }

            using var message = CreateUpdateDirectQueryRefreshScheduleRequest(datasetId, datasetDQRefreshScheduleRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the refresh schedule for a specified [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections) dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetDQRefreshScheduleRequest"> Patch DirectQuery or LiveConnection Refresh Schedule parameters, by specifying all or some of the parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="datasetDQRefreshScheduleRequest"/> is null. </exception>
        /// <remarks>
        /// A request should contain either a set of days and times *or* a valid frequency, but not both. If you choose a set of days without specifying any times, then Power BI will use a default single time per day. Setting the frequency will automatically overwrite the days and times setting.
        ///
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UpdateDirectQueryRefreshSchedule(string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (datasetDQRefreshScheduleRequest == null)
            {
                throw new ArgumentNullException(nameof(datasetDQRefreshScheduleRequest));
            }

            using var message = CreateUpdateDirectQueryRefreshScheduleRequest(datasetId, datasetDQRefreshScheduleRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetParametersRequest(string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/parameters", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of parameters for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets with SQL, Oracle, Teradata, and SAP HANA [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections aren't supported.
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<MashupParameters>> GetParametersAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetParametersRequest(datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MashupParameters value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = MashupParameters.DeserializeMashupParameters(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of parameters for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets with SQL, Oracle, Teradata, and SAP HANA [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections aren't supported.
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<MashupParameters> GetParameters(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetParametersRequest(datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MashupParameters value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = MashupParameters.DeserializeMashupParameters(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateParametersRequest(string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/Default.UpdateParameters", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(updateMashupParametersRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the parameters values for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="updateMashupParametersRequest"> The <see cref="UpdateMashupParametersRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="updateMashupParametersRequest"/> is null. </exception>
        /// <remarks>
        /// &gt; [!NOTE]
        /// &gt; We recommend using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with this API call.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset to apply the new parameter values.
        /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes for the update data sources operation to complete, and then refresh the dataset.
        ///
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported. To make changes to those datasets, the admin must use the Azure Analysis Services client library for Tabular Object Model.
        /// - [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections are only supported with [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// - Datasets with Azure Analysis Services live connections aren't supported.
        /// - Maximum of 100 parameters per request.
        /// - All specified parameters must exist in the dataset.
        /// - Parameters values should be of the expected type.
        /// - The parameter list can't be empty or include duplicate parameters.
        /// - Parameters names are case-sensitive.
        /// - Parameter `IsRequired` must have a non-empty value.
        /// - The parameter types `Any` and `Binary` can't be updated.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UpdateParametersAsync(string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (updateMashupParametersRequest == null)
            {
                throw new ArgumentNullException(nameof(updateMashupParametersRequest));
            }

            using var message = CreateUpdateParametersRequest(datasetId, updateMashupParametersRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the parameters values for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="updateMashupParametersRequest"> The <see cref="UpdateMashupParametersRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="updateMashupParametersRequest"/> is null. </exception>
        /// <remarks>
        /// &gt; [!NOTE]
        /// &gt; We recommend using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with this API call.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset to apply the new parameter values.
        /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes for the update data sources operation to complete, and then refresh the dataset.
        ///
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported. To make changes to those datasets, the admin must use the Azure Analysis Services client library for Tabular Object Model.
        /// - [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections are only supported with [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// - Datasets with Azure Analysis Services live connections aren't supported.
        /// - Maximum of 100 parameters per request.
        /// - All specified parameters must exist in the dataset.
        /// - Parameters values should be of the expected type.
        /// - The parameter list can't be empty or include duplicate parameters.
        /// - Parameters names are case-sensitive.
        /// - Parameter `IsRequired` must have a non-empty value.
        /// - The parameter types `Any` and `Binary` can't be updated.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UpdateParameters(string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (updateMashupParametersRequest == null)
            {
                throw new ArgumentNullException(nameof(updateMashupParametersRequest));
            }

            using var message = CreateUpdateParametersRequest(datasetId, updateMashupParametersRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasourcesRequest(string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/datasources", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of data sources for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Datasources>> GetDatasourcesAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDatasourcesRequest(datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasources value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Datasources.DeserializeDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of data sources for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Datasources> GetDatasources(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDatasourcesRequest(datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasources value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Datasources.DeserializeDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateDatasourcesRequest(string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/Default.UpdateDatasources", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(updateDatasourcesRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the data sources of the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="updateDatasourcesRequest"> The <see cref="UpdateDatasourcesRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="updateDatasourcesRequest"/> is null. </exception>
        /// <remarks>
        /// &gt; [!NOTE]
        /// &gt; We recommend using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with this API call.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - The original data source and the new data source must have the exact same schema.
        /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset to get data from the new data sources.
        /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes for the update data sources operation to complete, and then refresh the dataset.
        ///
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Limitations
        ///
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported. To make changes to those data sources, the admin must use the Azure Analysis Services client library for Tabular Object Model.
        /// - Only these data sources are supported: SQL Server, Azure SQL Server, Azure Analysis Services, Azure Synapse, OData, SharePoint, Teradata, and SAP HANA. For other data sources, use the [Update Parameters](/rest/api/power-bi/datasets/update-parameters) API call.
        /// - Changing the data source type isn't supported.
        /// - Data sources that contain parameters in the connection string aren't supported.
        /// - Updating data sources that are part of merged or joined tables is only supported if you're using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// - For an Advanced Query that references multiple data sources, only the first data source will be updated. To overcome this limitation, define the data source as a parameter and use the [Update Parameters](/rest/api/power-bi/datasets/update-parameters) API call.
        /// - Datasets with incremental refresh policy are not fully supported, calling this API may not work as expected and result of partial datasources update, to overcome this you can try run a dataset refresh before calling this API.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UpdateDatasourcesAsync(string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (updateDatasourcesRequest == null)
            {
                throw new ArgumentNullException(nameof(updateDatasourcesRequest));
            }

            using var message = CreateUpdateDatasourcesRequest(datasetId, updateDatasourcesRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the data sources of the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="updateDatasourcesRequest"> The <see cref="UpdateDatasourcesRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="updateDatasourcesRequest"/> is null. </exception>
        /// <remarks>
        /// &gt; [!NOTE]
        /// &gt; We recommend using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with this API call.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - The original data source and the new data source must have the exact same schema.
        /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset to get data from the new data sources.
        /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes for the update data sources operation to complete, and then refresh the dataset.
        ///
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Limitations
        ///
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported. To make changes to those data sources, the admin must use the Azure Analysis Services client library for Tabular Object Model.
        /// - Only these data sources are supported: SQL Server, Azure SQL Server, Azure Analysis Services, Azure Synapse, OData, SharePoint, Teradata, and SAP HANA. For other data sources, use the [Update Parameters](/rest/api/power-bi/datasets/update-parameters) API call.
        /// - Changing the data source type isn't supported.
        /// - Data sources that contain parameters in the connection string aren't supported.
        /// - Updating data sources that are part of merged or joined tables is only supported if you're using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// - For an Advanced Query that references multiple data sources, only the first data source will be updated. To overcome this limitation, define the data source as a parameter and use the [Update Parameters](/rest/api/power-bi/datasets/update-parameters) API call.
        /// - Datasets with incremental refresh policy are not fully supported, calling this API may not work as expected and result of partial datasources update, to overcome this you can try run a dataset refresh before calling this API.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UpdateDatasources(string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (updateDatasourcesRequest == null)
            {
                throw new ArgumentNullException(nameof(updateDatasourcesRequest));
            }

            using var message = CreateUpdateDatasourcesRequest(datasetId, updateDatasourcesRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSetAllDatasetConnectionsRequest(string datasetId, ConnectionDetails parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/Default.SetAllConnections", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Updates all connections for the specified dataset from **My workspace**. This API call only supports SQL DirectQuery datasets. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="parameters"> The body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="parameters"/> is null. </exception>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is deprecated and no longer supported. This API call isn't compatible with [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// &gt;
        /// &gt; Instead use:
        /// &gt;
        /// &gt; - [Update Parameters](/rest/api/power-bi/datasets/update-parameters) to update connections for SQL, Azure Synapse, OData, and SharePoint data sources.
        /// &gt; - [Update Datasources](/rest/api/power-bi/datasets/update-datasources) to connections for other data sources.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> SetAllDatasetConnectionsAsync(string datasetId, ConnectionDetails parameters, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateSetAllDatasetConnectionsRequest(datasetId, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates all connections for the specified dataset from **My workspace**. This API call only supports SQL DirectQuery datasets. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="parameters"> The body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="parameters"/> is null. </exception>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is deprecated and no longer supported. This API call isn't compatible with [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// &gt;
        /// &gt; Instead use:
        /// &gt;
        /// &gt; - [Update Parameters](/rest/api/power-bi/datasets/update-parameters) to update connections for SQL, Azure Synapse, OData, and SharePoint data sources.
        /// &gt; - [Update Datasources](/rest/api/power-bi/datasets/update-datasources) to connections for other data sources.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response SetAllDatasetConnections(string datasetId, ConnectionDetails parameters, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateSetAllDatasetConnectionsRequest(datasetId, parameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateBindToGatewayRequest(string datasetId, BindToGatewayRequest bindToGatewayRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/Default.BindToGateway", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(bindToGatewayRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Binds the specified dataset from **My workspace** to the specified gateway, optionally with a given set of data source IDs. If you don't supply a specific data source ID, the dataset will be bound to the first matching data source in the gateway. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="bindToGatewayRequest"> The bind to gateway request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="bindToGatewayRequest"/> is null. </exception>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; Add the API caller principal as a data source user on the gateway.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports the on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> BindToGatewayAsync(string datasetId, BindToGatewayRequest bindToGatewayRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (bindToGatewayRequest == null)
            {
                throw new ArgumentNullException(nameof(bindToGatewayRequest));
            }

            using var message = CreateBindToGatewayRequest(datasetId, bindToGatewayRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Binds the specified dataset from **My workspace** to the specified gateway, optionally with a given set of data source IDs. If you don't supply a specific data source ID, the dataset will be bound to the first matching data source in the gateway. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="bindToGatewayRequest"> The bind to gateway request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="bindToGatewayRequest"/> is null. </exception>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; Add the API caller principal as a data source user on the gateway.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports the on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response BindToGateway(string datasetId, BindToGatewayRequest bindToGatewayRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (bindToGatewayRequest == null)
            {
                throw new ArgumentNullException(nameof(bindToGatewayRequest));
            }

            using var message = CreateBindToGatewayRequest(datasetId, bindToGatewayRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetGatewayDatasourcesRequest(string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/Default.GetBoundGatewayDatasources", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of gateway data sources for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is deprecated, use [Get Datasources](/rest/api/power-bi/datasets/get-datasources) instead.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<GatewayDatasources>> GetGatewayDatasourcesAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetGatewayDatasourcesRequest(datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GatewayDatasources value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GatewayDatasources.DeserializeGatewayDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of gateway data sources for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is deprecated, use [Get Datasources](/rest/api/power-bi/datasets/get-datasources) instead.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<GatewayDatasources> GetGatewayDatasources(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetGatewayDatasourcesRequest(datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GatewayDatasources value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GatewayDatasources.DeserializeGatewayDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDiscoverGatewaysRequest(string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/Default.DiscoverGateways", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of gateways that the specified dataset from **My workspace** can be bound to. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// This API call is only relevant to datasets that have at least one on-premises connection. For datasets with cloud-only connections, this API call returns an empty list.
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Gateways>> DiscoverGatewaysAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateDiscoverGatewaysRequest(datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Gateways value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Gateways.DeserializeGateways(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of gateways that the specified dataset from **My workspace** can be bound to. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// This API call is only relevant to datasets that have at least one on-premises connection. For datasets with cloud-only connections, this API call returns an empty list.
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Gateways> DiscoverGateways(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateDiscoverGatewaysRequest(datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Gateways value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Gateways.DeserializeGateways(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetQueryScaleOutSyncStatusRequest(string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/queryScaleOut/syncStatus", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the query scale-out sync status for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DatasetQueryScaleOutSyncStatus>> GetQueryScaleOutSyncStatusAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetQueryScaleOutSyncStatusRequest(datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetQueryScaleOutSyncStatus value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatasetQueryScaleOutSyncStatus.DeserializeDatasetQueryScaleOutSyncStatus(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the query scale-out sync status for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DatasetQueryScaleOutSyncStatus> GetQueryScaleOutSyncStatus(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetQueryScaleOutSyncStatusRequest(datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetQueryScaleOutSyncStatus value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatasetQueryScaleOutSyncStatus.DeserializeDatasetQueryScaleOutSyncStatus(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateTriggerQueryScaleOutSyncRequest(string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/queryScaleOut/sync", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Triggers a query scale-out sync of read-only replicas for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DatasetQueryScaleOutSyncStatus>> TriggerQueryScaleOutSyncAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateTriggerQueryScaleOutSyncRequest(datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetQueryScaleOutSyncStatus value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatasetQueryScaleOutSyncStatus.DeserializeDatasetQueryScaleOutSyncStatus(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Triggers a query scale-out sync of read-only replicas for the specified dataset from **My workspace**. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DatasetQueryScaleOutSyncStatus> TriggerQueryScaleOutSync(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateTriggerQueryScaleOutSyncRequest(datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetQueryScaleOutSyncStatus value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatasetQueryScaleOutSyncStatus.DeserializeDatasetQueryScaleOutSyncStatus(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostDatasetUserInGroupRequest(Guid groupId, string datasetId, PostDatasetUserAccess userDetails)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(userDetails);
            request.Content = content;
            return message;
        }

        /// <summary> Grants the specified user's permissions to the specified dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="userDetails"/> is null. </exception>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        ///
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// ## Limitations
        ///
        /// - Adding permissions to service principals (app principalType) isn't supported
        /// - Caller must have ReadReshare permissions on the dataset.
        /// - This API call can't be used to grant dataset Write permission on the dataset
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> PostDatasetUserInGroupAsync(Guid groupId, string datasetId, PostDatasetUserAccess userDetails, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (userDetails == null)
            {
                throw new ArgumentNullException(nameof(userDetails));
            }

            using var message = CreatePostDatasetUserInGroupRequest(groupId, datasetId, userDetails);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Grants the specified user's permissions to the specified dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="userDetails"/> is null. </exception>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        ///
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// ## Limitations
        ///
        /// - Adding permissions to service principals (app principalType) isn't supported
        /// - Caller must have ReadReshare permissions on the dataset.
        /// - This API call can't be used to grant dataset Write permission on the dataset
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response PostDatasetUserInGroup(Guid groupId, string datasetId, PostDatasetUserAccess userDetails, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (userDetails == null)
            {
                throw new ArgumentNullException(nameof(userDetails));
            }

            using var message = CreatePostDatasetUserInGroupRequest(groupId, datasetId, userDetails);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutDatasetUserInGroupRequest(Guid groupId, string datasetId, DatasetUserAccess userDetails)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(userDetails);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the existing dataset permissions of the specified user to the specified permissions. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="userDetails"/> is null. </exception>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// This API call can be used to remove all the dataset permissions of the specified user by using `datasetUserAccessRight: None`
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// ## Permissions
        ///
        /// The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        /// ## Limitations
        ///
        /// - Updating permissions to service principals (app principalType) isn't supported
        /// - Caller must have ReadWriteReshare permissions on the dataset. That is, folder admins, members and contributors with Reshare permissions, or dataset owners.
        /// - This API can't be used to add or remove *write* permission.
        /// - This API can't be used to remove folder-level inherited permissions. For folder admins and members, the ReadWriteReshareExplore permission on the folder's datasets is inherited. For folder contributors, the ReadWriteExplore permission on the folder's datasets is inherited. For folder viewers, the Read permission on the folder's datasets is inherited.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> PutDatasetUserInGroupAsync(Guid groupId, string datasetId, DatasetUserAccess userDetails, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (userDetails == null)
            {
                throw new ArgumentNullException(nameof(userDetails));
            }

            using var message = CreatePutDatasetUserInGroupRequest(groupId, datasetId, userDetails);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the existing dataset permissions of the specified user to the specified permissions. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="userDetails"/> is null. </exception>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// This API call can be used to remove all the dataset permissions of the specified user by using `datasetUserAccessRight: None`
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// ## Permissions
        ///
        /// The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        /// ## Limitations
        ///
        /// - Updating permissions to service principals (app principalType) isn't supported
        /// - Caller must have ReadWriteReshare permissions on the dataset. That is, folder admins, members and contributors with Reshare permissions, or dataset owners.
        /// - This API can't be used to add or remove *write* permission.
        /// - This API can't be used to remove folder-level inherited permissions. For folder admins and members, the ReadWriteReshareExplore permission on the folder's datasets is inherited. For folder contributors, the ReadWriteExplore permission on the folder's datasets is inherited. For folder viewers, the Read permission on the folder's datasets is inherited.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response PutDatasetUserInGroup(Guid groupId, string datasetId, DatasetUserAccess userDetails, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (userDetails == null)
            {
                throw new ArgumentNullException(nameof(userDetails));
            }

            using var message = CreatePutDatasetUserInGroupRequest(groupId, datasetId, userDetails);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasetUsersInGroupRequest(Guid groupId, string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of principals that have access to the specified dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        ///
        /// ## Permissions
        ///
        /// The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// ## Limitations
        ///
        /// Caller must have ReadWriteReshare permissions on the dataset. That is, folder admins, members and contributors with Reshare permissions, or dataset owners.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DatasetUsersAccess>> GetDatasetUsersInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDatasetUsersInGroupRequest(groupId, datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetUsersAccess value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatasetUsersAccess.DeserializeDatasetUsersAccess(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of principals that have access to the specified dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        ///
        /// ## Permissions
        ///
        /// The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// ## Limitations
        ///
        /// Caller must have ReadWriteReshare permissions on the dataset. That is, folder admins, members and contributors with Reshare permissions, or dataset owners.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DatasetUsersAccess> GetDatasetUsersInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDatasetUsersInGroupRequest(groupId, datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetUsersAccess value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatasetUsersAccess.DeserializeDatasetUsersAccess(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostDatasetUserRequest(string datasetId, PostDatasetUserAccess userDetails)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(userDetails);
            request.Content = content;
            return message;
        }

        /// <summary> Grants the specified user's permissions to the specified dataset. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="userDetails"/> is null. </exception>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        ///
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// ## Limitations
        ///
        /// - Adding permissions to service principals (app principalType) isn't supported
        /// - Caller must have ReadReshare permissions on the dataset.
        /// - This API call can't be used to grant dataset Write permission on the dataset
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> PostDatasetUserAsync(string datasetId, PostDatasetUserAccess userDetails, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (userDetails == null)
            {
                throw new ArgumentNullException(nameof(userDetails));
            }

            using var message = CreatePostDatasetUserRequest(datasetId, userDetails);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Grants the specified user's permissions to the specified dataset. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="userDetails"/> is null. </exception>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        ///
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// ## Limitations
        ///
        /// - Adding permissions to service principals (app principalType) isn't supported
        /// - Caller must have ReadReshare permissions on the dataset.
        /// - This API call can't be used to grant dataset Write permission on the dataset
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response PostDatasetUser(string datasetId, PostDatasetUserAccess userDetails, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (userDetails == null)
            {
                throw new ArgumentNullException(nameof(userDetails));
            }

            using var message = CreatePostDatasetUserRequest(datasetId, userDetails);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutDatasetUserRequest(string datasetId, DatasetUserAccess userDetails)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(userDetails);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the existing dataset permissions of the specified user to the specified permissions. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="userDetails"/> is null. </exception>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// This API call can be used to remove all the dataset permissions of the specified user by using `datasetUserAccessRight: None`
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// ## Permissions
        ///
        /// The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        ///
        /// ## Limitations
        ///
        /// - Updating permissions to service principals (app principalType) isn't supported
        /// - Caller must have ReadWriteReshare permissions on the dataset. That is, folder admins, members and contributors with Reshare permissions, or dataset owners.
        /// - This API can't be used to add or remove *write* permission.
        /// - This API can't be used to remove folder-level inherited permissions. For folder admins and members, the ReadWriteReshareExplore permission on the folder's datasets is inherited. For folder contributors, the ReadWriteExplore permission on the folder's datasets is inherited. For folder viewers, the Read permission on the folder's datasets is inherited.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> PutDatasetUserAsync(string datasetId, DatasetUserAccess userDetails, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (userDetails == null)
            {
                throw new ArgumentNullException(nameof(userDetails));
            }

            using var message = CreatePutDatasetUserRequest(datasetId, userDetails);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the existing dataset permissions of the specified user to the specified permissions. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="userDetails"> Details of user access right. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="userDetails"/> is null. </exception>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        /// This API call can be used to remove all the dataset permissions of the specified user by using `datasetUserAccessRight: None`
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// ## Permissions
        ///
        /// The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        ///
        /// ## Limitations
        ///
        /// - Updating permissions to service principals (app principalType) isn't supported
        /// - Caller must have ReadWriteReshare permissions on the dataset. That is, folder admins, members and contributors with Reshare permissions, or dataset owners.
        /// - This API can't be used to add or remove *write* permission.
        /// - This API can't be used to remove folder-level inherited permissions. For folder admins and members, the ReadWriteReshareExplore permission on the folder's datasets is inherited. For folder contributors, the ReadWriteExplore permission on the folder's datasets is inherited. For folder viewers, the Read permission on the folder's datasets is inherited.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response PutDatasetUser(string datasetId, DatasetUserAccess userDetails, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (userDetails == null)
            {
                throw new ArgumentNullException(nameof(userDetails));
            }

            using var message = CreatePutDatasetUserRequest(datasetId, userDetails);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasetUsersRequest(string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of principals that have access to the specified dataset. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        ///
        /// ## Permissions
        ///
        /// The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// ## Limitations
        ///
        ///  Caller must have ReadWriteReshare permissions on the dataset. That is, folder admins, members and contributors with Reshare permissions, or dataset owners.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DatasetUsersAccess>> GetDatasetUsersAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDatasetUsersRequest(datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetUsersAccess value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatasetUsersAccess.DeserializeDatasetUsersAccess(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of principals that have access to the specified dataset. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// When user permissions to a dataset have been recently updated, the new permissions might not be immediately available through API calls. To refresh user permissions, use the [Refresh User Permissions](/rest/api/power-bi/users/refresh-user-permissions) API call.
        ///
        /// ## Permissions
        ///
        /// The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// ## Limitations
        ///
        ///  Caller must have ReadWriteReshare permissions on the dataset. That is, folder admins, members and contributors with Reshare permissions, or dataset owners.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DatasetUsersAccess> GetDatasetUsers(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDatasetUsersRequest(datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetUsersAccess value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatasetUsersAccess.DeserializeDatasetUsersAccess(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasetsInGroupRequest(Guid groupId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of datasets from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Datasets>> GetDatasetsInGroupAsync(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasetsInGroupRequest(groupId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasets value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Datasets.DeserializeDatasets(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of datasets from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Datasets> GetDatasetsInGroup(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasetsInGroupRequest(groupId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasets value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Datasets.DeserializeDatasets(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostDatasetInGroupRequest(Guid groupId, CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets", false);
            if (defaultRetentionPolicy != null)
            {
                uri.AppendQuery("defaultRetentionPolicy", defaultRetentionPolicy.Value.ToSerialString(), true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(dataset);
            request.Content = content;
            return message;
        }

        /// <summary> Creates a new dataset in the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataset"> Create dataset parameters. </param>
        /// <param name="defaultRetentionPolicy"> The default retention policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataset"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Dataset>> PostDatasetInGroupAsync(Guid groupId, CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy = null, CancellationToken cancellationToken = default)
        {
            if (dataset == null)
            {
                throw new ArgumentNullException(nameof(dataset));
            }

            using var message = CreatePostDatasetInGroupRequest(groupId, dataset, defaultRetentionPolicy);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 201:
                case 202:
                    {
                        Dataset value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Dataset.DeserializeDataset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Creates a new dataset in the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="dataset"> Create dataset parameters. </param>
        /// <param name="defaultRetentionPolicy"> The default retention policy. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataset"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Dataset> PostDatasetInGroup(Guid groupId, CreateDatasetRequest dataset, DefaultRetentionPolicy? defaultRetentionPolicy = null, CancellationToken cancellationToken = default)
        {
            if (dataset == null)
            {
                throw new ArgumentNullException(nameof(dataset));
            }

            using var message = CreatePostDatasetInGroupRequest(groupId, dataset, defaultRetentionPolicy);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 201:
                case 202:
                    {
                        Dataset value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Dataset.DeserializeDataset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasetToDataflowsLinksInGroupRequest(Guid groupId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/upstreamDataflows", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of upstream dataflows for datasets from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DatasetToDataflowLinksResponse>> GetDatasetToDataflowsLinksInGroupAsync(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasetToDataflowsLinksInGroupRequest(groupId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetToDataflowLinksResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatasetToDataflowLinksResponse.DeserializeDatasetToDataflowLinksResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of upstream dataflows for datasets from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DatasetToDataflowLinksResponse> GetDatasetToDataflowsLinksInGroup(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasetToDataflowsLinksInGroupRequest(groupId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetToDataflowLinksResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatasetToDataflowLinksResponse.DeserializeDatasetToDataflowLinksResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasetInGroupRequest(Guid groupId, string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Dataset>> GetDatasetInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDatasetInGroupRequest(groupId, datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Dataset value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Dataset.DeserializeDataset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Dataset> GetDatasetInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDatasetInGroupRequest(groupId, datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Dataset value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Dataset.DeserializeDataset(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateDatasetInGroupRequest(Guid groupId, string datasetId, UpdateDatasetRequest updateDatasetRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(updateDatasetRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the properties for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="updateDatasetRequest"> Update dataset request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="updateDatasetRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UpdateDatasetInGroupAsync(Guid groupId, string datasetId, UpdateDatasetRequest updateDatasetRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (updateDatasetRequest == null)
            {
                throw new ArgumentNullException(nameof(updateDatasetRequest));
            }

            using var message = CreateUpdateDatasetInGroupRequest(groupId, datasetId, updateDatasetRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the properties for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="updateDatasetRequest"> Update dataset request parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="updateDatasetRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be the dataset owner.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UpdateDatasetInGroup(Guid groupId, string datasetId, UpdateDatasetRequest updateDatasetRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (updateDatasetRequest == null)
            {
                throw new ArgumentNullException(nameof(updateDatasetRequest));
            }

            using var message = CreateUpdateDatasetInGroupRequest(groupId, datasetId, updateDatasetRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteDatasetInGroupRequest(Guid groupId, string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Deletes the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> DeleteDatasetInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateDeleteDatasetInGroupRequest(groupId, datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deletes the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response DeleteDatasetInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateDeleteDatasetInGroupRequest(groupId, datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetTablesInGroupRequest(Guid groupId, string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/tables", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of tables within the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Tables>> GetTablesInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetTablesInGroupRequest(groupId, datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Tables value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Tables.DeserializeTables(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of tables within the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Tables> GetTablesInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetTablesInGroupRequest(groupId, datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Tables value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Tables.DeserializeTables(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutTableInGroupRequest(Guid groupId, string datasetId, string tableName, Table requestMessage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/tables/", false);
            uri.AppendPath(tableName, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestMessage);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the metadata and schema for the specified table within the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/>, <paramref name="tableName"/> or <paramref name="requestMessage"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Table>> PutTableInGroupAsync(Guid groupId, string datasetId, string tableName, Table requestMessage, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }
            if (requestMessage == null)
            {
                throw new ArgumentNullException(nameof(requestMessage));
            }

            using var message = CreatePutTableInGroupRequest(groupId, datasetId, tableName, requestMessage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Table value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Table.DeserializeTable(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the metadata and schema for the specified table within the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/>, <paramref name="tableName"/> or <paramref name="requestMessage"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Table> PutTableInGroup(Guid groupId, string datasetId, string tableName, Table requestMessage, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }
            if (requestMessage == null)
            {
                throw new ArgumentNullException(nameof(requestMessage));
            }

            using var message = CreatePutTableInGroupRequest(groupId, datasetId, tableName, requestMessage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Table value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Table.DeserializeTable(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePostRowsInGroupRequest(Guid groupId, string datasetId, string tableName, PostRowsRequest requestMessage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/tables/", false);
            uri.AppendPath(tableName, true);
            uri.AppendPath("/rows", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestMessage);
            request.Content = content;
            return message;
        }

        /// <summary> Adds new data rows to the specified table within the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/>, <paramref name="tableName"/> or <paramref name="requestMessage"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - This API call only supports **push datasets**.
        /// - See [Power BI REST API limitations](/power-bi/developer/automation/api-rest-api-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> PostRowsInGroupAsync(Guid groupId, string datasetId, string tableName, PostRowsRequest requestMessage, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }
            if (requestMessage == null)
            {
                throw new ArgumentNullException(nameof(requestMessage));
            }

            using var message = CreatePostRowsInGroupRequest(groupId, datasetId, tableName, requestMessage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Adds new data rows to the specified table within the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/>, <paramref name="tableName"/> or <paramref name="requestMessage"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - This API call only supports **push datasets**.
        /// - See [Power BI REST API limitations](/power-bi/developer/automation/api-rest-api-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response PostRowsInGroup(Guid groupId, string datasetId, string tableName, PostRowsRequest requestMessage, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }
            if (requestMessage == null)
            {
                throw new ArgumentNullException(nameof(requestMessage));
            }

            using var message = CreatePostRowsInGroupRequest(groupId, datasetId, tableName, requestMessage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRowsInGroupRequest(Guid groupId, string datasetId, string tableName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/tables/", false);
            uri.AppendPath(tableName, true);
            uri.AppendPath("/rows", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Deletes all rows from the specified table within the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="tableName"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> DeleteRowsInGroupAsync(Guid groupId, string datasetId, string tableName, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var message = CreateDeleteRowsInGroupRequest(groupId, datasetId, tableName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deletes all rows from the specified table within the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="tableName"> The table name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="tableName"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// This API call only supports **push datasets**. For a complete list of limitations, see [Push datasets limitations](/power-bi/developer/embedded/push-datasets-limitations).
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response DeleteRowsInGroup(Guid groupId, string datasetId, string tableName, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (tableName == null)
            {
                throw new ArgumentNullException(nameof(tableName));
            }

            using var message = CreateDeleteRowsInGroupRequest(groupId, datasetId, tableName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRefreshHistoryInGroupRequest(Guid groupId, string datasetId, int? top)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/refreshes", false);
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the refresh history for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="top"> The requested number of entries in the refresh history. If not provided, the default is the last available 60 entries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// OneDrive refresh history isn't returned.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Refreshes>> GetRefreshHistoryInGroupAsync(Guid groupId, string datasetId, int? top = null, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetRefreshHistoryInGroupRequest(groupId, datasetId, top);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Refreshes value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Refreshes.DeserializeRefreshes(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the refresh history for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="top"> The requested number of entries in the refresh history. If not provided, the default is the last available 60 entries. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// OneDrive refresh history isn't returned.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Refreshes> GetRefreshHistoryInGroup(Guid groupId, string datasetId, int? top = null, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetRefreshHistoryInGroupRequest(groupId, datasetId, top);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Refreshes value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Refreshes.DeserializeRefreshes(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRefreshDatasetInGroupRequest(Guid groupId, string datasetId, DatasetRefreshRequest datasetRefreshRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/refreshes", false);
            request.Uri = uri;
            if (datasetRefreshRequest != null)
            {
                request.Headers.Add("Content-Type", "application/json");
                var content = new Utf8JsonRequestContent();
                content.JsonWriter.WriteObjectValue(datasetRefreshRequest);
                request.Content = content;
            }
            return message;
        }

        /// <summary> Triggers a refresh for the specified dataset from the specified workspace. An [enhanced refresh](/power-bi/connect-data/asynchronous-refresh) is triggered only if a request payload other than `notifyOption` is set. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetRefreshRequest"> The <see cref="DatasetRefreshRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - For Shared capacities, a maximum of eight requests per day, including refreshes executed by using scheduled refresh, can be initiated.
        /// - For Shared capacities, only `notifyOption` can be specified in the request body.
        /// - Enhanced refresh is not supported for shared capacities.
        /// - For enhanced refresh, `notifyOption` is not required and must be excluded from the request body. However, one or more parameters other than `notifyOption` are required.
        /// - For Premium capacities, the maximum requests per day is only limited by the available resources in the capacity. If available resources are overloaded, refreshes are throttled until the load is reduced. The refresh will fail if throttling exceeds 1 hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<ResponseWithHeaders<DatasetsRefreshDatasetInGroupHeaders>> RefreshDatasetInGroupAsync(Guid groupId, string datasetId, DatasetRefreshRequest datasetRefreshRequest = null, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateRefreshDatasetInGroupRequest(groupId, datasetId, datasetRefreshRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DatasetsRefreshDatasetInGroupHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Triggers a refresh for the specified dataset from the specified workspace. An [enhanced refresh](/power-bi/connect-data/asynchronous-refresh) is triggered only if a request payload other than `notifyOption` is set. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetRefreshRequest"> The <see cref="DatasetRefreshRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - For Shared capacities, a maximum of eight requests per day, including refreshes executed by using scheduled refresh, can be initiated.
        /// - For Shared capacities, only `notifyOption` can be specified in the request body.
        /// - Enhanced refresh is not supported for shared capacities.
        /// - For enhanced refresh, `notifyOption` is not required and must be excluded from the request body. However, one or more parameters other than `notifyOption` are required.
        /// - For Premium capacities, the maximum requests per day is only limited by the available resources in the capacity. If available resources are overloaded, refreshes are throttled until the load is reduced. The refresh will fail if throttling exceeds 1 hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public ResponseWithHeaders<DatasetsRefreshDatasetInGroupHeaders> RefreshDatasetInGroup(Guid groupId, string datasetId, DatasetRefreshRequest datasetRefreshRequest = null, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateRefreshDatasetInGroupRequest(groupId, datasetId, datasetRefreshRequest);
            _pipeline.Send(message, cancellationToken);
            var headers = new DatasetsRefreshDatasetInGroupHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRefreshExecutionDetailsInGroupRequest(Guid groupId, Guid datasetId, Guid refreshId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/refreshes/", false);
            uri.AppendPath(refreshId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns execution details of an [enhanced refresh operation](/power-bi/connect-data/asynchronous-refresh) for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="refreshId"> The refresh ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DatasetRefreshDetail>> GetRefreshExecutionDetailsInGroupAsync(Guid groupId, Guid datasetId, Guid refreshId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetRefreshExecutionDetailsInGroupRequest(groupId, datasetId, refreshId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    {
                        DatasetRefreshDetail value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatasetRefreshDetail.DeserializeDatasetRefreshDetail(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns execution details of an [enhanced refresh operation](/power-bi/connect-data/asynchronous-refresh) for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="refreshId"> The refresh ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DatasetRefreshDetail> GetRefreshExecutionDetailsInGroup(Guid groupId, Guid datasetId, Guid refreshId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetRefreshExecutionDetailsInGroupRequest(groupId, datasetId, refreshId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    {
                        DatasetRefreshDetail value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatasetRefreshDetail.DeserializeDatasetRefreshDetail(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCancelRefreshInGroupRequest(Guid groupId, Guid datasetId, Guid refreshId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/refreshes/", false);
            uri.AppendPath(refreshId, true);
            request.Uri = uri;
            return message;
        }

        /// <summary> Cancels the specified refresh operation for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="refreshId"> The refresh ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> CancelRefreshInGroupAsync(Guid groupId, Guid datasetId, Guid refreshId, CancellationToken cancellationToken = default)
        {
            using var message = CreateCancelRefreshInGroupRequest(groupId, datasetId, refreshId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Cancels the specified refresh operation for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="refreshId"> The refresh ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response CancelRefreshInGroup(Guid groupId, Guid datasetId, Guid refreshId, CancellationToken cancellationToken = default)
        {
            using var message = CreateCancelRefreshInGroupRequest(groupId, datasetId, refreshId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRefreshScheduleInGroupRequest(Guid groupId, string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/refreshSchedule", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the refresh schedule for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<RefreshSchedule>> GetRefreshScheduleInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetRefreshScheduleInGroupRequest(groupId, datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RefreshSchedule value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = RefreshSchedule.DeserializeRefreshSchedule(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the refresh schedule for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<RefreshSchedule> GetRefreshScheduleInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetRefreshScheduleInGroupRequest(groupId, datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RefreshSchedule value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = RefreshSchedule.DeserializeRefreshSchedule(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRefreshScheduleInGroupRequest(Guid groupId, string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/refreshSchedule", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(datasetModelRefreshScheduleRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the refresh schedule for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetModelRefreshScheduleRequest"> Update Refresh Schedule parameters, by specifying all or some of the parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="datasetModelRefreshScheduleRequest"/> is null. </exception>
        /// <remarks>
        /// A request that disables the refresh schedule should contain no other changes.
        ///
        /// At least one day must be specified. If no times are specified, then Power BI will use a default single time per day.
        ///
        /// ## Permissions
        ///
        /// - The user must be the dataset owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// The limit on the number of time slots per day depends on whether a [Premium](/power-bi/admin/service-premium-what-is) or Shared capacity is used.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UpdateRefreshScheduleInGroupAsync(Guid groupId, string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (datasetModelRefreshScheduleRequest == null)
            {
                throw new ArgumentNullException(nameof(datasetModelRefreshScheduleRequest));
            }

            using var message = CreateUpdateRefreshScheduleInGroupRequest(groupId, datasetId, datasetModelRefreshScheduleRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the refresh schedule for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetModelRefreshScheduleRequest"> Update Refresh Schedule parameters, by specifying all or some of the parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="datasetModelRefreshScheduleRequest"/> is null. </exception>
        /// <remarks>
        /// A request that disables the refresh schedule should contain no other changes.
        ///
        /// At least one day must be specified. If no times are specified, then Power BI will use a default single time per day.
        ///
        /// ## Permissions
        ///
        /// - The user must be the dataset owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// The limit on the number of time slots per day depends on whether a [Premium](/power-bi/admin/service-premium-what-is) or Shared capacity is used.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UpdateRefreshScheduleInGroup(Guid groupId, string datasetId, RefreshScheduleRequest datasetModelRefreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (datasetModelRefreshScheduleRequest == null)
            {
                throw new ArgumentNullException(nameof(datasetModelRefreshScheduleRequest));
            }

            using var message = CreateUpdateRefreshScheduleInGroupRequest(groupId, datasetId, datasetModelRefreshScheduleRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDirectQueryRefreshScheduleInGroupRequest(Guid groupId, string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/directQueryRefreshSchedule", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the refresh schedule for a specified [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections) dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DirectQueryRefreshSchedule>> GetDirectQueryRefreshScheduleInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDirectQueryRefreshScheduleInGroupRequest(groupId, datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DirectQueryRefreshSchedule value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DirectQueryRefreshSchedule.DeserializeDirectQueryRefreshSchedule(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the refresh schedule for a specified [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections) dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DirectQueryRefreshSchedule> GetDirectQueryRefreshScheduleInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDirectQueryRefreshScheduleInGroupRequest(groupId, datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DirectQueryRefreshSchedule value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DirectQueryRefreshSchedule.DeserializeDirectQueryRefreshSchedule(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateDirectQueryRefreshScheduleInGroupRequest(Guid groupId, string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/directQueryRefreshSchedule", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(datasetDQRefreshScheduleRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the refresh schedule for a specified [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections) dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetDQRefreshScheduleRequest"> Patch DirectQuery or LiveConnection Refresh Schedule parameters, by specifying all or some of the parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="datasetDQRefreshScheduleRequest"/> is null. </exception>
        /// <remarks>
        /// A request should contain either a set of days and times *or* a valid frequency, but not both. If you choose a set of days without specifying any times, then Power BI will use a default single time per day. Setting the frequency will automatically overwrite the days and times setting.
        ///
        /// ## Permissions
        ///
        /// - The user must be the dataset owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UpdateDirectQueryRefreshScheduleInGroupAsync(Guid groupId, string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (datasetDQRefreshScheduleRequest == null)
            {
                throw new ArgumentNullException(nameof(datasetDQRefreshScheduleRequest));
            }

            using var message = CreateUpdateDirectQueryRefreshScheduleInGroupRequest(groupId, datasetId, datasetDQRefreshScheduleRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the refresh schedule for a specified [DirectQuery](/power-bi/connect-data/desktop-directquery-about) or [LiveConnection](/power-bi/connect-data/desktop-directquery-about#live-connections) dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="datasetDQRefreshScheduleRequest"> Patch DirectQuery or LiveConnection Refresh Schedule parameters, by specifying all or some of the parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="datasetDQRefreshScheduleRequest"/> is null. </exception>
        /// <remarks>
        /// A request should contain either a set of days and times *or* a valid frequency, but not both. If you choose a set of days without specifying any times, then Power BI will use a default single time per day. Setting the frequency will automatically overwrite the days and times setting.
        ///
        /// ## Permissions
        ///
        /// - The user must be the dataset owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UpdateDirectQueryRefreshScheduleInGroup(Guid groupId, string datasetId, DirectQueryRefreshScheduleRequest datasetDQRefreshScheduleRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (datasetDQRefreshScheduleRequest == null)
            {
                throw new ArgumentNullException(nameof(datasetDQRefreshScheduleRequest));
            }

            using var message = CreateUpdateDirectQueryRefreshScheduleInGroupRequest(groupId, datasetId, datasetDQRefreshScheduleRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetParametersInGroupRequest(Guid groupId, string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/parameters", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of parameters for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets with SQL, Oracle, Teradata, and SAP HANA [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections aren't supported.
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<MashupParameters>> GetParametersInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetParametersInGroupRequest(groupId, datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MashupParameters value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = MashupParameters.DeserializeMashupParameters(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of parameters for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets with SQL, Oracle, Teradata, and SAP HANA [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections aren't supported.
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<MashupParameters> GetParametersInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetParametersInGroupRequest(groupId, datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MashupParameters value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = MashupParameters.DeserializeMashupParameters(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateParametersInGroupRequest(Guid groupId, string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/Default.UpdateParameters", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(updateMashupParametersRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the parameters values for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="updateMashupParametersRequest"> The <see cref="UpdateMashupParametersRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="updateMashupParametersRequest"/> is null. </exception>
        /// <remarks>
        /// &gt; [!NOTE]
        /// &gt; We recommend using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with this API call.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset to apply the new parameter values.
        /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes for the update data sources operation to complete, and then refresh the dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must be the dataset owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported. To make changes to those datasets, the admin must use the Azure Analysis Services client library for Tabular Object Model.
        /// - [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections are only supported with [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// - Datasets with Azure Analysis Services live connections aren't supported.
        /// - Maximum of 100 parameters per request.
        /// - All specified parameters must exist in the dataset.
        /// - Parameters values should be of the expected type.
        /// - The parameter list can't be empty or include duplicate parameters.
        /// - Parameters names are case-sensitive.
        /// - Parameter `IsRequired` must have a non-empty value.
        /// - The parameter types `Any` and `Binary` can't be updated.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UpdateParametersInGroupAsync(Guid groupId, string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (updateMashupParametersRequest == null)
            {
                throw new ArgumentNullException(nameof(updateMashupParametersRequest));
            }

            using var message = CreateUpdateParametersInGroupRequest(groupId, datasetId, updateMashupParametersRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the parameters values for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="updateMashupParametersRequest"> The <see cref="UpdateMashupParametersRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="updateMashupParametersRequest"/> is null. </exception>
        /// <remarks>
        /// &gt; [!NOTE]
        /// &gt; We recommend using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with this API call.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset to apply the new parameter values.
        /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes for the update data sources operation to complete, and then refresh the dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must be the dataset owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported. To make changes to those datasets, the admin must use the Azure Analysis Services client library for Tabular Object Model.
        /// - [DirectQuery](/power-bi/connect-data/desktop-directquery-about) connections are only supported with [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// - Datasets with Azure Analysis Services live connections aren't supported.
        /// - Maximum of 100 parameters per request.
        /// - All specified parameters must exist in the dataset.
        /// - Parameters values should be of the expected type.
        /// - The parameter list can't be empty or include duplicate parameters.
        /// - Parameters names are case-sensitive.
        /// - Parameter `IsRequired` must have a non-empty value.
        /// - The parameter types `Any` and `Binary` can't be updated.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UpdateParametersInGroup(Guid groupId, string datasetId, UpdateMashupParametersRequest updateMashupParametersRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (updateMashupParametersRequest == null)
            {
                throw new ArgumentNullException(nameof(updateMashupParametersRequest));
            }

            using var message = CreateUpdateParametersInGroupRequest(groupId, datasetId, updateMashupParametersRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasourcesInGroupRequest(Guid groupId, string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/datasources", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of data sources for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Datasources>> GetDatasourcesInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDatasourcesInGroupRequest(groupId, datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasources value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Datasources.DeserializeDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of data sources for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Datasources> GetDatasourcesInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDatasourcesInGroupRequest(groupId, datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasources value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Datasources.DeserializeDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateDatasourcesInGroupRequest(Guid groupId, string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/Default.UpdateDatasources", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(updateDatasourcesRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the data sources of the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="updateDatasourcesRequest"> The <see cref="UpdateDatasourcesRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="updateDatasourcesRequest"/> is null. </exception>
        /// <remarks>
        /// &gt; [!NOTE]
        /// &gt; We recommend using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with this API call.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - The original data source and the new data source must have the exact same schema.
        /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset to get data from the new data sources.
        /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes for the update data sources operation to complete, and then refresh the dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must be the dataset owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported. To make changes to those data sources, the admin must use the Azure Analysis Services client library for Tabular Object Model.
        /// - Only these data sources are supported: SQL Server, Azure SQL Server, Azure Analysis Services, Azure Synapse, OData, SharePoint, Teradata, and SAP HANA. For other data sources, use the [Update Parameters In Group](/rest/api/power-bi/datasets/update-parameters-in-group) API call.
        /// - Changing the data source type isn't supported.
        /// - Data sources that contain parameters in the connection string aren't supported.
        /// - Updating data sources that are part of merged or joined tables is only supported if you're using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// - For an Advanced Query that reference multiple data sources, only the first data source will be updated. To overcome this limitation, define the data source as a parameter and use the [Update Parameters In Group](/rest/api/power-bi/datasets/update-parameters-in-group) API call.
        /// - Datasets with incremental refresh policy are not fully supported, calling this API may not work as expected and result of partial datasources update, to overcome this you can try run a dataset refresh before calling this API.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> UpdateDatasourcesInGroupAsync(Guid groupId, string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (updateDatasourcesRequest == null)
            {
                throw new ArgumentNullException(nameof(updateDatasourcesRequest));
            }

            using var message = CreateUpdateDatasourcesInGroupRequest(groupId, datasetId, updateDatasourcesRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the data sources of the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="updateDatasourcesRequest"> The <see cref="UpdateDatasourcesRequest"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="updateDatasourcesRequest"/> is null. </exception>
        /// <remarks>
        /// &gt; [!NOTE]
        /// &gt; We recommend using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata) with this API call.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - The original data source and the new data source must have the exact same schema.
        /// &gt; - If you're using **enhanced dataset metadata**, refresh the dataset to get data from the new data sources.
        /// &gt; - If you're not using **enhanced dataset metadata**, wait 30 minutes for the update data sources operation to complete, and then refresh the dataset.
        ///
        /// ## Permissions
        ///
        /// - The user must be the dataset owner.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Datasets created or modified using the public [XMLA endpoint](/power-bi/admin/service-premium-connect-tools) aren't supported. To make changes to those data sources, the admin must use the Azure Analysis Services client library for Tabular Object Model.
        /// - Only these data sources are supported: SQL Server, Azure SQL Server, Azure Analysis Services, Azure Synapse, OData, SharePoint, Teradata, and SAP HANA. For other data sources, use the [Update Parameters In Group](/rest/api/power-bi/datasets/update-parameters-in-group) API call.
        /// - Changing the data source type isn't supported.
        /// - Data sources that contain parameters in the connection string aren't supported.
        /// - Updating data sources that are part of merged or joined tables is only supported if you're using [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// - For an Advanced Query that reference multiple data sources, only the first data source will be updated. To overcome this limitation, define the data source as a parameter and use the [Update Parameters In Group](/rest/api/power-bi/datasets/update-parameters-in-group) API call.
        /// - Datasets with incremental refresh policy are not fully supported, calling this API may not work as expected and result of partial datasources update, to overcome this you can try run a dataset refresh before calling this API.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response UpdateDatasourcesInGroup(Guid groupId, string datasetId, UpdateDatasourcesRequest updateDatasourcesRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (updateDatasourcesRequest == null)
            {
                throw new ArgumentNullException(nameof(updateDatasourcesRequest));
            }

            using var message = CreateUpdateDatasourcesInGroupRequest(groupId, datasetId, updateDatasourcesRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSetAllDatasetConnectionsInGroupRequest(Guid groupId, string datasetId, ConnectionDetails parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/Default.SetAllConnections", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Updates all connections for the specified dataset from the specified workspace. This API call only supports SQL DirectQuery datasets. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="parameters"> The body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="parameters"/> is null. </exception>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is deprecated and no longer supported. This API call isn't compatible with [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// &gt;
        /// &gt; Instead use:
        /// &gt;
        /// &gt; - [Update Parameters In Group](/rest/api/power-bi/datasets/update-parameters-in-group) to update connections for SQL, Azure Synapse, OData, and SharePoint data sources.
        /// &gt; - [Update Datasources In Group](/rest/api/power-bi/datasets/update-datasources-in-group) to connections for other data sources.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Supports SQL DirectQuery datasets.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> SetAllDatasetConnectionsInGroupAsync(Guid groupId, string datasetId, ConnectionDetails parameters, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateSetAllDatasetConnectionsInGroupRequest(groupId, datasetId, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates all connections for the specified dataset from the specified workspace. This API call only supports SQL DirectQuery datasets. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="parameters"> The body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="parameters"/> is null. </exception>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is deprecated and no longer supported. This API call isn't compatible with [enhanced dataset metadata](/power-bi/connect-data/desktop-enhanced-dataset-metadata).
        /// &gt;
        /// &gt; Instead use:
        /// &gt;
        /// &gt; - [Update Parameters In Group](/rest/api/power-bi/datasets/update-parameters-in-group) to update connections for SQL, Azure Synapse, OData, and SharePoint data sources.
        /// &gt; - [Update Datasources In Group](/rest/api/power-bi/datasets/update-datasources-in-group) to connections for other data sources.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Supports SQL DirectQuery datasets.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response SetAllDatasetConnectionsInGroup(Guid groupId, string datasetId, ConnectionDetails parameters, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateSetAllDatasetConnectionsInGroupRequest(groupId, datasetId, parameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateBindToGatewayInGroupRequest(Guid groupId, string datasetId, BindToGatewayRequest bindToGatewayRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/Default.BindToGateway", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(bindToGatewayRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Binds the specified dataset from the specified workspace to the specified gateway, optionally with a given set of data source IDs. If you don't supply a specific data source ID, the dataset will be bound to the first matching data source in the gateway. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="bindToGatewayRequest"> The bind to gateway request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="bindToGatewayRequest"/> is null. </exception>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; Add the API caller principal as a data source user on the gateway.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports the on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> BindToGatewayInGroupAsync(Guid groupId, string datasetId, BindToGatewayRequest bindToGatewayRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (bindToGatewayRequest == null)
            {
                throw new ArgumentNullException(nameof(bindToGatewayRequest));
            }

            using var message = CreateBindToGatewayInGroupRequest(groupId, datasetId, bindToGatewayRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Binds the specified dataset from the specified workspace to the specified gateway, optionally with a given set of data source IDs. If you don't supply a specific data source ID, the dataset will be bound to the first matching data source in the gateway. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="bindToGatewayRequest"> The bind to gateway request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="bindToGatewayRequest"/> is null. </exception>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; Add the API caller principal as a data source user on the gateway.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Only supports the on-premises data gateway
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response BindToGatewayInGroup(Guid groupId, string datasetId, BindToGatewayRequest bindToGatewayRequest, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (bindToGatewayRequest == null)
            {
                throw new ArgumentNullException(nameof(bindToGatewayRequest));
            }

            using var message = CreateBindToGatewayInGroupRequest(groupId, datasetId, bindToGatewayRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetGatewayDatasourcesInGroupRequest(Guid groupId, string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/Default.GetBoundGatewayDatasources", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of gateway data sources for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is deprecated, use [Get Datasources In Group](/rest/api/power-bi/datasets/get-datasources-in-group) instead.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<GatewayDatasources>> GetGatewayDatasourcesInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetGatewayDatasourcesInGroupRequest(groupId, datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GatewayDatasources value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GatewayDatasources.DeserializeGatewayDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of gateway data sources for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is deprecated, use [Get Datasources In Group](/rest/api/power-bi/datasets/get-datasources-in-group) instead.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<GatewayDatasources> GetGatewayDatasourcesInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetGatewayDatasourcesInGroupRequest(groupId, datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GatewayDatasources value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GatewayDatasources.DeserializeGatewayDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDiscoverGatewaysInGroupRequest(Guid groupId, string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/Default.DiscoverGateways", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of gateways that the specified dataset from the specified workspace can be bound to. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// This API call is only relevant to datasets that have at least one on-premises connection. For datasets with cloud-only connections, this API call returns an empty list.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Gateways>> DiscoverGatewaysInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateDiscoverGatewaysInGroupRequest(groupId, datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Gateways value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Gateways.DeserializeGateways(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of gateways that the specified dataset from the specified workspace can be bound to. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// This API call is only relevant to datasets that have at least one on-premises connection. For datasets with cloud-only connections, this API call returns an empty list.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Gateways> DiscoverGatewaysInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateDiscoverGatewaysInGroupRequest(groupId, datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Gateways value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Gateways.DeserializeGateways(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateTakeOverInGroupRequest(Guid groupId, string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/Default.TakeOver", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Transfers ownership over the specified dataset to the current authorized user. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> TakeOverInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateTakeOverInGroupRequest(groupId, datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Transfers ownership over the specified dataset to the current authorized user. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response TakeOverInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateTakeOverInGroupRequest(groupId, datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateExecuteQueriesInGroupRequest(Guid groupId, string datasetId, DatasetExecuteQueriesRequest requestMessage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/executeQueries", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestMessage);
            request.Content = content;
            return message;
        }

        /// <summary> Executes Data Analysis Expressions (DAX) queries against the provided dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="requestMessage"/> is null. </exception>
        /// <remarks>
        /// DAX query errors will result in:
        ///
        /// - A response error, such as `DAX query failure`.
        /// - A failure HTTP status code (400).
        ///
        /// A query that requests more than one table, or more than the allowed number of table rows, will result in:
        ///
        /// - Limited data being returned.
        /// - A response error, such as `More than one result table in a query` or `More than {allowed number} rows in a query result`.
        /// - A successful HTTP status code (200).
        ///
        /// Columns that are fully qualified in the query will be returned with a fully qualified name, for example, `MyTable[MyColumn]`. Columns that are renamed or created in the query will be returned within square bracket, for example, `[MyNewColumn]`.
        ///
        /// ## Permissions
        ///
        /// The tenant setting **Dataset Execute Queries REST API**, found under **Integration settings**, must be enabled.
        ///
        /// The user must have access to the workspace, and dataset read and build permissions. For more information, see [Manage dataset access permissions](/power-bi/connect-data/service-datasets-manage-access-permissions).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// - Datasets that are hosted in Azure Analysis Services or that have a live connection to an on-premises Azure Analysis Services model aren't supported.
        /// - One query per API call.
        /// - One table request per query.
        /// - Maximum of 100,000 rows or 1,000,000 values per query (whichever is hit first). For example if you query for 5 columns, you can get back max 100,000 rows. If you query for 20 columns, you can get back max 50,000 rows (1 million divided by 20).
        /// - Maximum of 15MB of data per query. Once 15MB is exceeded, the current row will be completed but no additional rows will be written.
        /// - There's a limit of 120 query requests per minute per user, regardless of the dataset that's queried.
        /// - To use Service Principals, make sure the admin tenant setting [_Allow service principals to use Power BI APIs_](/power-bi/admin/service-admin-portal-developer#allow-service-principals-to-use-power-bi-apis) under _Developer settings_ is enabled. However, regardless of the admin tenant setting, Service Principals aren't supported for datasets with RLS per [RLS limitations](/power-bi/admin/service-admin-rls#considerations-and-limitations) or datasets with SSO enabled.
        /// - Only DAX queries are supported at this time. MDX, INFO functions and DMV queries are not supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DatasetExecuteQueriesResponse>> ExecuteQueriesInGroupAsync(Guid groupId, string datasetId, DatasetExecuteQueriesRequest requestMessage, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (requestMessage == null)
            {
                throw new ArgumentNullException(nameof(requestMessage));
            }

            using var message = CreateExecuteQueriesInGroupRequest(groupId, datasetId, requestMessage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetExecuteQueriesResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatasetExecuteQueriesResponse.DeserializeDatasetExecuteQueriesResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Executes Data Analysis Expressions (DAX) queries against the provided dataset. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="requestMessage"> The request message. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="requestMessage"/> is null. </exception>
        /// <remarks>
        /// DAX query errors will result in:
        ///
        /// - A response error, such as `DAX query failure`.
        /// - A failure HTTP status code (400).
        ///
        /// A query that requests more than one table, or more than the allowed number of table rows, will result in:
        ///
        /// - Limited data being returned.
        /// - A response error, such as `More than one result table in a query` or `More than {allowed number} rows in a query result`.
        /// - A successful HTTP status code (200).
        ///
        /// Columns that are fully qualified in the query will be returned with a fully qualified name, for example, `MyTable[MyColumn]`. Columns that are renamed or created in the query will be returned within square bracket, for example, `[MyNewColumn]`.
        ///
        /// ## Permissions
        ///
        /// The tenant setting **Dataset Execute Queries REST API**, found under **Integration settings**, must be enabled.
        ///
        /// The user must have access to the workspace, and dataset read and build permissions. For more information, see [Manage dataset access permissions](/power-bi/connect-data/service-datasets-manage-access-permissions).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// - Datasets that are hosted in Azure Analysis Services or that have a live connection to an on-premises Azure Analysis Services model aren't supported.
        /// - One query per API call.
        /// - One table request per query.
        /// - Maximum of 100,000 rows or 1,000,000 values per query (whichever is hit first). For example if you query for 5 columns, you can get back max 100,000 rows. If you query for 20 columns, you can get back max 50,000 rows (1 million divided by 20).
        /// - Maximum of 15MB of data per query. Once 15MB is exceeded, the current row will be completed but no additional rows will be written.
        /// - There's a limit of 120 query requests per minute per user, regardless of the dataset that's queried.
        /// - To use Service Principals, make sure the admin tenant setting [_Allow service principals to use Power BI APIs_](/power-bi/admin/service-admin-portal-developer#allow-service-principals-to-use-power-bi-apis) under _Developer settings_ is enabled. However, regardless of the admin tenant setting, Service Principals aren't supported for datasets with RLS per [RLS limitations](/power-bi/admin/service-admin-rls#considerations-and-limitations) or datasets with SSO enabled.
        /// - Only DAX queries are supported at this time. MDX, INFO functions and DMV queries are not supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DatasetExecuteQueriesResponse> ExecuteQueriesInGroup(Guid groupId, string datasetId, DatasetExecuteQueriesRequest requestMessage, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (requestMessage == null)
            {
                throw new ArgumentNullException(nameof(requestMessage));
            }

            using var message = CreateExecuteQueriesInGroupRequest(groupId, datasetId, requestMessage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetExecuteQueriesResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatasetExecuteQueriesResponse.DeserializeDatasetExecuteQueriesResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetQueryScaleOutSyncStatusInGroupRequest(Guid groupId, string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/queryScaleOut/syncStatus", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the query scale-out sync status for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DatasetQueryScaleOutSyncStatus>> GetQueryScaleOutSyncStatusInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetQueryScaleOutSyncStatusInGroupRequest(groupId, datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetQueryScaleOutSyncStatus value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatasetQueryScaleOutSyncStatus.DeserializeDatasetQueryScaleOutSyncStatus(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the query scale-out sync status for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DatasetQueryScaleOutSyncStatus> GetQueryScaleOutSyncStatusInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetQueryScaleOutSyncStatusInGroupRequest(groupId, datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetQueryScaleOutSyncStatus value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatasetQueryScaleOutSyncStatus.DeserializeDatasetQueryScaleOutSyncStatus(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateTriggerQueryScaleOutSyncInGroupRequest(Guid groupId, string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/queryScaleOut/sync", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Triggers a query scale-out sync of read-only replicas for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DatasetQueryScaleOutSyncStatus>> TriggerQueryScaleOutSyncInGroupAsync(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateTriggerQueryScaleOutSyncInGroupRequest(groupId, datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetQueryScaleOutSyncStatus value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatasetQueryScaleOutSyncStatus.DeserializeDatasetQueryScaleOutSyncStatus(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Triggers a query scale-out sync of read-only replicas for the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DatasetQueryScaleOutSyncStatus> TriggerQueryScaleOutSyncInGroup(Guid groupId, string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateTriggerQueryScaleOutSyncInGroupRequest(groupId, datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetQueryScaleOutSyncStatus value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatasetQueryScaleOutSyncStatus.DeserializeDatasetQueryScaleOutSyncStatus(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGenerateTokenInGroupRequest(Guid groupId, string datasetId, GenerateTokenRequest requestParameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/GenerateToken", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(requestParameters);
            request.Content = content;
            return message;
        }

        /// <summary> Generates an embed token based on the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="requestParameters"> Generate token parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// &gt; [!TIP]
        /// &gt; To create embed tokens, it's recommended to use the latest API, [Generate Token](/rest/api/power-bi/embed-token/generate-token). Generate token supports additional functions, such as creating a token for multiple items.
        ///
        /// &gt; [!NOTE]
        /// &gt; An embed token can be used to [embed Q&amp;A](/power-bi/developer/qanda) within your application.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is only relevant to the [embed for your customers](/power-bi/developer/embed-sample-for-customers) scenario. To learn more about using this API, see [Considerations when generating an embed token](/power-bi/developer/embedded/generate-embed-token).
        ///
        /// ## Permissions
        ///
        /// - When using a service principal for authentication, refer to [Embed Power BI content with service principal](/power-bi/developer/embed-service-principal) and [Considerations and limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<EmbedToken>> GenerateTokenInGroupAsync(Guid groupId, string datasetId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateGenerateTokenInGroupRequest(groupId, datasetId, requestParameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EmbedToken value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = EmbedToken.DeserializeEmbedToken(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Generates an embed token based on the specified dataset from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="requestParameters"> Generate token parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="requestParameters"/> is null. </exception>
        /// <remarks>
        /// &gt; [!TIP]
        /// &gt; To create embed tokens, it's recommended to use the latest API, [Generate Token](/rest/api/power-bi/embed-token/generate-token). Generate token supports additional functions, such as creating a token for multiple items.
        ///
        /// &gt; [!NOTE]
        /// &gt; An embed token can be used to [embed Q&amp;A](/power-bi/developer/qanda) within your application.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt; This API call is only relevant to the [embed for your customers](/power-bi/developer/embed-sample-for-customers) scenario. To learn more about using this API, see [Considerations when generating an embed token](/power-bi/developer/embedded/generate-embed-token).
        ///
        /// ## Permissions
        ///
        /// - When using a service principal for authentication, refer to [Embed Power BI content with service principal](/power-bi/developer/embed-service-principal) and [Considerations and limitations](/power-bi/developer/embedded/embed-service-principal#considerations-and-limitations).
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<EmbedToken> GenerateTokenInGroup(Guid groupId, string datasetId, GenerateTokenRequest requestParameters, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (requestParameters == null)
            {
                throw new ArgumentNullException(nameof(requestParameters));
            }

            using var message = CreateGenerateTokenInGroupRequest(groupId, datasetId, requestParameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        EmbedToken value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = EmbedToken.DeserializeEmbedToken(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasetsAsAdminRequest(string filter, int? top, int? skip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/datasets", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of datasets for the organization. </summary>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 50 requests per hour or 5 requests per minute, per tenant.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<AdminDatasets>> GetDatasetsAsAdminAsync(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasetsAsAdminRequest(filter, top, skip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminDatasets value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AdminDatasets.DeserializeAdminDatasets(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of datasets for the organization. </summary>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 50 requests per hour or 5 requests per minute, per tenant.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<AdminDatasets> GetDatasetsAsAdmin(string filter = null, int? top = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasetsAsAdminRequest(filter, top, skip);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminDatasets value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AdminDatasets.DeserializeAdminDatasets(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasourcesAsAdminRequest(string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/datasources", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of data sources for the specified dataset. </summary>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 300 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Datasources>> GetDatasourcesAsAdminAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDatasourcesAsAdminRequest(datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasources value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Datasources.DeserializeDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of data sources for the specified dataset. </summary>
        /// <param name="datasetId"> The <see cref="string"/> to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        /// <remarks>
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 300 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Datasources> GetDatasourcesAsAdmin(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetDatasourcesAsAdminRequest(datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Datasources value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Datasources.DeserializeDatasources(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasetUsersAsAdminRequest(Guid datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendPath("/users", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of users that have access to the specified dataset. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        /// - The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DatasetUsers>> GetDatasetUsersAsAdminAsync(Guid datasetId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasetUsersAsAdminRequest(datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetUsers value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatasetUsers.DeserializeDatasetUsers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of users that have access to the specified dataset. </summary>
        /// <param name="datasetId"> The dataset ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        /// - The permissions for this API call are listed in [Datasets permissions](/power-bi/developer/embedded/datasets-permissions).
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DatasetUsers> GetDatasetUsersAsAdmin(Guid datasetId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasetUsersAsAdminRequest(datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetUsers value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatasetUsers.DeserializeDatasetUsers(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasetsInGroupAsAdminRequest(Guid groupId, string filter, int? top, int? skip, string expand)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of datasets from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="expand"> Expands related entities inline. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<AdminDatasets>> GetDatasetsInGroupAsAdminAsync(Guid groupId, string filter = null, int? top = null, int? skip = null, string expand = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasetsInGroupAsAdminRequest(groupId, filter, top, skip, expand);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminDatasets value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AdminDatasets.DeserializeAdminDatasets(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of datasets from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="skip"> Skips the first n results. </param>
        /// <param name="expand"> Expands related entities inline. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<AdminDatasets> GetDatasetsInGroupAsAdmin(Guid groupId, string filter = null, int? top = null, int? skip = null, string expand = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasetsInGroupAsAdminRequest(groupId, filter, top, skip, expand);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AdminDatasets value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AdminDatasets.DeserializeAdminDatasets(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDatasetToDataflowsLinksInGroupAsAdminRequest(Guid groupId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/datasets/upstreamDataflows", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of upstream dataflows for datasets from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<DatasetToDataflowLinksResponse>> GetDatasetToDataflowsLinksInGroupAsAdminAsync(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasetToDataflowsLinksInGroupAsAdminRequest(groupId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetToDataflowLinksResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatasetToDataflowLinksResponse.DeserializeDatasetToDataflowLinksResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of upstream dataflows for datasets from the specified workspace. </summary>
        /// <param name="groupId"> The workspace ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<DatasetToDataflowLinksResponse> GetDatasetToDataflowsLinksInGroupAsAdmin(Guid groupId, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDatasetToDataflowsLinksInGroupAsAdminRequest(groupId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetToDataflowLinksResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatasetToDataflowLinksResponse.DeserializeDatasetToDataflowLinksResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
