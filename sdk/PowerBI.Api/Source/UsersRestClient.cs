// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    internal partial class UsersRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of UsersRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public UsersRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://api.powerbi.com");
        }

        internal HttpMessage CreateRefreshUserPermissionsRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/RefreshUserPermissions", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Refreshes user permissions in Power BI. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When a user is granted permissions to a workspace, app, or Power BI item (such as a report or a dashboard), the new permissions might not be immediately available through API calls. This operation refreshes user permissions to ensure they're fully updated.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - Call **Refresh User Permissions** before making other API calls.
        /// &gt; - Since it takes about two minutes for the permissions to get refreshed, wait for two minutes before making other API calls.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.Read.All or Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum one call per user per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> RefreshUserPermissionsAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateRefreshUserPermissionsRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Refreshes user permissions in Power BI. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// When a user is granted permissions to a workspace, app, or Power BI item (such as a report or a dashboard), the new permissions might not be immediately available through API calls. This operation refreshes user permissions to ensure they're fully updated.
        ///
        /// &gt; [!IMPORTANT]
        /// &gt;
        /// &gt; - Call **Refresh User Permissions** before making other API calls.
        /// &gt; - Since it takes about two minutes for the permissions to get refreshed, wait for two minutes before making other API calls.
        ///
        /// ## Permissions
        ///
        /// This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Workspace.Read.All or Workspace.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum one call per user per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response RefreshUserPermissions(CancellationToken cancellationToken = default)
        {
            using var message = CreateRefreshUserPermissionsRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetUserArtifactAccessAsAdminRequest(string userId, string continuationToken, string artifactTypes)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/artifactAccess", false);
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (artifactTypes != null)
            {
                uri.AppendQuery("artifactTypes", artifactTypes, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of Power BI items (such as reports or dashboards) that the specified user has access to. </summary>
        /// <param name="userId"> The graph ID or user principal name (UPN) of the user. </param>
        /// <param name="continuationToken"> Token required to get the next chunk of the result set. </param>
        /// <param name="artifactTypes"> Comma separated list of artifact types. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<ArtifactAccessResponse>> GetUserArtifactAccessAsAdminAsync(string userId, string continuationToken = null, string artifactTypes = null, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetUserArtifactAccessAsAdminRequest(userId, continuationToken, artifactTypes);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ArtifactAccessResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ArtifactAccessResponse.DeserializeArtifactAccessResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of Power BI items (such as reports or dashboards) that the specified user has access to. </summary>
        /// <param name="userId"> The graph ID or user principal name (UPN) of the user. </param>
        /// <param name="continuationToken"> Token required to get the next chunk of the result set. </param>
        /// <param name="artifactTypes"> Comma separated list of artifact types. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<ArtifactAccessResponse> GetUserArtifactAccessAsAdmin(string userId, string continuationToken = null, string artifactTypes = null, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetUserArtifactAccessAsAdminRequest(userId, continuationToken, artifactTypes);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ArtifactAccessResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ArtifactAccessResponse.DeserializeArtifactAccessResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetUserSubscriptionsAsAdminRequest(string userId, string continuationToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/users/", false);
            uri.AppendPath(userId, true);
            uri.AppendPath("/subscriptions", false);
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of subscriptions for the specified user. This is a preview API call. </summary>
        /// <param name="userId"> The graph ID or user principal name (UPN) of the user. </param>
        /// <param name="continuationToken"> Token required to get the next chunk of the result set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        /// <remarks>
        /// ### Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<SubscriptionsByUserResponse>> GetUserSubscriptionsAsAdminAsync(string userId, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetUserSubscriptionsAsAdminRequest(userId, continuationToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SubscriptionsByUserResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SubscriptionsByUserResponse.DeserializeSubscriptionsByUserResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of subscriptions for the specified user. This is a preview API call. </summary>
        /// <param name="userId"> The graph ID or user principal name (UPN) of the user. </param>
        /// <param name="continuationToken"> Token required to get the next chunk of the result set. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="userId"/> is null. </exception>
        /// <remarks>
        /// ### Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<SubscriptionsByUserResponse> GetUserSubscriptionsAsAdmin(string userId, string continuationToken = null, CancellationToken cancellationToken = default)
        {
            if (userId == null)
            {
                throw new ArgumentNullException(nameof(userId));
            }

            using var message = CreateGetUserSubscriptionsAsAdminRequest(userId, continuationToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SubscriptionsByUserResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SubscriptionsByUserResponse.DeserializeSubscriptionsByUserResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
