// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    /// <summary> The Apps service client. </summary>
    public partial class AppsClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal AppsRestClient RestClient { get; }

        /// <summary> Initializes a new instance of AppsClient for mocking. </summary>
        protected AppsClient()
        {
        }

        /// <summary> Initializes a new instance of AppsClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public AppsClient(TokenCredential credential, Uri endpoint = null, PowerBIClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("https://api.powerbi.com");

            options ??= new PowerBIClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://analysis.windows.net/powerbi/api/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new AppsRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of AppsClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal AppsClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new AppsRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Returns a list of installed apps. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// App.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Apps>> GetAppsAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetApps");
            scope.Start();
            try
            {
                return await RestClient.GetAppsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of installed apps. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// App.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Apps> GetApps(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetApps");
            scope.Start();
            try
            {
                return RestClient.GetApps(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified installed app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// App.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<App>> GetAppAsync(Guid appId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetApp");
            scope.Start();
            try
            {
                return await RestClient.GetAppAsync(appId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified installed app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// App.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<App> GetApp(Guid appId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetApp");
            scope.Start();
            try
            {
                return RestClient.GetApp(appId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of reports from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Reports>> GetReportsAsync(Guid appId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetReports");
            scope.Start();
            try
            {
                return await RestClient.GetReportsAsync(appId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of reports from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Reports> GetReports(Guid appId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetReports");
            scope.Start();
            try
            {
                return RestClient.GetReports(appId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified report from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Report>> GetReportAsync(Guid appId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetReport");
            scope.Start();
            try
            {
                return await RestClient.GetReportAsync(appId, reportId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified report from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="reportId"> The report ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Report.ReadWrite.All or Report.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Report> GetReport(Guid appId, Guid reportId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetReport");
            scope.Start();
            try
            {
                return RestClient.GetReport(appId, reportId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of dashboards from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Dashboards>> GetDashboardsAsync(Guid appId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetDashboards");
            scope.Start();
            try
            {
                return await RestClient.GetDashboardsAsync(appId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of dashboards from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Dashboards> GetDashboards(Guid appId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetDashboards");
            scope.Start();
            try
            {
                return RestClient.GetDashboards(appId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified dashboard from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Dashboard>> GetDashboardAsync(Guid appId, Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetDashboard");
            scope.Start();
            try
            {
                return await RestClient.GetDashboardAsync(appId, dashboardId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified dashboard from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Dashboard> GetDashboard(Guid appId, Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetDashboard");
            scope.Start();
            try
            {
                return RestClient.GetDashboard(appId, dashboardId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of tiles within the specified dashboard from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Tiles>> GetTilesAsync(Guid appId, Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetTiles");
            scope.Start();
            try
            {
                return await RestClient.GetTilesAsync(appId, dashboardId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of tiles within the specified dashboard from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Tiles> GetTiles(Guid appId, Guid dashboardId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetTiles");
            scope.Start();
            try
            {
                return RestClient.GetTiles(appId, dashboardId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified tile within the specified dashboard from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="tileId"> The tile ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Supported tiles include datasets and live tiles that contain an entire report page.
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Tile>> GetTileAsync(Guid appId, Guid dashboardId, Guid tileId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetTile");
            scope.Start();
            try
            {
                return await RestClient.GetTileAsync(appId, dashboardId, tileId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified tile within the specified dashboard from the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="dashboardId"> The dashboard ID. </param>
        /// <param name="tileId"> The tile ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Supported tiles include datasets and live tiles that contain an entire report page.
        ///
        /// ## Required Scope
        ///
        /// Dashboard.ReadWrite.All or Dashboard.Read.All
        ///
        /// ## Limitations
        ///
        /// Service principal authentication isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Tile> GetTile(Guid appId, Guid dashboardId, Guid tileId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetTile");
            scope.Start();
            try
            {
                return RestClient.GetTile(appId, dashboardId, tileId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of apps in the organization. </summary>
        /// <param name="top"> The requested number of apps. </param>
        /// <param name="skip"> The number entries to be skipped. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// The query parameter $top is required.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<AdminApps>> GetAppsAsAdminAsync(int top, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetAppsAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetAppsAsAdminAsync(top, skip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of apps in the organization. </summary>
        /// <param name="top"> The requested number of apps. </param>
        /// <param name="skip"> The number entries to be skipped. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// The query parameter $top is required.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<AdminApps> GetAppsAsAdmin(int top, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetAppsAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetAppsAsAdmin(top, skip, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<AppUsers>> GetAppUsersAsAdminAsync(Guid appId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetAppUsersAsAdmin");
            scope.Start();
            try
            {
                return await RestClient.GetAppUsersAsAdminAsync(appId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users that have access to the specified app. </summary>
        /// <param name="appId"> The app ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<AppUsers> GetAppUsersAsAdmin(Guid appId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("AppsClient.GetAppUsersAsAdmin");
            scope.Start();
            try
            {
                return RestClient.GetAppUsersAsAdmin(appId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
