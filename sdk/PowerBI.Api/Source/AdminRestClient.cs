// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    internal partial class AdminRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of AdminRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public AdminRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://api.powerbi.com");
        }

        internal HttpMessage CreateAddPowerBIEncryptionKeyRequest(TenantKeyCreationRequest tenantKeyCreationRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/tenantKeys", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(tenantKeyCreationRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Adds an encryption key for Power BI workspaces assigned to a capacity. </summary>
        /// <param name="tenantKeyCreationRequest"> Tenant key information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantKeyCreationRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 600 requests per hour.
        /// </remarks>
        public async Task<Response<TenantKey>> AddPowerBIEncryptionKeyAsync(TenantKeyCreationRequest tenantKeyCreationRequest, CancellationToken cancellationToken = default)
        {
            if (tenantKeyCreationRequest == null)
            {
                throw new ArgumentNullException(nameof(tenantKeyCreationRequest));
            }

            using var message = CreateAddPowerBIEncryptionKeyRequest(tenantKeyCreationRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TenantKey value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TenantKey.DeserializeTenantKey(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Adds an encryption key for Power BI workspaces assigned to a capacity. </summary>
        /// <param name="tenantKeyCreationRequest"> Tenant key information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantKeyCreationRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 600 requests per hour.
        /// </remarks>
        public Response<TenantKey> AddPowerBIEncryptionKey(TenantKeyCreationRequest tenantKeyCreationRequest, CancellationToken cancellationToken = default)
        {
            if (tenantKeyCreationRequest == null)
            {
                throw new ArgumentNullException(nameof(tenantKeyCreationRequest));
            }

            using var message = CreateAddPowerBIEncryptionKeyRequest(tenantKeyCreationRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TenantKey value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TenantKey.DeserializeTenantKey(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPowerBIEncryptionKeysRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/tenantKeys", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the encryption keys for the tenant. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public async Task<Response<TenantKeys>> GetPowerBIEncryptionKeysAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPowerBIEncryptionKeysRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TenantKeys value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TenantKeys.DeserializeTenantKeys(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the encryption keys for the tenant. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public Response<TenantKeys> GetPowerBIEncryptionKeys(CancellationToken cancellationToken = default)
        {
            using var message = CreateGetPowerBIEncryptionKeysRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TenantKeys value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TenantKeys.DeserializeTenantKeys(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRotatePowerBIEncryptionKeyRequest(Guid tenantKeyId, TenantKeyRotationRequest tenantKeyRotationRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/tenantKeys/", false);
            uri.AppendPath(tenantKeyId, true);
            uri.AppendPath("/Default.Rotate", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(tenantKeyRotationRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Rotate the encryption key for Power BI workspaces assigned to a capacity. </summary>
        /// <param name="tenantKeyId"> The tenant key ID. </param>
        /// <param name="tenantKeyRotationRequest"> Tenant key information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantKeyRotationRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 600 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<TenantKey>> RotatePowerBIEncryptionKeyAsync(Guid tenantKeyId, TenantKeyRotationRequest tenantKeyRotationRequest, CancellationToken cancellationToken = default)
        {
            if (tenantKeyRotationRequest == null)
            {
                throw new ArgumentNullException(nameof(tenantKeyRotationRequest));
            }

            using var message = CreateRotatePowerBIEncryptionKeyRequest(tenantKeyId, tenantKeyRotationRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TenantKey value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TenantKey.DeserializeTenantKey(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Rotate the encryption key for Power BI workspaces assigned to a capacity. </summary>
        /// <param name="tenantKeyId"> The tenant key ID. </param>
        /// <param name="tenantKeyRotationRequest"> Tenant key information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantKeyRotationRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 600 requests per hour.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<TenantKey> RotatePowerBIEncryptionKey(Guid tenantKeyId, TenantKeyRotationRequest tenantKeyRotationRequest, CancellationToken cancellationToken = default)
        {
            if (tenantKeyRotationRequest == null)
            {
                throw new ArgumentNullException(nameof(tenantKeyRotationRequest));
            }

            using var message = CreateRotatePowerBIEncryptionKeyRequest(tenantKeyId, tenantKeyRotationRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TenantKey value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TenantKey.DeserializeTenantKey(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetCapacitiesAsAdminRequest(string expand)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/capacities", false);
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of capacities for the organization. </summary>
        /// <param name="expand"> Expands related entities inline. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public async Task<Response<Capacities>> GetCapacitiesAsAdminAsync(string expand = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetCapacitiesAsAdminRequest(expand);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Capacities value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Capacities.DeserializeCapacities(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of capacities for the organization. </summary>
        /// <param name="expand"> Expands related entities inline. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public Response<Capacities> GetCapacitiesAsAdmin(string expand = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetCapacitiesAsAdminRequest(expand);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Capacities value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Capacities.DeserializeCapacities(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePatchCapacityAsAdminRequest(Guid capacityId, CapacityPatchRequest capacityPatchRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/capacities/", false);
            uri.AppendPath(capacityId, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(capacityPatchRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Changes specific capacity information. Currently, this API call only supports changing the capacity's encryption key. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="capacityPatchRequest"> Patch capacity information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="capacityPatchRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public async Task<Response> PatchCapacityAsAdminAsync(Guid capacityId, CapacityPatchRequest capacityPatchRequest, CancellationToken cancellationToken = default)
        {
            if (capacityPatchRequest == null)
            {
                throw new ArgumentNullException(nameof(capacityPatchRequest));
            }

            using var message = CreatePatchCapacityAsAdminRequest(capacityId, capacityPatchRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Changes specific capacity information. Currently, this API call only supports changing the capacity's encryption key. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="capacityPatchRequest"> Patch capacity information. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="capacityPatchRequest"/> is null. </exception>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must be a Fabric administrator.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public Response PatchCapacityAsAdmin(Guid capacityId, CapacityPatchRequest capacityPatchRequest, CancellationToken cancellationToken = default)
        {
            if (capacityPatchRequest == null)
            {
                throw new ArgumentNullException(nameof(capacityPatchRequest));
            }

            using var message = CreatePatchCapacityAsAdminRequest(capacityId, capacityPatchRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRefreshablesRequest(int top, string expand, string filter, int? skip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/capacities/refreshables", false);
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            uri.AppendQuery("$top", top, true);
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of refreshables for the organization within a capacity. </summary>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public async Task<Response<Refreshables>> GetRefreshablesAsync(int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetRefreshablesRequest(top, expand, filter, skip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Refreshables value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Refreshables.DeserializeRefreshables(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of refreshables for the organization within a capacity. </summary>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public Response<Refreshables> GetRefreshables(int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetRefreshablesRequest(top, expand, filter, skip);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Refreshables value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Refreshables.DeserializeRefreshables(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRefreshablesForCapacityRequest(Guid capacityId, int top, string expand, string filter, int? skip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/capacities/", false);
            uri.AppendPath(capacityId, true);
            uri.AppendPath("/refreshables", false);
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            uri.AppendQuery("$top", top, true);
            if (skip != null)
            {
                uri.AppendQuery("$skip", skip.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of refreshables for the specified capacity that the user has access to. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public async Task<Response<Refreshables>> GetRefreshablesForCapacityAsync(Guid capacityId, int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetRefreshablesForCapacityRequest(capacityId, top, expand, filter, skip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Refreshables value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Refreshables.DeserializeRefreshables(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of refreshables for the specified capacity that the user has access to. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="filter"> Returns a subset of a results based on [Odata](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptions) filter query parameter condition. </param>
        /// <param name="skip"> Skips the first n results. Use with top to fetch results beyond the first 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public Response<Refreshables> GetRefreshablesForCapacity(Guid capacityId, int top, string expand = null, string filter = null, int? skip = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetRefreshablesForCapacityRequest(capacityId, top, expand, filter, skip);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Refreshables value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Refreshables.DeserializeRefreshables(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRefreshableForCapacityRequest(Guid capacityId, string refreshableId, string expand)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/capacities/", false);
            uri.AppendPath(capacityId, true);
            uri.AppendPath("/refreshables/", false);
            uri.AppendPath(refreshableId, true);
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns the specified refreshable for the specified capacity that the user has access to. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="refreshableId"> The refreshable ID. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="refreshableId"/> is null. </exception>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public async Task<Response<Refreshables>> GetRefreshableForCapacityAsync(Guid capacityId, string refreshableId, string expand = null, CancellationToken cancellationToken = default)
        {
            if (refreshableId == null)
            {
                throw new ArgumentNullException(nameof(refreshableId));
            }

            using var message = CreateGetRefreshableForCapacityRequest(capacityId, refreshableId, expand);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Refreshables value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Refreshables.DeserializeRefreshables(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns the specified refreshable for the specified capacity that the user has access to. </summary>
        /// <param name="capacityId"> The capacity ID. </param>
        /// <param name="refreshableId"> The refreshable ID. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `capacities` and `groups`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="refreshableId"/> is null. </exception>
        /// <remarks>
        /// Power BI retains a seven-day refresh history for each dataset, up to a maximum of sixty refreshes.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// Maximum 200 requests per hour.
        /// </remarks>
        public Response<Refreshables> GetRefreshableForCapacity(Guid capacityId, string refreshableId, string expand = null, CancellationToken cancellationToken = default)
        {
            if (refreshableId == null)
            {
                throw new ArgumentNullException(nameof(refreshableId));
            }

            using var message = CreateGetRefreshableForCapacityRequest(capacityId, refreshableId, expand);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Refreshables value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Refreshables.DeserializeRefreshables(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetActivityEventsRequest(string startDateTime, string endDateTime, string continuationToken, string filter)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/admin/activityevents", false);
            if (startDateTime != null)
            {
                uri.AppendQuery("startDateTime", startDateTime, true);
            }
            if (endDateTime != null)
            {
                uri.AppendQuery("endDateTime", endDateTime, true);
            }
            if (continuationToken != null)
            {
                uri.AppendQuery("continuationToken", continuationToken, true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of audit activity events for a tenant. </summary>
        /// <param name="startDateTime"> Start date and time of the window for audit event results. Must be in ISO 8601 compliant UTC format. </param>
        /// <param name="endDateTime"> End date and time of the window for audit event results. Must be in ISO 8601 compliant UTC format. </param>
        /// <param name="continuationToken"> Token required to get the next chunk of the result set. </param>
        /// <param name="filter"> Filters the results based on a boolean condition, using 'Activity', 'UserId', or both properties. Supports only 'eq' and 'and' operators. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Provide either a continuation token or both a start and end date time. `StartDateTime` and `EndDateTime` must be in the same UTC day and should be wrapped in single quotes.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// - Maximum 200 requests per hour.
        /// - Activity logging isn't supported for Microsoft Cloud Deutschland.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<ActivityEventResponse>> GetActivityEventsAsync(string startDateTime = null, string endDateTime = null, string continuationToken = null, string filter = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetActivityEventsRequest(startDateTime, endDateTime, continuationToken, filter);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ActivityEventResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ActivityEventResponse.DeserializeActivityEventResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of audit activity events for a tenant. </summary>
        /// <param name="startDateTime"> Start date and time of the window for audit event results. Must be in ISO 8601 compliant UTC format. </param>
        /// <param name="endDateTime"> End date and time of the window for audit event results. Must be in ISO 8601 compliant UTC format. </param>
        /// <param name="continuationToken"> Token required to get the next chunk of the result set. </param>
        /// <param name="filter"> Filters the results based on a boolean condition, using 'Activity', 'UserId', or both properties. Supports only 'eq' and 'and' operators. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// Provide either a continuation token or both a start and end date time. `StartDateTime` and `EndDateTime` must be in the same UTC day and should be wrapped in single quotes.
        ///
        /// ## Permissions
        ///
        /// - The user must be a Fabric administrator or authenticate using a service principal.
        /// - Delegated permissions are supported.
        ///
        /// When running under service prinicipal authentication, an app **must not** have any admin-consent required premissions for Power BI set on it in the Azure portal.
        ///
        /// ## Required Scope
        ///
        /// Tenant.Read.All or Tenant.ReadWrite.All
        ///
        /// Relevant only when authenticating via a standard delegated admin access token. Must not be present when authentication via a service principal is used.
        ///
        /// ## Limitations
        ///
        /// - Maximum 200 requests per hour.
        /// - Activity logging isn't supported for Microsoft Cloud Deutschland.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<ActivityEventResponse> GetActivityEvents(string startDateTime = null, string endDateTime = null, string continuationToken = null, string filter = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetActivityEventsRequest(startDateTime, endDateTime, continuationToken, filter);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ActivityEventResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ActivityEventResponse.DeserializeActivityEventResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
