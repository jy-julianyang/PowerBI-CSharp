// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    internal partial class ScorecardsRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of ScorecardsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public ScorecardsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://api.powerbi.com");
        }

        internal HttpMessage CreatePreviewGetRequest(Guid groupId, int? top)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/scorecards", false);
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of scorecards from a workspace. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Scorecards>> PreviewGetAsync(Guid groupId, int? top = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewGetRequest(groupId, top);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Scorecards value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Scorecards.DeserializeScorecards(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of scorecards from a workspace. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="top"> Returns only the first n results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Scorecards> PreviewGet(Guid groupId, int? top = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewGetRequest(groupId, top);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Scorecards value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Scorecards.DeserializeScorecards(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePreviewPostRequest(Guid groupId, ScorecardCreateRequest scorecard)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/scorecards", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(scorecard);
            request.Content = content;
            return message;
        }

        /// <summary> Creates a new scorecard. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecard"> The new scorecard properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scorecard"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Scorecard>> PreviewPostAsync(Guid groupId, ScorecardCreateRequest scorecard, CancellationToken cancellationToken = default)
        {
            if (scorecard == null)
            {
                throw new ArgumentNullException(nameof(scorecard));
            }

            using var message = CreatePreviewPostRequest(groupId, scorecard);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Scorecard value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Scorecard.DeserializeScorecard(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Creates a new scorecard. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecard"> The new scorecard properties. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scorecard"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Scorecard> PreviewPost(Guid groupId, ScorecardCreateRequest scorecard, CancellationToken cancellationToken = default)
        {
            if (scorecard == null)
            {
                throw new ArgumentNullException(nameof(scorecard));
            }

            using var message = CreatePreviewPostRequest(groupId, scorecard);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Scorecard value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Scorecard.DeserializeScorecard(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePreviewGetByIDRequest(Guid groupId, Guid scorecardId, string expand)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/scorecards(", false);
            uri.AppendPath(scorecardId, true);
            uri.AppendPath(")", false);
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a scorecard with ID. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `goals`, `goalValues`, `aggregations`, and `notes`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Scorecard>> PreviewGetByIDAsync(Guid groupId, Guid scorecardId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewGetByIDRequest(groupId, scorecardId, expand);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Scorecard value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Scorecard.DeserializeScorecard(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a scorecard with ID. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `goals`, `goalValues`, `aggregations`, and `notes`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Scorecard> PreviewGetByID(Guid groupId, Guid scorecardId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewGetByIDRequest(groupId, scorecardId, expand);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Scorecard value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Scorecard.DeserializeScorecard(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePreviewPatchByIDRequest(Guid groupId, Guid scorecardId, Scorecard scorecard)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/scorecards(", false);
            uri.AppendPath(scorecardId, true);
            uri.AppendPath(")", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(scorecard);
            request.Content = content;
            return message;
        }

        /// <summary> Updates a scorecard by its ID. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="scorecard"> The scorecard properties to patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scorecard"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Scorecard>> PreviewPatchByIDAsync(Guid groupId, Guid scorecardId, Scorecard scorecard, CancellationToken cancellationToken = default)
        {
            if (scorecard == null)
            {
                throw new ArgumentNullException(nameof(scorecard));
            }

            using var message = CreatePreviewPatchByIDRequest(groupId, scorecardId, scorecard);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Scorecard value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Scorecard.DeserializeScorecard(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates a scorecard by its ID. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="scorecard"> The scorecard properties to patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="scorecard"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Scorecard> PreviewPatchByID(Guid groupId, Guid scorecardId, Scorecard scorecard, CancellationToken cancellationToken = default)
        {
            if (scorecard == null)
            {
                throw new ArgumentNullException(nameof(scorecard));
            }

            using var message = CreatePreviewPatchByIDRequest(groupId, scorecardId, scorecard);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Scorecard value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Scorecard.DeserializeScorecard(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePreviewDeleteByIDRequest(Guid groupId, Guid scorecardId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/scorecards(", false);
            uri.AppendPath(scorecardId, true);
            uri.AppendPath(")", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Deletes a scorecard by its ID. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> PreviewDeleteByIDAsync(Guid groupId, Guid scorecardId, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewDeleteByIDRequest(groupId, scorecardId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deletes a scorecard by its ID. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response PreviewDeleteByID(Guid groupId, Guid scorecardId, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewDeleteByIDRequest(groupId, scorecardId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePreviewGetScorecardByReportIdRequest(Guid groupId, Guid reportId, string expand)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/scorecards/GetScorecardByReportId(reportId=", false);
            uri.AppendPath(reportId, true);
            uri.AppendPath(")", false);
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Reads a scorecard associated with an internal report ID. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="reportId"> The ID of the internal report associated with the scorecard. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `goals`, `goalValues`, and `aggregations`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Scorecard>> PreviewGetScorecardByReportIdAsync(Guid groupId, Guid reportId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewGetScorecardByReportIdRequest(groupId, reportId, expand);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Scorecard value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Scorecard.DeserializeScorecard(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Reads a scorecard associated with an internal report ID. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="reportId"> The ID of the internal report associated with the scorecard. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `goals`, `goalValues`, and `aggregations`. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Scorecard> PreviewGetScorecardByReportId(Guid groupId, Guid reportId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewGetScorecardByReportIdRequest(groupId, reportId, expand);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Scorecard value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Scorecard.DeserializeScorecard(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePreviewMoveGoalsRequest(Guid groupId, Guid scorecardId, GoalsMoveRequest moveGoalsRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/scorecards(", false);
            uri.AppendPath(scorecardId, true);
            uri.AppendPath(")/MoveGoals()", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(moveGoalsRequest);
            request.Content = content;
            return message;
        }

        /// <summary> Moves goals within the scorecard. Changes their ranks and parents. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="moveGoalsRequest"> The request describing the move operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="moveGoalsRequest"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> PreviewMoveGoalsAsync(Guid groupId, Guid scorecardId, GoalsMoveRequest moveGoalsRequest, CancellationToken cancellationToken = default)
        {
            if (moveGoalsRequest == null)
            {
                throw new ArgumentNullException(nameof(moveGoalsRequest));
            }

            using var message = CreatePreviewMoveGoalsRequest(groupId, scorecardId, moveGoalsRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Moves goals within the scorecard. Changes their ranks and parents. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="moveGoalsRequest"> The request describing the move operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="moveGoalsRequest"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response PreviewMoveGoals(Guid groupId, Guid scorecardId, GoalsMoveRequest moveGoalsRequest, CancellationToken cancellationToken = default)
        {
            if (moveGoalsRequest == null)
            {
                throw new ArgumentNullException(nameof(moveGoalsRequest));
            }

            using var message = CreatePreviewMoveGoalsRequest(groupId, scorecardId, moveGoalsRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
