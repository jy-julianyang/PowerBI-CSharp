// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    internal partial class GoalsRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of GoalsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        public GoalsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://api.powerbi.com");
        }

        internal HttpMessage CreatePreviewGetRequest(Guid groupId, Guid scorecardId, string expand, string select)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/scorecards(", false);
            uri.AppendPath(scorecardId, true);
            uri.AppendPath(")/goals", false);
            if (expand != null)
            {
                uri.AppendQuery("$expand", expand, true);
            }
            if (select != null)
            {
                uri.AppendQuery("$select", select, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a list of goals from a scorecard. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `goalValues` and `aggregations`. </param>
        /// <param name="select"> Allows the clients to select specific properties from the server. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Goals>> PreviewGetAsync(Guid groupId, Guid scorecardId, string expand = null, string select = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewGetRequest(groupId, scorecardId, expand, select);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Goals value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Goals.DeserializeGoals(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a list of goals from a scorecard. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="expand"> Accepts a comma-separated list of data types, which will be expanded inline in the response. Supports `goalValues` and `aggregations`. </param>
        /// <param name="select"> Allows the clients to select specific properties from the server. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Goals> PreviewGet(Guid groupId, Guid scorecardId, string expand = null, string select = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewGetRequest(groupId, scorecardId, expand, select);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Goals value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Goals.DeserializeGoals(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePreviewPostRequest(Guid groupId, Guid scorecardId, GoalCreateRequest goal)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/scorecards(", false);
            uri.AppendPath(scorecardId, true);
            uri.AppendPath(")/goals", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(goal);
            request.Content = content;
            return message;
        }

        /// <summary> Adds a new goal to a scorecard. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goal"> The properties of the new goal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="goal"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Goal>> PreviewPostAsync(Guid groupId, Guid scorecardId, GoalCreateRequest goal, CancellationToken cancellationToken = default)
        {
            if (goal == null)
            {
                throw new ArgumentNullException(nameof(goal));
            }

            using var message = CreatePreviewPostRequest(groupId, scorecardId, goal);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Goal value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Goal.DeserializeGoal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Adds a new goal to a scorecard. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goal"> The properties of the new goal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="goal"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Goal> PreviewPost(Guid groupId, Guid scorecardId, GoalCreateRequest goal, CancellationToken cancellationToken = default)
        {
            if (goal == null)
            {
                throw new ArgumentNullException(nameof(goal));
            }

            using var message = CreatePreviewPostRequest(groupId, scorecardId, goal);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Goal value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Goal.DeserializeGoal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePreviewGetByIDRequest(Guid groupId, Guid scorecardId, Guid goalId, string expand)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/scorecards(", false);
            uri.AppendPath(scorecardId, true);
            uri.AppendPath(")/goals(", false);
            uri.AppendPath(goalId, true);
            uri.AppendPath(")", false);
            if (expand != null)
            {
                uri.AppendQuery("expand", expand, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a goal by ID from a scorecard. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="expand"> description. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Goal>> PreviewGetByIDAsync(Guid groupId, Guid scorecardId, Guid goalId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewGetByIDRequest(groupId, scorecardId, goalId, expand);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Goal value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Goal.DeserializeGoal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Returns a goal by ID from a scorecard. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="expand"> description. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Goal> PreviewGetByID(Guid groupId, Guid scorecardId, Guid goalId, string expand = null, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewGetByIDRequest(groupId, scorecardId, goalId, expand);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Goal value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Goal.DeserializeGoal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePreviewPatchByIDRequest(Guid groupId, Guid scorecardId, Guid goalId, Goal goal)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/scorecards(", false);
            uri.AppendPath(scorecardId, true);
            uri.AppendPath(")/goals(", false);
            uri.AppendPath(goalId, true);
            uri.AppendPath(")", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(goal);
            request.Content = content;
            return message;
        }

        /// <summary> Updates a goal by ID. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="goal"> The goal properties to patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="goal"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Goal>> PreviewPatchByIDAsync(Guid groupId, Guid scorecardId, Guid goalId, Goal goal, CancellationToken cancellationToken = default)
        {
            if (goal == null)
            {
                throw new ArgumentNullException(nameof(goal));
            }

            using var message = CreatePreviewPatchByIDRequest(groupId, scorecardId, goalId, goal);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Goal value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Goal.DeserializeGoal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates a goal by ID. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="goal"> The goal properties to patch. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="goal"/> is null. </exception>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Goal> PreviewPatchByID(Guid groupId, Guid scorecardId, Guid goalId, Goal goal, CancellationToken cancellationToken = default)
        {
            if (goal == null)
            {
                throw new ArgumentNullException(nameof(goal));
            }

            using var message = CreatePreviewPatchByIDRequest(groupId, scorecardId, goalId, goal);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Goal value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Goal.DeserializeGoal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePreviewDeleteByIDRequest(Guid groupId, Guid scorecardId, Guid goalId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/scorecards(", false);
            uri.AppendPath(scorecardId, true);
            uri.AppendPath(")/goals(", false);
            uri.AppendPath(goalId, true);
            uri.AppendPath(")", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Deletes a goal from a scorecard by goal ID. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> PreviewDeleteByIDAsync(Guid groupId, Guid scorecardId, Guid goalId, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewDeleteByIDRequest(groupId, scorecardId, goalId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deletes a goal from a scorecard by goal ID. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response PreviewDeleteByID(Guid groupId, Guid scorecardId, Guid goalId, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewDeleteByIDRequest(groupId, scorecardId, goalId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePreviewGetRefreshHistoryRequest(Guid groupId, Guid scorecardId, Guid goalId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/scorecards(", false);
            uri.AppendPath(scorecardId, true);
            uri.AppendPath(")/goals(", false);
            uri.AppendPath(goalId, true);
            uri.AppendPath(")/GetRefreshHistory()", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Reads refresh history of a connected goal. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<GoalRefreshHistories>> PreviewGetRefreshHistoryAsync(Guid groupId, Guid scorecardId, Guid goalId, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewGetRefreshHistoryRequest(groupId, scorecardId, goalId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GoalRefreshHistories value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = GoalRefreshHistories.DeserializeGoalRefreshHistories(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Reads refresh history of a connected goal. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.Read.All or Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<GoalRefreshHistories> PreviewGetRefreshHistory(Guid groupId, Guid scorecardId, Guid goalId, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewGetRefreshHistoryRequest(groupId, scorecardId, goalId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        GoalRefreshHistories value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = GoalRefreshHistories.DeserializeGoalRefreshHistories(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePreviewDeleteGoalCurrentValueConnectionRequest(Guid groupId, Guid scorecardId, Guid goalId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/scorecards(", false);
            uri.AppendPath(scorecardId, true);
            uri.AppendPath(")/goals(", false);
            uri.AppendPath(goalId, true);
            uri.AppendPath(")/DeleteGoalCurrentValueConnection()", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Disconnects the current value of a goal. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Goal>> PreviewDeleteGoalCurrentValueConnectionAsync(Guid groupId, Guid scorecardId, Guid goalId, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewDeleteGoalCurrentValueConnectionRequest(groupId, scorecardId, goalId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Goal value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Goal.DeserializeGoal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Disconnects the current value of a goal. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Goal> PreviewDeleteGoalCurrentValueConnection(Guid groupId, Guid scorecardId, Guid goalId, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewDeleteGoalCurrentValueConnectionRequest(groupId, scorecardId, goalId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Goal value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Goal.DeserializeGoal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePreviewDeleteGoalTargetValueConnectionRequest(Guid groupId, Guid scorecardId, Guid goalId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/scorecards(", false);
            uri.AppendPath(scorecardId, true);
            uri.AppendPath(")/goals(", false);
            uri.AppendPath(goalId, true);
            uri.AppendPath(")/DeleteGoalTargetValueConnection()", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Disconnects the target value of a goal. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response<Goal>> PreviewDeleteGoalTargetValueConnectionAsync(Guid groupId, Guid scorecardId, Guid goalId, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewDeleteGoalTargetValueConnectionRequest(groupId, scorecardId, goalId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Goal value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Goal.DeserializeGoal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Disconnects the target value of a goal. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response<Goal> PreviewDeleteGoalTargetValueConnection(Guid groupId, Guid scorecardId, Guid goalId, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewDeleteGoalTargetValueConnectionRequest(groupId, scorecardId, goalId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Goal value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Goal.DeserializeGoal(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePreviewRefreshGoalCurrentValueRequest(Guid groupId, Guid scorecardId, Guid goalId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/scorecards(", false);
            uri.AppendPath(scorecardId, true);
            uri.AppendPath(")/goals(", false);
            uri.AppendPath(goalId, true);
            uri.AppendPath(")/RefreshGoalCurrentValue()", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Schedules a refresh of the connected value of a goal. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> PreviewRefreshGoalCurrentValueAsync(Guid groupId, Guid scorecardId, Guid goalId, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewRefreshGoalCurrentValueRequest(groupId, scorecardId, goalId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Schedules a refresh of the connected value of a goal. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response PreviewRefreshGoalCurrentValue(Guid groupId, Guid scorecardId, Guid goalId, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewRefreshGoalCurrentValueRequest(groupId, scorecardId, goalId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePreviewRefreshGoalTargetValueRequest(Guid groupId, Guid scorecardId, Guid goalId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/v1.0/myorg/groups/", false);
            uri.AppendPath(groupId, true);
            uri.AppendPath("/scorecards(", false);
            uri.AppendPath(scorecardId, true);
            uri.AppendPath(")/goals(", false);
            uri.AppendPath(goalId, true);
            uri.AppendPath(")/RefreshGoalTargetValue()", false);
            request.Uri = uri;
            return message;
        }

        /// <summary> Schedules a refresh of the target value of a goal. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public async Task<Response> PreviewRefreshGoalTargetValueAsync(Guid groupId, Guid scorecardId, Guid goalId, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewRefreshGoalTargetValueRequest(groupId, scorecardId, goalId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Schedules a refresh of the target value of a goal. </summary>
        /// <param name="groupId"> The unique identifier of the workspace. </param>
        /// <param name="scorecardId"> The unique identifier of the scorecard. </param>
        /// <param name="goalId"> The unique identifier of the goal. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public Response PreviewRefreshGoalTargetValue(Guid groupId, Guid scorecardId, Guid goalId, CancellationToken cancellationToken = default)
        {
            using var message = CreatePreviewRefreshGoalTargetValueRequest(groupId, scorecardId, goalId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
