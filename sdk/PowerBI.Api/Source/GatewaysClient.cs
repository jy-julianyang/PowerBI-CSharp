// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Microsoft.PowerBI.Api.Models;

namespace Microsoft.PowerBI.Api
{
    /// <summary> The Gateways service client. </summary>
    public partial class GatewaysClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal GatewaysRestClient RestClient { get; }

        /// <summary> Initializes a new instance of GatewaysClient for mocking. </summary>
        protected GatewaysClient()
        {
        }

        /// <summary> Initializes a new instance of GatewaysClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public GatewaysClient(TokenCredential credential, Uri endpoint = null, PowerBIClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            endpoint ??= new Uri("https://api.powerbi.com");

            options ??= new PowerBIClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://analysis.windows.net/powerbi/api/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new GatewaysRestClient(_clientDiagnostics, _pipeline, endpoint);
        }

        /// <summary> Initializes a new instance of GatewaysClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/> or <paramref name="pipeline"/> is null. </exception>
        internal GatewaysClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new GatewaysRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Returns a list of gateways for which the user is an admin. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Gateways>> GetGatewaysAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.GetGateways");
            scope.Start();
            try
            {
                return await RestClient.GetGatewaysAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of gateways for which the user is an admin. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Gateways> GetGateways(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.GetGateways");
            scope.Start();
            try
            {
                return RestClient.GetGateways(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<Gateway>> GetGatewayAsync(Guid gatewayId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.GetGateway");
            scope.Start();
            try
            {
                return await RestClient.GetGatewayAsync(gatewayId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<Gateway> GetGateway(Guid gatewayId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.GetGateway");
            scope.Start();
            try
            {
                return RestClient.GetGateway(gatewayId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of data sources from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<GatewayDatasources>> GetDatasourcesAsync(Guid gatewayId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.GetDatasources");
            scope.Start();
            try
            {
                return await RestClient.GetDatasourcesAsync(gatewayId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of data sources from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<GatewayDatasources> GetDatasources(Guid gatewayId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.GetDatasources");
            scope.Start();
            try
            {
                return RestClient.GetDatasources(gatewayId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new data source on the specified on-premises gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceToGatewayRequest"> A request to create a new data source on a gateway. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &lt;br&gt;On premises data source credentials must be encrypted. The `encryptedConnection` parameter must be set to `Encrypted` and the credentials should be encrypted using the gateway public key.
        ///
        /// See the [Create Gateway DataSource](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/CreateDatasource.ps1) PowerShell script for an example of using this API, this script uses the PowerShell script mentioned in the note below for encrypting the credentials.
        ///
        /// &gt; [!NOTE]
        /// &gt; To encrypt credentials, see [Configure credentials programmatically](/power-bi/developer/embedded/configure-credentials) for Power BI and review the EncryptCredentials [.NET Core](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/.NET%20Core/EncryptCredentials), [Java](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/Java/EncryptCredentials), [Python](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/Python/Encrypt%20credentials) and [PowerShell](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/EncryptGatewayCredentials.ps1) examples.
        ///
        /// ## Permissions
        ///
        /// Supports only on-premises gateways and the user must have gateway admin permissions
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Virtual network (VNet) and Cloud gateways aren't supported.
        /// - OAuth2 as a credential type isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<GatewayDatasource>> CreateDatasourceAsync(Guid gatewayId, PublishDatasourceToGatewayRequest datasourceToGatewayRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.CreateDatasource");
            scope.Start();
            try
            {
                return await RestClient.CreateDatasourceAsync(gatewayId, datasourceToGatewayRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new data source on the specified on-premises gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceToGatewayRequest"> A request to create a new data source on a gateway. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// &lt;br&gt;On premises data source credentials must be encrypted. The `encryptedConnection` parameter must be set to `Encrypted` and the credentials should be encrypted using the gateway public key.
        ///
        /// See the [Create Gateway DataSource](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/CreateDatasource.ps1) PowerShell script for an example of using this API, this script uses the PowerShell script mentioned in the note below for encrypting the credentials.
        ///
        /// &gt; [!NOTE]
        /// &gt; To encrypt credentials, see [Configure credentials programmatically](/power-bi/developer/embedded/configure-credentials) for Power BI and review the EncryptCredentials [.NET Core](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/.NET%20Core/EncryptCredentials), [Java](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/Java/EncryptCredentials), [Python](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/Python/Encrypt%20credentials) and [PowerShell](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/EncryptGatewayCredentials.ps1) examples.
        ///
        /// ## Permissions
        ///
        /// Supports only on-premises gateways and the user must have gateway admin permissions
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - Virtual network (VNet) and Cloud gateways aren't supported.
        /// - OAuth2 as a credential type isn't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<GatewayDatasource> CreateDatasource(Guid gatewayId, PublishDatasourceToGatewayRequest datasourceToGatewayRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.CreateDatasource");
            scope.Start();
            try
            {
                return RestClient.CreateDatasource(gatewayId, datasourceToGatewayRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified data source from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<GatewayDatasource>> GetDatasourceAsync(Guid gatewayId, Guid datasourceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.GetDatasource");
            scope.Start();
            try
            {
                return await RestClient.GetDatasourceAsync(gatewayId, datasourceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the specified data source from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<GatewayDatasource> GetDatasource(Guid gatewayId, Guid datasourceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.GetDatasource");
            scope.Start();
            try
            {
                return RestClient.GetDatasource(gatewayId, datasourceId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified data source from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> DeleteDatasourceAsync(Guid gatewayId, Guid datasourceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.DeleteDatasource");
            scope.Start();
            try
            {
                return await RestClient.DeleteDatasourceAsync(gatewayId, datasourceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified data source from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response DeleteDatasource(Guid gatewayId, Guid datasourceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.DeleteDatasource");
            scope.Start();
            try
            {
                return RestClient.DeleteDatasource(gatewayId, datasourceId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the credentials of the specified data source from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="updateDatasourceRequest"> The update data source request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// On Premises data source credentials must be encrypted, as described in the [On-premise encrypted credentials example](/rest/api/power-bi/gateways/update-datasource#on-premise-encrypted-credentials-example).
        ///
        ///  See the [Patch Datasource Credentials](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/PatchDatasourceCredentials.ps1) PowerShell script for an example of using this API, this script uses the PowerShell script mentioned in the note below for encrypting the credentials.
        ///
        /// &gt; [!NOTE]
        /// &gt; - To encrypt credentials, see [Configure credentials programmatically](/power-bi/developer/embedded/configure-credentials) for Power BI and review the EncryptCredentials [.NET Core](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/.NET%20Core/EncryptCredentials), [Java](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/Java/EncryptCredentials), [Python](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/Python/Encrypt%20credentials) and [PowerShell](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/EncryptGatewayCredentials.ps1) examples.
        /// &gt; - Windows credentials before encryption look like the credentials in the credentials of [Basic credentials example](/rest/api/power-bi/gateways/update-datasource#basic-credentials-example).
        ///
        /// When changing from single sign-on to other credential types, such as `Basic` or `OAuth2`, set the parameter `useEndUserOAuth2Credentials` to `false` as described in the [Basic credentials example](/rest/api/power-bi/gateways/update-datasource#basic-credentials-example).
        ///
        /// OAuth 2.0 credentials are valid as long as the provided token is valid. When using the OAuth 2.0 credential type, do the following:
        /// - Set the OAuth 2.0 token audience correctly, according to the data source type.
        /// - Send the OAuth 2.0 token in the payload as shown in the [OAuth 2.0 credentials example](/rest/api/power-bi/gateways/update-datasource#oauth-2.0-credentials-example).
        /// - If you're using **Extension** data sources, don't set `useCallerAADIdentity` to `true`.
        ///
        /// ## Permissions
        ///
        /// - With on-premises gateways, the user must have gateway admin permissions.
        /// - With cloud data sources, user must be the data source owner. Use [Datasets - Take Over API](/rest/api/power-bi/datasets/take-over-in-group) to transfer ownership over the specified dataset or [Paginated reports - Take Over API](/rest/api/power-bi/reports/take-over-in-group) to transfer ownership of the data sources over the specified paginated report.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - When setting OAuth credentials, a refresh token isn't incorporated as it is when setting credentials through the UI in Power BI service. Therefore, credentials can only be used for one hour.
        /// - Virtual network (VNet) gateways aren't supported.
        /// - SAS Token credentials are supported only with AzureBlobStorage and AzureDataLakeStorage.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> UpdateDatasourceAsync(Guid gatewayId, Guid datasourceId, UpdateDatasourceRequest updateDatasourceRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.UpdateDatasource");
            scope.Start();
            try
            {
                return await RestClient.UpdateDatasourceAsync(gatewayId, datasourceId, updateDatasourceRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the credentials of the specified data source from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="updateDatasourceRequest"> The update data source request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// On Premises data source credentials must be encrypted, as described in the [On-premise encrypted credentials example](/rest/api/power-bi/gateways/update-datasource#on-premise-encrypted-credentials-example).
        ///
        ///  See the [Patch Datasource Credentials](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/PatchDatasourceCredentials.ps1) PowerShell script for an example of using this API, this script uses the PowerShell script mentioned in the note below for encrypting the credentials.
        ///
        /// &gt; [!NOTE]
        /// &gt; - To encrypt credentials, see [Configure credentials programmatically](/power-bi/developer/embedded/configure-credentials) for Power BI and review the EncryptCredentials [.NET Core](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/.NET%20Core/EncryptCredentials), [Java](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/Java/EncryptCredentials), [Python](https://github.com/microsoft/PowerBI-Developer-Samples/tree/master/Python/Encrypt%20credentials) and [PowerShell](https://github.com/microsoft/PowerBI-Developer-Samples/blob/master/PowerShell%20Scripts/EncryptGatewayCredentials.ps1) examples.
        /// &gt; - Windows credentials before encryption look like the credentials in the credentials of [Basic credentials example](/rest/api/power-bi/gateways/update-datasource#basic-credentials-example).
        ///
        /// When changing from single sign-on to other credential types, such as `Basic` or `OAuth2`, set the parameter `useEndUserOAuth2Credentials` to `false` as described in the [Basic credentials example](/rest/api/power-bi/gateways/update-datasource#basic-credentials-example).
        ///
        /// OAuth 2.0 credentials are valid as long as the provided token is valid. When using the OAuth 2.0 credential type, do the following:
        /// - Set the OAuth 2.0 token audience correctly, according to the data source type.
        /// - Send the OAuth 2.0 token in the payload as shown in the [OAuth 2.0 credentials example](/rest/api/power-bi/gateways/update-datasource#oauth-2.0-credentials-example).
        /// - If you're using **Extension** data sources, don't set `useCallerAADIdentity` to `true`.
        ///
        /// ## Permissions
        ///
        /// - With on-premises gateways, the user must have gateway admin permissions.
        /// - With cloud data sources, user must be the data source owner. Use [Datasets - Take Over API](/rest/api/power-bi/datasets/take-over-in-group) to transfer ownership over the specified dataset or [Paginated reports - Take Over API](/rest/api/power-bi/reports/take-over-in-group) to transfer ownership of the data sources over the specified paginated report.
        /// - This API call can be called by a service principal profile. For more information see: [Service principal profiles in Power BI Embedded](/power-bi/developer/embedded/embed-multi-tenancy).
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// - When setting OAuth credentials, a refresh token isn't incorporated as it is when setting credentials through the UI in Power BI service. Therefore, credentials can only be used for one hour.
        /// - Virtual network (VNet) gateways aren't supported.
        /// - SAS Token credentials are supported only with AzureBlobStorage and AzureDataLakeStorage.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response UpdateDatasource(Guid gatewayId, Guid datasourceId, UpdateDatasourceRequest updateDatasourceRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.UpdateDatasource");
            scope.Start();
            try
            {
                return RestClient.UpdateDatasource(gatewayId, datasourceId, updateDatasourceRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks the connectivity status of the specified data source from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> GetDatasourceStatusAsync(Guid gatewayId, Guid datasourceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.GetDatasourceStatus");
            scope.Start();
            try
            {
                return await RestClient.GetDatasourceStatusAsync(gatewayId, datasourceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks the connectivity status of the specified data source from the specified gateway. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response GetDatasourceStatus(Guid gatewayId, Guid datasourceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.GetDatasourceStatus");
            scope.Start();
            try
            {
                return RestClient.GetDatasourceStatus(gatewayId, datasourceId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users who have access to the specified data source. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response<DatasourceUsers>> GetDatasourceUsersAsync(Guid gatewayId, Guid datasourceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.GetDatasourceUsers");
            scope.Start();
            try
            {
                return await RestClient.GetDatasourceUsersAsync(gatewayId, datasourceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a list of users who have access to the specified data source. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All or Dataset.Read.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response<DatasourceUsers> GetDatasourceUsers(Guid gatewayId, Guid datasourceId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.GetDatasourceUsers");
            scope.Start();
            try
            {
                return RestClient.GetDatasourceUsers(gatewayId, datasourceId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grants or updates the permissions required to use the specified data source for the specified user. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="addUserToDatasourceRequest"> The add user to data source request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// Adding groups through the API is not supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> AddDatasourceUserAsync(Guid gatewayId, Guid datasourceId, DatasourceUser addUserToDatasourceRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.AddDatasourceUser");
            scope.Start();
            try
            {
                return await RestClient.AddDatasourceUserAsync(gatewayId, datasourceId, addUserToDatasourceRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Grants or updates the permissions required to use the specified data source for the specified user. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="addUserToDatasourceRequest"> The add user to data source request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// Adding groups through the API is not supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response AddDatasourceUser(Guid gatewayId, Guid datasourceId, DatasourceUser addUserToDatasourceRequest, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.AddDatasourceUser");
            scope.Start();
            try
            {
                return RestClient.AddDatasourceUser(gatewayId, datasourceId, addUserToDatasourceRequest, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes the specified user from the specified data source. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="emailAdress"> The user's email address or the object ID of the service principal. </param>
        /// <param name="profileId"> The service principal profile ID to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual async Task<Response> DeleteDatasourceUserAsync(Guid gatewayId, Guid datasourceId, string emailAdress, Guid? profileId = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.DeleteDatasourceUser");
            scope.Start();
            try
            {
                return await RestClient.DeleteDatasourceUserAsync(gatewayId, datasourceId, emailAdress, profileId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Removes the specified user from the specified data source. </summary>
        /// <param name="gatewayId"> The gateway ID. When using a gateway cluster, the gateway ID refers to the primary (first) gateway in the cluster. In such cases, gateway ID is similar to gateway cluster ID. </param>
        /// <param name="datasourceId"> The data source ID. </param>
        /// <param name="emailAdress"> The user's email address or the object ID of the service principal. </param>
        /// <param name="profileId"> The service principal profile ID to delete. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// ## Permissions
        ///
        /// The user must have gateway admin permissions.
        ///
        /// ## Required Scope
        ///
        /// Dataset.ReadWrite.All
        ///
        /// ## Limitations
        ///
        /// Virtual network (VNet) gateways aren't supported.
        /// &lt;br&gt;&lt;br&gt;
        /// </remarks>
        public virtual Response DeleteDatasourceUser(Guid gatewayId, Guid datasourceId, string emailAdress, Guid? profileId = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GatewaysClient.DeleteDatasourceUser");
            scope.Start();
            try
            {
                return RestClient.DeleteDatasourceUser(gatewayId, datasourceId, emailAdress, profileId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
